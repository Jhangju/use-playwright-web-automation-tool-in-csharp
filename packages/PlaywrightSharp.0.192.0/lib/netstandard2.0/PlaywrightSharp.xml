<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PlaywrightSharp</name>
    </assembly>
    <members>
        <member name="P:PlaywrightSharp.BindingCall.PlaywrightSharp#Transport#Channels#IChannelOwner#Channel">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.BindingCall.PlaywrightSharp#Transport#Channels#IChannelOwner{PlaywrightSharp#BindingCall}#Channel">
            <inheritdoc/>
        </member>
        <member name="T:PlaywrightSharp.BindingSource">
            <summary>
            <see cref="M:PlaywrightSharp.IBrowserContext.ExposeBindingAsync(System.String,System.Action{PlaywrightSharp.BindingSource})"/> caller information.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.BindingSource.Context">
            <summary>
            Browser Context.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.BindingSource.Page">
            <summary>
            Page.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.BindingSource.Frame">
            <summary>
            Frame.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Browser">
            <inheritdoc cref="T:PlaywrightSharp.IBrowser"/>
        </member>
        <member name="E:PlaywrightSharp.Browser.Disconnected">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Browser.PlaywrightSharp#Transport#Channels#IChannelOwner#Channel">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Browser.PlaywrightSharp#Transport#Channels#IChannelOwner{PlaywrightSharp#Browser}#Channel">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Browser.IsConnected">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Browser.Version">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Browser.Contexts">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Browser.CloseAsync">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Browser.NewContextAsync(PlaywrightSharp.ViewportSize,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,PlaywrightSharp.Geolocation,PlaywrightSharp.ContextPermission[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Decimal},PlaywrightSharp.Credentials,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{PlaywrightSharp.ColorScheme},System.String,System.Collections.Generic.Dictionary{System.String,System.String},PlaywrightSharp.RecordHarOptions,PlaywrightSharp.RecordVideoOptions,PlaywrightSharp.ProxySettings,System.String,PlaywrightSharp.StorageState)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Browser.NewContextAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,PlaywrightSharp.Geolocation,PlaywrightSharp.ContextPermission[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Decimal},PlaywrightSharp.Credentials,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{PlaywrightSharp.ColorScheme},System.String,System.Collections.Generic.Dictionary{System.String,System.String},PlaywrightSharp.RecordHarOptions,PlaywrightSharp.RecordVideoOptions,PlaywrightSharp.ProxySettings,System.String,PlaywrightSharp.StorageState)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Browser.NewContextAsync(PlaywrightSharp.BrowserContextOptions)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Browser.NewPageAsync(PlaywrightSharp.ViewportSize,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,PlaywrightSharp.Geolocation,PlaywrightSharp.ContextPermission[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Decimal},PlaywrightSharp.Credentials,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{PlaywrightSharp.ColorScheme},System.String,System.Collections.Generic.Dictionary{System.String,System.String},PlaywrightSharp.RecordHarOptions,PlaywrightSharp.RecordVideoOptions,PlaywrightSharp.ProxySettings,System.String,PlaywrightSharp.StorageState)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Browser.NewPageAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,PlaywrightSharp.Geolocation,PlaywrightSharp.ContextPermission[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Decimal},PlaywrightSharp.Credentials,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{PlaywrightSharp.ColorScheme},System.String,System.Collections.Generic.Dictionary{System.String,System.String},PlaywrightSharp.RecordHarOptions,PlaywrightSharp.RecordVideoOptions,PlaywrightSharp.ProxySettings,System.String,PlaywrightSharp.StorageState)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Browser.NewPageAsync(PlaywrightSharp.BrowserContextOptions)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Browser.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="T:PlaywrightSharp.BrowserContext">
            <inheritdoc cref="T:PlaywrightSharp.IBrowserContext" />
        </member>
        <member name="E:PlaywrightSharp.BrowserContext.Close">
            <inheritdoc/>
        </member>
        <member name="E:PlaywrightSharp.BrowserContext.Page">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.BrowserContext.PlaywrightSharp#Transport#Channels#IChannelOwner#Channel">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.BrowserContext.PlaywrightSharp#Transport#Channels#IChannelOwner{PlaywrightSharp#BrowserContext}#Channel">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.BrowserContext.Browser">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.BrowserContext.Pages">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.BrowserContext.DefaultTimeout">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.BrowserContext.DefaultNavigationTimeout">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.NewPageAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.CloseAsync">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.GetCookiesAsync(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.AddCookiesAsync(System.Collections.Generic.IEnumerable{PlaywrightSharp.SetNetworkCookieParam})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.AddCookiesAsync(PlaywrightSharp.SetNetworkCookieParam[])">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.ClearCookiesAsync">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.GrantPermissionsAsync(PlaywrightSharp.ContextPermission[],System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.GrantPermissionsAsync(PlaywrightSharp.ContextPermission,System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.SetGeolocationAsync(System.Decimal,System.Decimal,System.Decimal)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.SetGeolocationAsync(PlaywrightSharp.Geolocation)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.ClearPermissionsAsync">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.ExposeBindingAsync(System.String,System.Action{PlaywrightSharp.BindingSource})">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.ExposeBindingAsync``1(System.String,System.Action{PlaywrightSharp.BindingSource,``0})">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.ExposeBindingAsync``1(System.String,System.Func{PlaywrightSharp.BindingSource,``0})">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.ExposeBindingAsync``1(System.String,System.Func{PlaywrightSharp.BindingSource,PlaywrightSharp.IJSHandle,``0})">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.ExposeBindingAsync``2(System.String,System.Func{PlaywrightSharp.BindingSource,``0,``1})">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.ExposeBindingAsync``3(System.String,System.Func{PlaywrightSharp.BindingSource,``0,``1,``2})">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.ExposeBindingAsync``4(System.String,System.Func{PlaywrightSharp.BindingSource,``0,``1,``2,``3})">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.ExposeBindingAsync``5(System.String,System.Func{PlaywrightSharp.BindingSource,``0,``1,``2,``3,``4})">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.ExposeFunctionAsync(System.String,System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.ExposeFunctionAsync``1(System.String,System.Action{``0})">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.ExposeFunctionAsync``1(System.String,System.Func{``0})">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.ExposeFunctionAsync``2(System.String,System.Func{``0,``1})">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.ExposeFunctionAsync``3(System.String,System.Func{``0,``1,``2})">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.ExposeFunctionAsync``4(System.String,System.Func{``0,``1,``2,``3})">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.ExposeFunctionAsync``5(System.String,System.Func{``0,``1,``2,``3,``4})">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.WaitForEventAsync``1(PlaywrightSharp.PlaywrightEvent{``0},System.Func{``0,System.Boolean},System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.AddInitScriptAsync(System.String,System.Object[],System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.SetHttpCredentialsAsync(PlaywrightSharp.Credentials)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.SetOfflineAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.RouteAsync(System.String,System.Action{PlaywrightSharp.Route,PlaywrightSharp.IRequest})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.RouteAsync(System.Text.RegularExpressions.Regex,System.Action{PlaywrightSharp.Route,PlaywrightSharp.IRequest})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.RouteAsync(System.Func{System.String,System.Boolean},System.Action{PlaywrightSharp.Route,PlaywrightSharp.IRequest})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.UnrouteAsync(System.String,System.Action{PlaywrightSharp.Route,PlaywrightSharp.IRequest})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.UnrouteAsync(System.Text.RegularExpressions.Regex,System.Action{PlaywrightSharp.Route,PlaywrightSharp.IRequest})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.UnrouteAsync(System.Func{System.String,System.Boolean},System.Action{PlaywrightSharp.Route,PlaywrightSharp.IRequest})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.SetExtraHTTPHeadersAsync(System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.BrowserContext.GetStorageStateAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="T:PlaywrightSharp.BrowserContextOptions">
            <summary>
            <see cref="M:PlaywrightSharp.IBrowser.NewContextAsync(PlaywrightSharp.BrowserContextOptions)"/>.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.BrowserContextOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PlaywrightSharp.BrowserContextOptions"/> class.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.BrowserContextOptions.#ctor(PlaywrightSharp.DeviceDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:PlaywrightSharp.BrowserContextOptions"/> class.
            </summary>
            <param name="device">Device used to hydrate initial values.</param>
        </member>
        <member name="P:PlaywrightSharp.BrowserContextOptions.Viewport">
            <summary>
            Sets a consistent viewport for each page. Defaults to an 800x600 viewport. null disables the default viewport.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.BrowserContextOptions.UserAgent">
            <summary>
            Specific user agent to use in this context.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.BrowserContextOptions.BypassCSP">
            <summary>
            Toggles bypassing page's Content-Security-Policy.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.BrowserContextOptions.JavaScriptEnabled">
            <summary>
            Whether or not to enable or disable JavaScript in the context. Defaults to true.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.BrowserContextOptions.IgnoreHTTPSErrors">
            <summary>
            Whether to ignore HTTPS errors during navigation. Defaults to false.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.BrowserContextOptions.TimezoneId">
            <summary>
            Changes the timezone of the context. See <see href="https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1">ICU’s metaZones.txt</see> for a list of supported timezone IDs.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.BrowserContextOptions.Geolocation">
            <summary>
            Changes the Geolocation of the context.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.BrowserContextOptions.Permissions">
            <summary>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> from origin keys to permissions values. See <see cref="M:PlaywrightSharp.IBrowserContext.GrantPermissionsAsync(PlaywrightSharp.ContextPermission[],System.String)"/> for more details.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.BrowserContextOptions.IsMobile">
            <summary>
            Gets or sets whether the meta viewport tag is taken into account.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.BrowserContextOptions.Offline">
            <summary>
            Whether to emulate network being offline. Defaults to `false`.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.BrowserContextOptions.DeviceScaleFactor">
            <summary>
            Gets or sets the device scale factor.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.BrowserContextOptions.HttpCredentials">
            <summary>
            Credentials for HTTP authentication.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.BrowserContextOptions.HasTouch">
            <summary>
            Specifies if viewport supports touch events. Defaults to false.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.BrowserContextOptions.AcceptDownloads">
            <summary>
            Whether to automatically download all the attachments. Defaults to false where all the downloads are canceled.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.BrowserContextOptions.ColorScheme">
            <summary>
            Emulates 'prefers-colors-scheme' media feature.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.BrowserContextOptions.Locale">
            <summary>
            Specify user locale, for example en-GB, de-DE, etc. Locale will affect navigator.language value, Accept-Language request header value as well as number and date formatting rules.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.BrowserContextOptions.ExtraHTTPHeaders">
            <summary>
            An object containing additional HTTP headers to be sent with every request.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.BrowserContextOptions.RecordHar">
            <summary>
            Enables HAR recording for all pages into recordHar.path file. If not specified, the HAR is not recorded.
            Make sure to await <see cref="M:PlaywrightSharp.IPage.CloseAsync(System.Boolean)"/> for the HAR to be saved.
            You can use <see cref="T:PlaywrightSharp.Har.HarResult"/> to deserialize the generated JSON file.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.BrowserContextOptions.RecordVideo">
            <summary>
            Enables video recording for all pages into recordVideo.dir directory. If not specified videos are not recorded.
            Make sure to await <seealso cref="M:PlaywrightSharp.BrowserContext.CloseAsync"/> for videos to be saved.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.BrowserContextOptions.Proxy">
            <summary>
            Network proxy settings to use with this context. Note that browser needs to be launched with the global proxy for this option to work. If all contexts override the proxy, global proxy will be never used and can be any string..
            </summary>
        </member>
        <member name="P:PlaywrightSharp.BrowserContextOptions.StorageStatePath">
            <summary>
            Path to the file with saved storage.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.BrowserContextOptions.StorageState">
            <summary>
            Populates context with given storage state. This method can be used to initialize context with logged-in information obtained via <see cref="M:PlaywrightSharp.IBrowserContext.GetStorageStateAsync(System.String)"/>.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.BrowserContextOptions.Clone">
            <summary>
            Clones the <see cref="T:PlaywrightSharp.BrowserContextOptions"/>.
            </summary>
            <returns>A copy of the current <see cref="T:PlaywrightSharp.BrowserContextOptions"/>.</returns>
        </member>
        <member name="T:PlaywrightSharp.BrowserType">
            <inheritdoc cref="T:PlaywrightSharp.IBrowserType" />
        </member>
        <member name="F:PlaywrightSharp.BrowserType.Chromium">
            <summary>
            Browser type Chromium.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.BrowserType.Firefox">
            <summary>
            Browser type Firefox.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.BrowserType.Webkit">
            <summary>
            Browser type WebKit.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.BrowserType.PlaywrightSharp#Transport#Channels#IChannelOwner#Channel">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.BrowserType.PlaywrightSharp#Transport#Channels#IChannelOwner{PlaywrightSharp#BrowserType}#Channel">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.BrowserType.ExecutablePath">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.BrowserType.Name">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.BrowserType.LaunchAsync(System.Nullable{System.Boolean},System.String[],System.String,System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String[],System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.Object},PlaywrightSharp.ProxySettings,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.BrowserType.LaunchAsync(PlaywrightSharp.LaunchOptions)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.BrowserType.LaunchPersistentContextAsync(System.String,PlaywrightSharp.ViewportSize,System.Nullable{System.Boolean},System.String[],System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String[],System.Collections.Generic.Dictionary{System.String,System.String},PlaywrightSharp.ProxySettings,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,PlaywrightSharp.Geolocation,PlaywrightSharp.ContextPermission[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Decimal},PlaywrightSharp.Credentials,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{PlaywrightSharp.ColorScheme},System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},PlaywrightSharp.RecordHarOptions,PlaywrightSharp.RecordVideoOptions)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.BrowserType.LaunchPersistentContextAsync(System.String,System.Nullable{System.Boolean},System.String[],System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String[],System.Collections.Generic.Dictionary{System.String,System.String},PlaywrightSharp.ProxySettings,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,PlaywrightSharp.Geolocation,PlaywrightSharp.ContextPermission[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Decimal},PlaywrightSharp.Credentials,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{PlaywrightSharp.ColorScheme},System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},PlaywrightSharp.RecordHarOptions,PlaywrightSharp.RecordVideoOptions)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.BrowserType.LaunchPersistentContextAsync(System.String,PlaywrightSharp.LaunchOptions)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.BrowserType.LaunchPersistentContextAsync(System.String,PlaywrightSharp.LaunchPersistentOptions)">
            <inheritdoc />
        </member>
        <member name="T:PlaywrightSharp.CheckedState">
            <summary>
            Three-state boolean. See <seealso cref="P:PlaywrightSharp.SerializedAXNode.Checked"/>.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.CheckedState.Checked">
            <summary>
            Checked.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.CheckedState.Unchecked">
            <summary>
            Unchecked.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.CheckedState.Mixed">
            <summary>
            Mixed.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Chromium.CDPEventArgs">
            <summary>
            See <see cref="E:PlaywrightSharp.Chromium.ICDPSession.MessageReceived"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Chromium.CDPEventArgs.Method">
            <summary>
            Method name.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Chromium.CDPEventArgs.Params">
            <summary>
            Message arguments.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Chromium.CDPSession">
            <inheritdoc/>
        </member>
        <member name="E:PlaywrightSharp.Chromium.CDPSession.MessageReceived">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Chromium.CDPSession.PlaywrightSharp#Transport#Channels#IChannelOwner#Connection">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Chromium.CDPSession.PlaywrightSharp#Transport#Channels#IChannelOwner#Channel">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Chromium.CDPSession.PlaywrightSharp#Transport#Channels#IChannelOwner{PlaywrightSharp#Chromium#CDPSession}#Channel">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Chromium.CDPSession.SendAsync(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Chromium.CDPSession.SendAsync``1(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Chromium.CDPSession.DetachAsync">
            <inheritdoc/>
        </member>
        <member name="T:PlaywrightSharp.Chromium.ChromiumBrowser">
            <inheritdoc cref="T:PlaywrightSharp.Chromium.IChromiumBrowser"/>
        </member>
        <member name="P:PlaywrightSharp.Chromium.ChromiumBrowser.Contexts">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Chromium.ChromiumBrowser.StartTracingAsync(PlaywrightSharp.IPage,System.Boolean,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Chromium.ChromiumBrowser.StopTracingAsync">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Chromium.ChromiumBrowser.NewBrowserCDPSessionAsync">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Chromium.ChromiumBrowser.NewContextAsync(PlaywrightSharp.ViewportSize,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,PlaywrightSharp.Geolocation,PlaywrightSharp.ContextPermission[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Decimal},PlaywrightSharp.Credentials,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{PlaywrightSharp.ColorScheme},System.String,System.Collections.Generic.Dictionary{System.String,System.String},PlaywrightSharp.RecordHarOptions,PlaywrightSharp.RecordVideoOptions,PlaywrightSharp.ProxySettings,System.String,PlaywrightSharp.StorageState)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Chromium.ChromiumBrowser.NewContextAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,PlaywrightSharp.Geolocation,PlaywrightSharp.ContextPermission[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Decimal},PlaywrightSharp.Credentials,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{PlaywrightSharp.ColorScheme},System.String,System.Collections.Generic.Dictionary{System.String,System.String},PlaywrightSharp.RecordHarOptions,PlaywrightSharp.RecordVideoOptions,PlaywrightSharp.ProxySettings,System.String,PlaywrightSharp.StorageState)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Chromium.ChromiumBrowser.NewContextAsync(PlaywrightSharp.BrowserContextOptions)">
            <inheritdoc/>
        </member>
        <member name="T:PlaywrightSharp.Chromium.ChromiumBrowserContext">
            <inheritdoc cref="T:PlaywrightSharp.Chromium.IChromiumBrowserContext"/>
        </member>
        <member name="E:PlaywrightSharp.Chromium.ChromiumBrowserContext.BackgroundPage">
            <inheritdoc/>
        </member>
        <member name="E:PlaywrightSharp.Chromium.ChromiumBrowserContext.ServiceWorker">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Chromium.ChromiumBrowserContext.BackgroundPages">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Chromium.ChromiumBrowserContext.ServiceWorkers">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Chromium.ChromiumBrowserContext.NewCDPSessionAsync(PlaywrightSharp.IPage)">
            <inheritdoc />
        </member>
        <member name="T:PlaywrightSharp.Chromium.ChromiumBrowserType">
            <inheritdoc cref="T:PlaywrightSharp.Chromium.IChromiumBrowserType"/>
        </member>
        <member name="M:PlaywrightSharp.Chromium.ChromiumBrowserType.LaunchAsync(PlaywrightSharp.LaunchOptions)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Chromium.ChromiumBrowserType.LaunchAsync(System.Nullable{System.Boolean},System.String[],System.String,System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String[],System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.Object},PlaywrightSharp.ProxySettings,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Chromium.ChromiumBrowserType.LaunchPersistentContextAsync(System.String,PlaywrightSharp.LaunchOptions)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Chromium.ChromiumBrowserType.LaunchPersistentContextAsync(System.String,PlaywrightSharp.ViewportSize,System.Nullable{System.Boolean},System.String[],System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String[],System.Collections.Generic.Dictionary{System.String,System.String},PlaywrightSharp.ProxySettings,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,PlaywrightSharp.Geolocation,PlaywrightSharp.ContextPermission[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Decimal},PlaywrightSharp.Credentials,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{PlaywrightSharp.ColorScheme},System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},PlaywrightSharp.RecordHarOptions,PlaywrightSharp.RecordVideoOptions)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Chromium.ChromiumBrowserType.LaunchPersistentContextAsync(System.String,System.Nullable{System.Boolean},System.String[],System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String[],System.Collections.Generic.Dictionary{System.String,System.String},PlaywrightSharp.ProxySettings,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,PlaywrightSharp.Geolocation,PlaywrightSharp.ContextPermission[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Decimal},PlaywrightSharp.Credentials,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{PlaywrightSharp.ColorScheme},System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},PlaywrightSharp.RecordHarOptions,PlaywrightSharp.RecordVideoOptions)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Chromium.ChromiumBrowserType.LaunchPersistentContextAsync(System.String,PlaywrightSharp.LaunchPersistentOptions)">
            <inheritdoc/>
        </member>
        <member name="T:PlaywrightSharp.Chromium.ICDPSession">
            <summary>
            The CDPSession instances are used to talk raw Chrome Devtools Protocol.
            </summary>
        </member>
        <member name="E:PlaywrightSharp.Chromium.ICDPSession.MessageReceived">
            <summary>
            Raised when a new message is received.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.Chromium.ICDPSession.SendAsync(System.String,System.Object)">
            <summary>
            Make a method call to the browser session.
            </summary>
            <param name="method">Method name.</param>
            <param name="args">Arguments.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message was confirmed by the browser session, yielding the result.</returns>
        </member>
        <member name="M:PlaywrightSharp.Chromium.ICDPSession.SendAsync``1(System.String,System.Object)">
            <summary>
            Make a method call to the browser session.
            </summary>
            <typeparam name="T">Return type.</typeparam>
            <param name="method">Method name.</param>
            <param name="args">Arguments.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message was confirmed by the browser session, yielding the result.</returns>
        </member>
        <member name="M:PlaywrightSharp.Chromium.ICDPSession.DetachAsync">
            <summary>
            Detaches the CDPSession from the target. Once detached, the CDPSession object won't emit any events and can't be used to send messages.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message was confirmed by the browser session.</returns>
        </member>
        <member name="T:PlaywrightSharp.Chromium.IChromiumBrowser">
            <summary>
            Chromium-specific features including Tracing, service worker support, etc.
            You can use chromiumBrowser.StartTracingAsync and chromiumBrowser.StopTracingAsync to create a trace file which can be opened in Chrome DevTools or timeline viewer.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Chromium.IChromiumBrowser.Contexts">
            <inheritdoc cref="P:PlaywrightSharp.IBrowser.Contexts"/>
        </member>
        <member name="M:PlaywrightSharp.Chromium.IChromiumBrowser.StartTracingAsync(PlaywrightSharp.IPage,System.Boolean,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Starts tracing.
            </summary>
            <param name="page">Optional, if specified, tracing includes screenshots of the given page.</param>
            <param name="screenshots">Gets or sets a value indicating whether Tracing should captures screenshots in the trace.</param>
            <param name="path">A path to write the trace file to.</param>
            <param name="categories">Specify custom categories to use instead of default.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message was confirmed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.Chromium.IChromiumBrowser.StopTracingAsync">
            <summary>
            Stops tracing.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message was confirmed by the browser, yielding the tracing result.</returns>
        </member>
        <member name="M:PlaywrightSharp.Chromium.IChromiumBrowser.NewBrowserCDPSessionAsync">
            <summary>
            Creates a new browser session.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the browser session was created, yielding the new session.</returns>
        </member>
        <member name="M:PlaywrightSharp.Chromium.IChromiumBrowser.NewContextAsync(PlaywrightSharp.ViewportSize,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,PlaywrightSharp.Geolocation,PlaywrightSharp.ContextPermission[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Decimal},PlaywrightSharp.Credentials,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{PlaywrightSharp.ColorScheme},System.String,System.Collections.Generic.Dictionary{System.String,System.String},PlaywrightSharp.RecordHarOptions,PlaywrightSharp.RecordVideoOptions,PlaywrightSharp.ProxySettings,System.String,PlaywrightSharp.StorageState)">
            <inheritdoc cref="M:PlaywrightSharp.IBrowser.NewContextAsync(PlaywrightSharp.ViewportSize,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,PlaywrightSharp.Geolocation,PlaywrightSharp.ContextPermission[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Decimal},PlaywrightSharp.Credentials,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{PlaywrightSharp.ColorScheme},System.String,System.Collections.Generic.Dictionary{System.String,System.String},PlaywrightSharp.RecordHarOptions,PlaywrightSharp.RecordVideoOptions,PlaywrightSharp.ProxySettings,System.String,PlaywrightSharp.StorageState)"/>
        </member>
        <member name="M:PlaywrightSharp.Chromium.IChromiumBrowser.NewContextAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,PlaywrightSharp.Geolocation,PlaywrightSharp.ContextPermission[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Decimal},PlaywrightSharp.Credentials,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{PlaywrightSharp.ColorScheme},System.String,System.Collections.Generic.Dictionary{System.String,System.String},PlaywrightSharp.RecordHarOptions,PlaywrightSharp.RecordVideoOptions,PlaywrightSharp.ProxySettings,System.String,PlaywrightSharp.StorageState)">
            <inheritdoc cref="M:PlaywrightSharp.IBrowser.NewContextAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,PlaywrightSharp.Geolocation,PlaywrightSharp.ContextPermission[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Decimal},PlaywrightSharp.Credentials,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{PlaywrightSharp.ColorScheme},System.String,System.Collections.Generic.Dictionary{System.String,System.String},PlaywrightSharp.RecordHarOptions,PlaywrightSharp.RecordVideoOptions,PlaywrightSharp.ProxySettings,System.String,PlaywrightSharp.StorageState)"/>
        </member>
        <member name="M:PlaywrightSharp.Chromium.IChromiumBrowser.NewContextAsync(PlaywrightSharp.BrowserContextOptions)">
            <inheritdoc cref="M:PlaywrightSharp.IBrowser.NewContextAsync(PlaywrightSharp.BrowserContextOptions)"/>
        </member>
        <member name="T:PlaywrightSharp.Chromium.IChromiumBrowserContext">
            <summary>
            Chromium-specific features including background pages, service worker support, etc.
            </summary>
        </member>
        <member name="E:PlaywrightSharp.Chromium.IChromiumBrowserContext.BackgroundPage">
            <summary>
            Raised when new background page is created in the context. Chromium only
            </summary>
        </member>
        <member name="E:PlaywrightSharp.Chromium.IChromiumBrowserContext.ServiceWorker">
            <summary>
            Raised when new service worker is created in the context. Chromium only
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Chromium.IChromiumBrowserContext.BackgroundPages">
            <summary>
            All existing background pages in the context. Chromium Only.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Chromium.IChromiumBrowserContext.ServiceWorkers">
            <summary>
            All existing service workers in the context. Chromium Only.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.Chromium.IChromiumBrowserContext.NewCDPSessionAsync(PlaywrightSharp.IPage)">
            <summary>
            Creates a new browser session.
            </summary>
            <param name="page">Page to create a new session for.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the browser session was created, yielding the new session.</returns>
        </member>
        <member name="T:PlaywrightSharp.Chromium.IChromiumBrowserType">
            <inheritdoc cref="T:PlaywrightSharp.IBrowserType"/>
        </member>
        <member name="M:PlaywrightSharp.Chromium.IChromiumBrowserType.LaunchAsync(PlaywrightSharp.LaunchOptions)">
            <inheritdoc cref="M:PlaywrightSharp.IBrowserType.LaunchAsync(PlaywrightSharp.LaunchOptions)"/>
        </member>
        <member name="M:PlaywrightSharp.Chromium.IChromiumBrowserType.LaunchAsync(System.Nullable{System.Boolean},System.String[],System.String,System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String[],System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.Object},PlaywrightSharp.ProxySettings,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <inheritdoc cref="M:PlaywrightSharp.IBrowserType.LaunchAsync(System.Nullable{System.Boolean},System.String[],System.String,System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String[],System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.Object},PlaywrightSharp.ProxySettings,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})"/>
        </member>
        <member name="M:PlaywrightSharp.Chromium.IChromiumBrowserType.LaunchPersistentContextAsync(System.String,PlaywrightSharp.LaunchOptions)">
            <inheritdoc cref="M:PlaywrightSharp.IBrowserType.LaunchPersistentContextAsync(System.String,PlaywrightSharp.LaunchOptions)"/>
        </member>
        <member name="M:PlaywrightSharp.Chromium.IChromiumBrowserType.LaunchPersistentContextAsync(System.String,PlaywrightSharp.ViewportSize,System.Nullable{System.Boolean},System.String[],System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String[],System.Collections.Generic.Dictionary{System.String,System.String},PlaywrightSharp.ProxySettings,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,PlaywrightSharp.Geolocation,PlaywrightSharp.ContextPermission[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Decimal},PlaywrightSharp.Credentials,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{PlaywrightSharp.ColorScheme},System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},PlaywrightSharp.RecordHarOptions,PlaywrightSharp.RecordVideoOptions)">
            <inheritdoc cref="M:PlaywrightSharp.IBrowserType.LaunchPersistentContextAsync(System.String,PlaywrightSharp.ViewportSize,System.Nullable{System.Boolean},System.String[],System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String[],System.Collections.Generic.Dictionary{System.String,System.String},PlaywrightSharp.ProxySettings,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,PlaywrightSharp.Geolocation,PlaywrightSharp.ContextPermission[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Decimal},PlaywrightSharp.Credentials,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{PlaywrightSharp.ColorScheme},System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},PlaywrightSharp.RecordHarOptions,PlaywrightSharp.RecordVideoOptions)"/>
        </member>
        <member name="M:PlaywrightSharp.Chromium.IChromiumBrowserType.LaunchPersistentContextAsync(System.String,System.Nullable{System.Boolean},System.String[],System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String[],System.Collections.Generic.Dictionary{System.String,System.String},PlaywrightSharp.ProxySettings,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,PlaywrightSharp.Geolocation,PlaywrightSharp.ContextPermission[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Decimal},PlaywrightSharp.Credentials,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{PlaywrightSharp.ColorScheme},System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},PlaywrightSharp.RecordHarOptions,PlaywrightSharp.RecordVideoOptions)">
            <inheritdoc cref="M:PlaywrightSharp.IBrowserType.LaunchPersistentContextAsync(System.String,System.Nullable{System.Boolean},System.String[],System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String[],System.Collections.Generic.Dictionary{System.String,System.String},PlaywrightSharp.ProxySettings,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,PlaywrightSharp.Geolocation,PlaywrightSharp.ContextPermission[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Decimal},PlaywrightSharp.Credentials,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{PlaywrightSharp.ColorScheme},System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},PlaywrightSharp.RecordHarOptions,PlaywrightSharp.RecordVideoOptions)"/>
        </member>
        <member name="M:PlaywrightSharp.Chromium.IChromiumBrowserType.LaunchPersistentContextAsync(System.String,PlaywrightSharp.LaunchPersistentOptions)">
            <inheritdoc cref="M:PlaywrightSharp.IBrowserType.LaunchPersistentContextAsync(System.String,PlaywrightSharp.LaunchPersistentOptions)"/>
        </member>
        <member name="T:PlaywrightSharp.ChromiumCoverage">
            <summary>
            Coverage gathers information about parts of JavaScript and CSS that were used by the page..
            </summary>
        </member>
        <member name="M:PlaywrightSharp.ChromiumCoverage.StartCSSCoverageAsync(System.Boolean)">
            <summary>
            Start the CSS coverage.
            </summary>
            <param name="resetOnNavigation"> Whether to reset coverage on every navigation. Defaults to true.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that resolves when the coverage started.</returns>
        </member>
        <member name="M:PlaywrightSharp.ChromiumCoverage.StartJSCoverageAsync(System.Boolean,System.Boolean)">
            <summary>
            Start the JS coverage.
            </summary>
            <param name="resetOnNavigation"> Whether to reset coverage on every navigation. Defaults to true.</param>
            <param name="reportAnonymousScripts">Whether anonymous scripts generated by the page should be reported. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that resolves when the coverage started.</returns>
        </member>
        <member name="M:PlaywrightSharp.ChromiumCoverage.StopCSSCoverageAsync">
            <summary>
            Stop processing the CSS coverage.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that resolves to the coverage result.</returns>
        </member>
        <member name="M:PlaywrightSharp.ChromiumCoverage.StopJSCoverageAsync">
            <summary>
            Stop processing the JS coverage.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that resolves to the coverage result.</returns>
        </member>
        <member name="T:PlaywrightSharp.ColorScheme">
            <summary>
            Options for <see cref="M:PlaywrightSharp.IPage.EmulateMediaAsync(System.Nullable{PlaywrightSharp.MediaType},System.Nullable{PlaywrightSharp.ColorScheme})"/>.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ColorScheme.Light">
            <summary>
            Light.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ColorScheme.Dark">
            <summary>
            Dark.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ColorScheme.NoPreference">
            <summary>
            No preference.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.ConsoleEventArgs">
            <summary>
            <see cref="E:PlaywrightSharp.IPage.Console"/> data.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.ConsoleEventArgs.#ctor(PlaywrightSharp.ConsoleMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:PlaywrightSharp.ConsoleEventArgs"/> class.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="P:PlaywrightSharp.ConsoleEventArgs.Message">
            <summary>
            Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:PlaywrightSharp.ConsoleMessage">
            <summary>
            ConsoleMessage is part of <see cref="T:PlaywrightSharp.ConsoleEventArgs"/> used by <see cref="E:PlaywrightSharp.IPage.Console"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.ConsoleMessage.PlaywrightSharp#Transport#Channels#IChannelOwner#Channel">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.ConsoleMessage.PlaywrightSharp#Transport#Channels#IChannelOwner{PlaywrightSharp#ConsoleMessage}#Channel">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.ConsoleMessage.Type">
            <summary>
            Gets the ConsoleMessage type.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.ConsoleMessage.Args">
            <summary>
            Gets the arguments.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.ConsoleMessage.Location">
            <summary>
            Gets the location.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.ConsoleMessage.Text">
            <summary>
            Gets the console text.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.ConsoleMessageLocation">
            <summary>
            Console message location.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.ConsoleMessageLocation.URL">
            <summary>
            URL of the resource if known.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.ConsoleMessageLocation.LineNumber">
            <summary>
            0-based line number in the resource if known.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.ConsoleMessageLocation.ColumnNumber">
            <summary>
            0-based column number in the resource if known.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.ConsoleMessageLocation.op_Equality(PlaywrightSharp.ConsoleMessageLocation,PlaywrightSharp.ConsoleMessageLocation)">
            <inheritdoc cref="T:System.IEquatable`1"/>
        </member>
        <member name="M:PlaywrightSharp.ConsoleMessageLocation.op_Inequality(PlaywrightSharp.ConsoleMessageLocation,PlaywrightSharp.ConsoleMessageLocation)">
            <inheritdoc cref="T:System.IEquatable`1"/>
        </member>
        <member name="M:PlaywrightSharp.ConsoleMessageLocation.Equals(PlaywrightSharp.ConsoleMessageLocation)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.ConsoleMessageLocation.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.ConsoleMessageLocation.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:PlaywrightSharp.ContextEvent">
            <summary>
            Context events. See <see cref="M:PlaywrightSharp.IBrowserContext.WaitForEventAsync``1(PlaywrightSharp.PlaywrightEvent{``0},System.Func{``0,System.Boolean},System.Nullable{System.Int32})"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.ContextEvent.Page">
            <summary>
            <see cref="T:PlaywrightSharp.PlaywrightEvent`1"/> representing a <see cref="E:PlaywrightSharp.IBrowserContext.Page"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.ContextEvent.Close">
            <summary>
            <see cref="T:PlaywrightSharp.PlaywrightEvent`1"/> representing a <see cref="E:PlaywrightSharp.IBrowserContext.Close"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.ContextEvent.BackgroundPage">
            <summary>
            <see cref="T:PlaywrightSharp.PlaywrightEvent`1"/> representing a <see cref="E:PlaywrightSharp.Chromium.IChromiumBrowserContext.BackgroundPage"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.ContextEvent.ServiceWorker">
            <summary>
            <see cref="T:PlaywrightSharp.PlaywrightEvent`1"/> representing a <see cref="E:PlaywrightSharp.Chromium.IChromiumBrowserContext.ServiceWorker"/>.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.ContextPermission">
            <summary>
            Options for <see cref="M:PlaywrightSharp.IBrowserContext.GrantPermissionsAsync(PlaywrightSharp.ContextPermission[],System.String)"/>.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ContextPermission.Geolocation">
            <summary>
            Geolocation.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ContextPermission.Midi">
            <summary>
            MIDI.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ContextPermission.Notifications">
            <summary>
            Notifications.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ContextPermission.Push">
            <summary>
            Push.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ContextPermission.Camera">
            <summary>
            Camera.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ContextPermission.Microphone">
            <summary>
            Microphone.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ContextPermission.BackgroundSync">
            <summary>
            Background sync.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ContextPermission.Sensors">
            <summary>
            Ambient light sensor, Accelerometer, Gyroscope, Magnetometer.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ContextPermission.AccessibilityEvents">
            <summary>
            Accessibility events.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ContextPermission.ClipboardRead">
            <summary>
            Clipboard read.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ContextPermission.ClipboardWrite">
            <summary>
            Clipboard write.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ContextPermission.PaymentHandler">
            <summary>
            Payment handler.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ContextPermission.MidiSysex">
            <summary>
            MIDI sysex.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ContextPermission.AmbientLightSensor">
            <summary>
            Ambient Light Sensor.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ContextPermission.Accelerometer">
            <summary>
            Accelerometer.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ContextPermission.Gyroscope">
            <summary>
            Gyroscope.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ContextPermission.Magnetometer">
            <summary>
            Magnetometer.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Credentials">
            <summary>
            Options to be used in <see cref="M:PlaywrightSharp.IBrowserContext.SetHttpCredentialsAsync(PlaywrightSharp.Credentials)"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Credentials.Username">
            <summary>
            Gets or sets the username to be used for authentication.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Credentials.Password">
            <summary>
            Gets or sets the password to be used for authentication.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.CSSCoverageEntry">
            <summary>
            Coverage report for all non-anonymous scripts.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.CSSCoverageEntry.Url">
            <summary>
            Script URL.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.CSSCoverageEntry.Ranges">
            <summary>
            Script ranges that were executed. Ranges are sorted and non-overlapping.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.CSSCoverageEntry.Text">
            <summary>
            Script content.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.CSSCoverageEntryRange">
            <summary>
            Script range.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.CSSCoverageEntryRange.Start">
            <summary>
            A start offset in text, inclusive.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.CSSCoverageEntryRange.End">
            <summary>
            An end offset in text, exclusive.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.CSSCoverageEntryRange.Equals(System.Object)">
            <inheritdoc cref="T:System.Object"/>
        </member>
        <member name="M:PlaywrightSharp.CSSCoverageEntryRange.GetHashCode">
            <inheritdoc cref="T:System.Object"/>
        </member>
        <member name="T:PlaywrightSharp.DeviceDescriptor">
            <summary>
            Device descriptor.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.DeviceDescriptor.Name">
            <summary>
            Device name.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.DeviceDescriptor.UserAgent">
            <summary>
            User Agent.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.DeviceDescriptor.Viewport">
            <summary>
            Viewport.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.DeviceDescriptor.HasTouch">
            <summary>
            Has touch.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.DeviceDescriptor.IsMobile">
            <summary>
            Is mobile.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.DeviceDescriptor.DeviceScaleFactor">
            <summary>
            Device scale factor.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.DeviceDescriptor.op_Implicit(PlaywrightSharp.DeviceDescriptor)~PlaywrightSharp.BrowserContextOptions">
            <summary>
            Converts the <see cref="T:PlaywrightSharp.DeviceDescriptor"/> to <see cref="T:PlaywrightSharp.BrowserContextOptions"/>.
            </summary>
            <param name="descriptor">Descriptor to convert.</param>
        </member>
        <member name="M:PlaywrightSharp.DeviceDescriptor.ToBrowserContextOptions">
            <summary>
            Converts the <see cref="T:PlaywrightSharp.BrowserContextOptions"/> to <see cref="T:PlaywrightSharp.BrowserContextOptions"/>.
            </summary>
            <returns>A <see cref="T:PlaywrightSharp.BrowserContextOptions"/> with the same information as the <see cref="T:PlaywrightSharp.DeviceDescriptor"/>.</returns>
        </member>
        <member name="T:PlaywrightSharp.DeviceDescriptorName">
            <summary>
            Device descriptor name.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.BlackberryPlayBook">
            <summary>
            Blackberry PlayBook.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.BlackberryPlayBookLandscape">
            <summary>
            Blackberry PlayBook landscape.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.BlackBerryZ30">
            <summary>
            BlackBerry Z30.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.BlackBerryZ30Landscape">
            <summary>
            BlackBerry Z30 landscape.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.GalaxyNote3">
            <summary>
            Galaxy Note 3.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.GalaxyNote3Landscape">
            <summary>
            Galaxy Note 3 landscape.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.GalaxyNoteII">
            <summary>
            Galaxy Note II.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.GalaxyNoteIILandscape">
            <summary>
            Galaxy Note II landscape.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.GalaxySIII">
            <summary>
            Galaxy S III.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.GalaxySIIILandscape">
            <summary>
            Galaxy S III landscape.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.GalaxyS5">
            <summary>
            Galaxy S5.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.GalaxyS5Landscape">
            <summary>
            Galaxy S5 landscape.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.IPad">
            <summary>
            iPad.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.IPadLandscape">
            <summary>
            iPad landscape.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.IPadMini">
            <summary>
            iPad Mini.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.IPadMiniLandscape">
            <summary>
            iPad Mini landscape.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.IPadPro">
            <summary>
            iPad Pro.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.IPadProLandscape">
            <summary>
            iPad Pro landscape.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.IPhone4">
            <summary>
            iPhone 4.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.IPhone4Landscape">
            <summary>
            iPhone 4 landscape.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.IPhone5">
            <summary>
            iPhone 5.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.IPhone5Landscape">
            <summary>
            iPhone 5 landscape.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.IPhone6">
            <summary>
            iPhone 6.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.IPhone6Landscape">
            <summary>
            iPhone 6 landscape.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.IPhone6Plus">
            <summary>
            iPhone 6 Plus.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.IPhone6PlusLandscape">
            <summary>
            iPhone 6 Plus landscape.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.IPhone7">
            <summary>
            iPhone 7.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.IPhone7Landscape">
            <summary>
            iPhone 7 landscape.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.IPhone7Plus">
            <summary>
            iPhone 7 Plus.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.IPhone7PlusLandscape">
            <summary>
            iPhone 7 Plus landscape.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.IPhone8">
            <summary>
            iPhone 8.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.IPhone8Landscape">
            <summary>
            iPhone 8 landscape.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.IPhone8Plus">
            <summary>
            iPhone 8 Plus.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.IPhone8PlusLandscape">
            <summary>
            iPhone 8 Plus landscape.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.IPhoneSE">
            <summary>
            iPhone SE.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.IPhoneSELandscape">
            <summary>
            iPhone SE landscape.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.IPhoneX">
            <summary>
            iPhone X.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.IPhoneXLandscape">
            <summary>
            iPhone X landscape.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.JioPhone2">
            <summary>
            JioPhone 2.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.JioPhone2Landscape">
            <summary>
            JioPhone 2 landscape.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.KindleFireHDX">
            <summary>
            Kindle Fire HDX.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.KindleFireHDXLandscape">
            <summary>
            Kindle Fire HDX landscape.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.LGOptimusL70">
            <summary>
            LG Optimus L70.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.LGOptimusL70Landscape">
            <summary>
            LG Optimus L70 landscape.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.MicrosoftLumia550">
            <summary>
            Microsoft Lumia 550.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.MicrosoftLumia950">
            <summary>
            Microsoft Lumia 950.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.MicrosoftLumia950Landscape">
            <summary>
            Microsoft Lumia 950 landscape.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.Nexus10">
            <summary>
            Nexus 10.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.Nexus10Landscape">
            <summary>
            Nexus 10 landscape.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.Nexus4">
            <summary>
            Nexus 4.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.Nexus4Landscape">
            <summary>
            Nexus 4 landscape.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.Nexus5">
            <summary>
            Nexus 5.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.Nexus5Landscape">
            <summary>
            Nexus 5 landscape.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.Nexus5X">
            <summary>
            Nexus 5X.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.Nexus5XLandscape">
            <summary>
            Nexus 5X landscape.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.Nexus6">
            <summary>
            Nexus 6.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.Nexus6Landscape">
            <summary>
            Nexus 6 landscape.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.Nexus6P">
            <summary>
            Nexus 6P.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.Nexus6PLandscape">
            <summary>
            Nexus 6P landscape.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.Nexus7">
            <summary>
            Nexus 7.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.Nexus7Landscape">
            <summary>
            Nexus 7 landscape.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.NokiaLumia520">
            <summary>
            Nokia Lumia 520.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.NokiaLumia520Landscape">
            <summary>
            Nokia Lumia 520 landscape.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.NokiaN9">
            <summary>
            Nokia N9.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.NokiaN9Landscape">
            <summary>
            Nokia N9 landscape.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.Pixel2">
            <summary>
            Pixel 2.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.Pixel2Landscape">
            <summary>
            Pixel 2 landscape.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.Pixel2XL">
            <summary>
            Pixel 2 XL.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DeviceDescriptorName.Pixel2XLLandscape">
            <summary>
            Pixel 2 XL landscape.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Dialog.Type">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Dialog.DefaultValue">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Dialog.Message">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Dialog.PlaywrightSharp#Transport#Channels#IChannelOwner#Channel">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Dialog.PlaywrightSharp#Transport#Channels#IChannelOwner{PlaywrightSharp#Dialog}#Channel">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Dialog.AcceptAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Dialog.DismissAsync">
            <inheritdoc/>
        </member>
        <member name="T:PlaywrightSharp.DialogEventArgs">
            <summary>
            <see cref="E:PlaywrightSharp.IPage.Dialog"/> arguments.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.DialogEventArgs.#ctor(PlaywrightSharp.IDialog)">
            <summary>
            Initializes a new instance of the <see cref="T:PlaywrightSharp.DialogEventArgs"/> class.
            </summary>
            <param name="dialog">Dialog.</param>
        </member>
        <member name="P:PlaywrightSharp.DialogEventArgs.Dialog">
            <summary>
            Dialog data.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.DialogType">
            <summary>
            Dialog type.
            </summary>
            <seealso cref="T:PlaywrightSharp.IDialog"/>
        </member>
        <member name="F:PlaywrightSharp.DialogType.Alert">
            <summary>
            Alert dialog.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DialogType.Prompt">
            <summary>
            Prompt dialog.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DialogType.Confirm">
            <summary>
            Confirm dialog.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DialogType.BeforeUnload">
            <summary>
            Before unload dialog.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Download">
            <summary>
            Download objects are dispatched by page via the <see cref="E:PlaywrightSharp.IPage.Download"/> event.
            All the downloaded files belonging to the browser context are deleted when the browser context is closed.All downloaded files are deleted when the browser closes.
            Download event is emitted once the download starts.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Download.Url">
            <summary>
            Returns downloaded url.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Download.SuggestedFilename">
            <summary>
            Returns suggested filename for this download.
            It is typically computed by the browser from the Content-Disposition response header or the download attribute. See the spec on whatwg.
            Different browsers can use different logic for computing it.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Download.PlaywrightSharp#Transport#Channels#IChannelOwner#Connection">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Download.PlaywrightSharp#Transport#Channels#IChannelOwner#Channel">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Download.PlaywrightSharp#Transport#Channels#IChannelOwner{PlaywrightSharp#Download}#Channel">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Download.GetPathAsync">
            <summary>
            Returns path to the downloaded file in case of successful download.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the download file path is resolved, yielding the path.</returns>
        </member>
        <member name="M:PlaywrightSharp.Download.GetFailureAsync">
            <summary>
            Returns download error if any.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when failure is resolved, yielding the faulire.</returns>
        </member>
        <member name="M:PlaywrightSharp.Download.DeleteAsync">
            <summary>
            Deletes the downloaded file.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the file is removed.</returns>
        </member>
        <member name="M:PlaywrightSharp.Download.SaveAsAsync(System.String)">
            <summary>
            Saves the download to a user-specified path.
            </summary>
            <param name="path">Path where the download should be saved.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the file is saved.</returns>
        </member>
        <member name="M:PlaywrightSharp.Download.CreateReadStreamAsync">
            <summary>
            Returns readable stream for current download or null if download failed.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the stream is created, yielding the stream.</returns>
        </member>
        <member name="T:PlaywrightSharp.DownloadEventArgs">
            <summary>
            See <see cref="E:PlaywrightSharp.IPage.Download"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.DownloadEventArgs.Download">
            <summary>
            Download info.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.DriverMessages">
            <summary>
            Messages coming from the Playwright Driver.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DriverMessages.BrowserClosedExceptionMessage">
            <summary>
            Message used when the browser gets closed.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.DriverMessages.BrowserOrContextClosedExceptionMessage">
            <summary>
            Message used when the browser or the context get closed.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.ElementHandle">
            <inheritdoc cref="T:PlaywrightSharp.IElementHandle" />
        </member>
        <member name="P:PlaywrightSharp.ElementHandle.PlaywrightSharp#Transport#Channels#IChannelOwner#Channel">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.ElementHandle.PlaywrightSharp#Transport#Channels#IChannelOwner{PlaywrightSharp#ElementHandle}#Channel">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.WaitForSelectorAsync(System.String,System.Nullable{PlaywrightSharp.WaitForState},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.WaitForElementStateAsync(PlaywrightSharp.ElementState,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.PressAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.TypeAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.ScreenshotAsync(System.String,System.Boolean,System.Nullable{PlaywrightSharp.ScreenshotFormat},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.FillAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.GetContentFrameAsync">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.HoverAsync(PlaywrightSharp.Input.Modifier[],System.Nullable{System.Drawing.Point},System.Nullable{System.Int32},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.ScrollIntoViewIfNeededAsync(System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.GetOwnerFrameAsync">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.GetBoundingBoxAsync">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.ClickAsync(System.Int32,PlaywrightSharp.Input.MouseButton,System.Int32,PlaywrightSharp.Input.Modifier[],System.Nullable{System.Drawing.Point},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.DblClickAsync(System.Int32,PlaywrightSharp.Input.MouseButton,PlaywrightSharp.Input.Modifier[],System.Nullable{System.Drawing.Point},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.SetInputFilesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.SetInputFilesAsync(System.String[],System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.SetInputFilesAsync(PlaywrightSharp.FilePayload,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.SetInputFilesAsync(PlaywrightSharp.FilePayload[],System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.QuerySelectorAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.QuerySelectorAllAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.EvalOnSelectorAsync``1(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.EvalOnSelectorAsync(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.EvalOnSelectorAsync(System.String,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.EvalOnSelectorAsync``1(System.String,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.EvalOnSelectorAllAsync``1(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.EvalOnSelectorAllAsync(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.EvalOnSelectorAllAsync(System.String,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.EvalOnSelectorAllAsync``1(System.String,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.FocusAsync">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.DispatchEventAsync(System.String,System.Object,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.GetAttributeAsync(System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.GetInnerHtmlAsync(System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.GetInnerTextAsync(System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.GetTextContentAsync(System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.SelectTextAsync(System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.SelectOptionAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.SelectOptionAsync(System.String[],System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.SelectOptionAsync(PlaywrightSharp.IElementHandle,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.SelectOptionAsync(PlaywrightSharp.IElementHandle[],System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.SelectOptionAsync(PlaywrightSharp.SelectOption,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.SelectOptionAsync(PlaywrightSharp.SelectOption[],System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.SelectOptionAsync(System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.SelectOptionAsync(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.SelectOptionAsync(PlaywrightSharp.SelectOption[])">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.SelectOptionAsync(PlaywrightSharp.IElementHandle[])">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.CheckAsync(System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.UncheckAsync(System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.TapAsync(System.Nullable{System.Drawing.Point},PlaywrightSharp.Input.Modifier[],System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.IsCheckedAsync">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.IsDisabledAsync">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.IsEditableAsync">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.IsEnabledAsync">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.IsHiddenAsync">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.ElementHandle.IsVisibleAsync">
            <inheritdoc />
        </member>
        <member name="T:PlaywrightSharp.ElementState">
            <summary>
            See <see cref="M:PlaywrightSharp.IElementHandle.WaitForElementStateAsync(PlaywrightSharp.ElementState,System.Nullable{System.Int32})"/>.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ElementState.Visible">
            <summary>
            Element visible.
            </summary>
            <remarks>
            Element is considered visible when it has non-empty bounding box and does not have visibility:hidden computed style.
            Note that elements of zero size or with display:none are not considered visible.
            </remarks>
        </member>
        <member name="F:PlaywrightSharp.ElementState.Hidden">
            <summary>
            Not <see cref="F:PlaywrightSharp.ElementState.Visible"/> or not attached.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ElementState.Stable">
            <summary>
            <see cref="F:PlaywrightSharp.ElementState.Visible"/> and Stable.
            </summary>
            <remarks>
            Element is considered stable when it has maintained the same bounding box for at least two consecutive animation frames.
            </remarks>
        </member>
        <member name="F:PlaywrightSharp.ElementState.Enabled">
            <summary>
            Element enabled.
            </summary>
            <remarks>
            Element is considered enabled when it is not a button, select or input with a disabled property set.
            </remarks>
        </member>
        <member name="F:PlaywrightSharp.ElementState.Disabled">
            <summary>
            Element not <see cref="F:PlaywrightSharp.ElementState.Enabled"/>.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ElementState.Editable">
            <summary>
            Wait until the element is editable.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.EnvironmentVariables">
            <summary>
            Environment variables used by the Playwright.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.EnvironmentVariables.DriverPathEnvironmentVariable">
            <summary>
            Optional drivers path.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.EnvironmentVariables.BrowsersPathEnvironmentVariable">
            <summary>
            Environment variable use to set the browsers path.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.FileChooserEventArgs">
            <summary>
            see <see cref="E:PlaywrightSharp.IPage.FileChooser"/> arguments.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.FileChooserEventArgs.#ctor(PlaywrightSharp.IPage,PlaywrightSharp.IElementHandle,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PlaywrightSharp.FileChooserEventArgs"/> class.
            </summary>
            <param name="page">The page this file chooser belongs to.</param>
            <param name="element">The input element.</param>
            <param name="multiple">The multiple option.</param>
        </member>
        <member name="P:PlaywrightSharp.FileChooserEventArgs.Page">
            <summary>
            The page this file chooser belongs to.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.FileChooserEventArgs.Element">
            <summary>
            Handle to the input element that was clicked.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.FileChooserEventArgs.IsMultiple">
            <summary>
            Whether file chooser allow for multiple file selection.
            </summary>
            <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#attr-multiple"/>
        </member>
        <member name="M:PlaywrightSharp.FileChooserEventArgs.SetFilesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Sets the value of the file input to these file paths or files. If some of the  <paramref name="file"/> are relative paths, then they are resolved relative to the <see cref="M:System.IO.Directory.GetCurrentDirectory"/>.
            </summary>
            <param name="file">The file path.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the files are successfully set.</returns>
        </member>
        <member name="M:PlaywrightSharp.FileChooserEventArgs.SetFilesAsync(System.String[],System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Sets the value of the file input to these file paths or files. If some of the  <paramref name="files"/> are relative paths, then they are resolved relative to the <see cref="M:System.IO.Directory.GetCurrentDirectory"/>.
            </summary>
            <param name="files">File paths.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the files are successfully set.</returns>
        </member>
        <member name="M:PlaywrightSharp.FileChooserEventArgs.SetFilesAsync(PlaywrightSharp.FilePayload,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Sets the value of the file input to these file paths or files. If some of the  <paramref name="file"/> are relative paths, then they are resolved relative to the <see cref="M:System.IO.Directory.GetCurrentDirectory"/>.
            </summary>
            <param name="file">The file payload.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the files are successfully set.</returns>
        </member>
        <member name="M:PlaywrightSharp.FileChooserEventArgs.SetFilesAsync(PlaywrightSharp.FilePayload[],System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Sets the value of the file input to these file paths or files. If some of the  <paramref name="files"/> are relative paths, then they are resolved relative to the <see cref="M:System.IO.Directory.GetCurrentDirectory"/>.
            </summary>
            <param name="files">File payloads.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the files are successfully set.</returns>
        </member>
        <member name="T:PlaywrightSharp.FilePayload">
            <summary>
            Payload for <see cref="M:PlaywrightSharp.IElementHandle.SetInputFilesAsync(PlaywrightSharp.FilePayload,System.Nullable{System.Int32},System.Nullable{System.Boolean})"/>, <see cref="M:PlaywrightSharp.IPage.SetInputFilesAsync(System.String,PlaywrightSharp.FilePayload,System.Nullable{System.Int32},System.Nullable{System.Boolean})"/> and <see cref="M:PlaywrightSharp.IFrame.SetInputFilesAsync(System.String,PlaywrightSharp.FilePayload,System.Nullable{System.Int32},System.Nullable{System.Boolean})"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.FilePayload.Name">
            <summary>
            File name.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.FilePayload.MimeType">
            <summary>
            Mime type.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.FilePayload.Buffer">
            <summary>
            File content as a base64 string.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Frame">
            <inheritdoc cref="T:PlaywrightSharp.IFrame" />
        </member>
        <member name="E:PlaywrightSharp.Frame.Navigated">
            <summary>
            Raised when a navigation is received.
            </summary>
        </member>
        <member name="E:PlaywrightSharp.Frame.LoadState">
            <summary>
            Raised when a new LoadState was added.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Frame.PlaywrightSharp#Transport#Channels#IChannelOwner#Channel">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Frame.PlaywrightSharp#Transport#Channels#IChannelOwner{PlaywrightSharp#Frame}#Channel">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Frame.ChildFrames">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Frame.Name">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Frame.Url">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Frame.PlaywrightSharp#IFrame#ParentFrame">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Frame.ParentFrame">
            <inheritdoc cref="P:PlaywrightSharp.IFrame.ParentFrame" />
        </member>
        <member name="P:PlaywrightSharp.Frame.Page">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Frame.IsDetached">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.GetFrameElementAsync">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.GetTitleAsync">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.GoToAsync(System.String,System.Nullable{PlaywrightSharp.LifecycleEvent},System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.SetContentAsync(System.String,System.Nullable{PlaywrightSharp.LifecycleEvent},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.GetContentAsync">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.AddScriptTagAsync(System.String,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.EvaluateAsync``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.EvaluateAsync``1(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.EvaluateAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.EvaluateAsync(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.EvaluateHandleAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.EvaluateHandleAsync(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.FillAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.WaitForTimeoutAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.WaitForSelectorAsync(System.String,System.Nullable{PlaywrightSharp.WaitForState},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.WaitForFunctionAsync(System.String,System.Object,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.WaitForFunctionAsync(System.String,System.Object,PlaywrightSharp.Polling,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.WaitForFunctionAsync(System.String,System.Object,System.Int32,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.WaitForFunctionAsync(System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.WaitForFunctionAsync(System.String,PlaywrightSharp.Polling,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.WaitForFunctionAsync(System.String,System.Int32,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.QuerySelectorAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.QuerySelectorAllAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.EvalOnSelectorAllAsync(System.String,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.EvalOnSelectorAllAsync``1(System.String,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.EvalOnSelectorAllAsync(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.EvalOnSelectorAllAsync``1(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.ClickAsync(System.String,System.Int32,PlaywrightSharp.Input.MouseButton,System.Int32,PlaywrightSharp.Input.Modifier[],System.Nullable{System.Drawing.Point},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.CheckAsync(System.String,System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.UncheckAsync(System.String,System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.DblClickAsync(System.String,System.Int32,PlaywrightSharp.Input.MouseButton,PlaywrightSharp.Input.Modifier[],System.Nullable{System.Drawing.Point},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.EvalOnSelectorAsync(System.String,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.EvalOnSelectorAsync``1(System.String,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.EvalOnSelectorAsync(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.EvalOnSelectorAsync``1(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.WaitForNavigationAsync(System.Nullable{PlaywrightSharp.LifecycleEvent},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.WaitForNavigationAsync(System.String,System.Nullable{PlaywrightSharp.LifecycleEvent},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.WaitForNavigationAsync(System.Text.RegularExpressions.Regex,System.Nullable{PlaywrightSharp.LifecycleEvent},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.WaitForNavigationAsync(System.Func{System.String,System.Boolean},System.Nullable{PlaywrightSharp.LifecycleEvent},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.FocusAsync(System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.SetInputFilesAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.SetInputFilesAsync(System.String,System.String[],System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.SetInputFilesAsync(System.String,PlaywrightSharp.FilePayload,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.SetInputFilesAsync(System.String,PlaywrightSharp.FilePayload[],System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.HoverAsync(System.String,System.Nullable{System.Drawing.Point},PlaywrightSharp.Input.Modifier[],System.Boolean,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.TypeAsync(System.String,System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.AddStyleTagAsync(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.PressAsync(System.String,System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.SelectOptionAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.SelectOptionAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.SelectOptionAsync(System.String,PlaywrightSharp.SelectOption,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.SelectOptionAsync(System.String,PlaywrightSharp.IElementHandle,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.SelectOptionAsync(System.String,System.String[],System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.SelectOptionAsync(System.String,PlaywrightSharp.SelectOption[],System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.SelectOptionAsync(System.String,PlaywrightSharp.IElementHandle[],System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.SelectOptionAsync(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.SelectOptionAsync(System.String,PlaywrightSharp.SelectOption[])">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.SelectOptionAsync(System.String,PlaywrightSharp.IElementHandle[])">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.WaitForLoadStateAsync(PlaywrightSharp.LifecycleEvent,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.DispatchEventAsync(System.String,System.String,System.Object,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.GetAttributeAsync(System.String,System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.GetInnerHtmlAsync(System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.GetInnerTextAsync(System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.GetTextContentAsync(System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.TapAsync(System.String,PlaywrightSharp.Input.Modifier[],System.Nullable{System.Drawing.Point},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.IsCheckedAsync(System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.IsDisabledAsync(System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.IsEditableAsync(System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.IsEnabledAsync(System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.IsHiddenAsync(System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Frame.IsVisibleAsync(System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="T:PlaywrightSharp.FrameEventArgs">
            <summary>
            <see cref="E:PlaywrightSharp.IPage.FrameAttached"/>, <see cref="E:PlaywrightSharp.IPage.FrameDetached"/> and <see cref="E:PlaywrightSharp.IPage.FrameNavigated"/> arguments.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.FrameEventArgs.#ctor(PlaywrightSharp.IFrame)">
            <summary>
            Initializes a new instance of the <see cref="T:PlaywrightSharp.FrameEventArgs"/> class.
            </summary>
            <param name="frame">Frame.</param>
        </member>
        <member name="P:PlaywrightSharp.FrameEventArgs.Frame">
            <summary>
            Gets or sets the frame.
            </summary>
            <value>The frame.</value>
        </member>
        <member name="T:PlaywrightSharp.FrameNavigatedEventArgs">
            <summary>
            See <see cref="E:PlaywrightSharp.Frame.Navigated"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.FrameNavigatedEventArgs.Name">
            <summary>
            Frame name.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.FrameNavigatedEventArgs.Url">
            <summary>
            Frame URL.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.FrameNavigatedEventArgs.Error">
            <summary>
            Navigation Error.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Geolocation">
            <summary>
            Geolocation option.
            </summary>
            <seealso cref="M:PlaywrightSharp.IBrowserContext.SetGeolocationAsync(PlaywrightSharp.Geolocation)"/>
        </member>
        <member name="P:PlaywrightSharp.Geolocation.Latitude">
            <summary>
            Latitude between -90 and 90.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Geolocation.Longitude">
            <summary>
            Longitude between -180 and 180.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Geolocation.Accuracy">
            <summary>
            Optional non-negative accuracy value.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.Geolocation.Equals(PlaywrightSharp.Geolocation)">
            <inheritdoc cref="T:System.IEquatable`1"/>
        </member>
        <member name="M:PlaywrightSharp.Geolocation.Equals(System.Object)">
            <inheritdoc cref="T:System.IEquatable`1"/>
        </member>
        <member name="M:PlaywrightSharp.Geolocation.GetHashCode">
            <inheritdoc cref="T:System.IEquatable`1"/>
        </member>
        <member name="M:PlaywrightSharp.Geolocation.Clone">
            <summary>
            Clones the <see cref="T:PlaywrightSharp.Geolocation"/>.
            </summary>
            <returns>A copy of the current <see cref="T:PlaywrightSharp.Geolocation"/>.</returns>
        </member>
        <member name="T:PlaywrightSharp.Har.HarBrowser">
            <summary>
            HAR browser model.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarBrowser.Name">
            <summary>
            Browser name.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarBrowser.Version">
            <summary>
            Browser version.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Har.HarCache">
            <summary>
            HAR Cache.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarCache.BeforeRequest">
            <summary>
            After request state.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarCache.AfterRequest">
            <summary>
            After request state.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Har.HarCacheState">
            <summary>
            HAR Cache state.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarCacheState.Expires">
            <summary>
            Expiration date.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarCacheState.LastAccess">
            <summary>
            Last access date.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarCacheState.ETag">
            <summary>
            eTag.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarCacheState.HitCount">
            <summary>
            Hit count.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Har.HarContent">
            <summary>
            HAR Content.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarContent.Encoding">
            <summary>
            Encoding.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarContent.MimeType">
            <summary>
            Mime Type.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarContent.Text">
            <summary>
            Text.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarContent.Size">
            <summary>
            Size.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarContent.Compression">
            <summary>
            Compression.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Har.HarCookie">
            <summary>
            Cookie model.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarCookie.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarCookie.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarCookie.Domain">
            <summary>
            Domain.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarCookie.Url">
            <summary>
            Url.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarCookie.Path">
            <summary>
            Path.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarCookie.Expires">
            <summary>
            Expire date.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarCookie.HttpOnly">
            <summary>
            Is HTTP only.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarCookie.Secure">
            <summary>
            Is secure.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarCookie.SameSite">
            <summary>
            SameSite.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Har.HarCreator">
            <summary>
            HAR creator model.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarCreator.Name">
            <summary>
            Creator name.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarCreator.Version">
            <summary>
            Creator version.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Har.HarEntry">
            <summary>
            HAR entry.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarEntry.Pageref">
            <summary>
            Referenced page.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarEntry.Request">
            <summary>
            Request.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarEntry.Response">
            <summary>
            Response.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarEntry.Cache">
            <summary>
            Cache.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarEntry.Timings">
            <summary>
            Entry Timings.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarEntry.StartedDateTime">
            <summary>
            Started date.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarEntry.Time">
            <summary>
            Time.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarEntry.ServerIPAddress">
            <summary>
            Server IP address.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarEntry.Connection">
            <summary>
            Connection.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Har.HarEntryRequest">
            <summary>
            HAR entry HTTP request.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarEntryRequest.Url">
            <summary>
            URL.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarEntryRequest.Method">
            <summary>
            HTTP Method.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarEntryRequest.HttpVersion">
            <summary>
            HTTP Version.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarEntryRequest.HeadersSize">
            <summary>
            Headers Size.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarEntryRequest.BodySize">
            <summary>
            Body Size.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarEntryRequest.Headers">
            <summary>
            HTTP Headers.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarEntryRequest.QueryString">
            <summary>
            QueryString values.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarEntryRequest.PostData">
            <summary>
            POST Data.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarEntryRequest.Cookies">
            <summary>
            Cookies.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Har.HarEntryResponse">
            <summary>
            HAR entry HTTP response.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarEntryResponse.HttpVersion">
            <summary>
            HTTP Version.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarEntryResponse.Headers">
            <summary>
            HTTP Headers.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarEntryResponse.Status">
            <summary>
            HTTP Status Code.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarEntryResponse.StatusText">
            <summary>
            HTTP Status Text.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarEntryResponse.RedirectURL">
            <summary>
            Redirect URL.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarEntryResponse.Cookies">
            <summary>
            Cookies.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarEntryResponse.Content">
            <summary>
            Content.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarEntryResponse.HeadersSize">
            <summary>
            Headers Size.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarEntryResponse.BodySize">
            <summary>
            Body Size.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Har.HarEntryTimings">
            <summary>
            HAR Entry timings.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarEntryTimings.Blocked">
            <summary>
            Blocked.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarEntryTimings.Dns">
            <summary>
            Dns time.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarEntryTimings.Connect">
            <summary>
            Connect time.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarEntryTimings.Ssl">
            <summary>
            Ssl time.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarEntryTimings.Send">
            <summary>
            Send time.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarEntryTimings.Wait">
            <summary>
            Wait time.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarEntryTimings.Receive">
            <summary>
            Receive time.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Har.HarLog">
            <summary>
            HAR Log.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarLog.Version">
            <summary>
            Version.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarLog.Creator">
            <summary>
            Creator.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarLog.Browser">
            <summary>
            Browser.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarLog.Pages">
            <summary>
            Page list.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarLog.Entries">
            <summary>
            Entries.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Har.HarPage">
            <summary>
            HAR Page.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarPage.Id">
            <summary>
            Page Id.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarPage.Title">
            <summary>
            Page title.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarPage.StartedDateTime">
            <summary>
            Started date.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarPage.PageTimings">
            <summary>
            Timings info.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Har.HarPageTimings">
            <summary>
            Page timings.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarPageTimings.OnContentLoad">
            <summary>
            On content load enlapsed time.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarPageTimings.OnLoad">
            <summary>
            On load enlapsed time.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Har.HarPostData">
            <summary>
            HAR POST Data.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarPostData.MimeType">
            <summary>
            Mime Type.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarPostData.Text">
            <summary>
            Text.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarPostData.Params">
            <summary>
            Post Params.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Har.HarPostDataParam">
            <summary>
            POST data param.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarPostDataParam.Name">
            <summary>
            Param Name.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarPostDataParam.Value">
            <summary>
            Param value.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarPostDataParam.FileName">
            <summary>
            Filename.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarPostDataParam.ContentType">
            <summary>
            Content type.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Har.HarResult">
            <summary>
            Resulting model of the file generated using <see cref="P:PlaywrightSharp.BrowserContextOptions.RecordHar"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Har.HarResult.Log">
            <summary>
            Log.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Helpers.DoubleExtensions">
            <summary>
            Extensions for <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.Helpers.DoubleExtensions.IsNegativeZero(System.Double)">
            <summary>
            Checks if the double is a negative zero.
            </summary>
            <param name="d">Number to check.</param>
            <returns>Whether the number is negative zero or not.</returns>
        </member>
        <member name="T:PlaywrightSharp.Helpers.FlexibleStringEnumConverter`1">
            <summary>
            It converts a string to an enum, using a default value as a fallback.
            </summary>
            <typeparam name="T">Type to convert to.</typeparam>
        </member>
        <member name="M:PlaywrightSharp.Helpers.FlexibleStringEnumConverter`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:PlaywrightSharp.Helpers.FlexibleStringEnumConverter`1"/> class.
            </summary>
            <param name="defaultValue">Default value.</param>
        </member>
        <member name="M:PlaywrightSharp.Helpers.FlexibleStringEnumConverter`1.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Helpers.FlexibleStringEnumConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Helpers.FlexibleStringEnumConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:PlaywrightSharp.Helpers.JsonExtensions">
            <summary>
            JSON extensions.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Helpers.JsonExtensions.DefaultJsonSerializerOptions">
            <summary>
            Base serialization options used by PlaywrightSharp.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.Helpers.JsonExtensions.ToObject``1(System.Text.Json.JsonElement,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Convert a <see cref="T:System.Text.Json.JsonElement"/> to an object.
            </summary>
            <typeparam name="T">Type to convert the <see cref="T:System.Text.Json.JsonElement"/> to.</typeparam>
            <param name="element">Element to convert.</param>
            <param name="options">Serialization options.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:PlaywrightSharp.Helpers.JsonExtensions.ToObject(System.Text.Json.JsonElement,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Convert a <see cref="T:System.Text.Json.JsonElement"/> to an object.
            </summary>
            <param name="element">Element to convert.</param>
            <param name="type">Type to convert the <see cref="T:System.Text.Json.JsonElement"/> to.</param>
            <param name="options">Serialization options.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:PlaywrightSharp.Helpers.JsonExtensions.ToJson``1(``0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Serialize an object.
            </summary>
            <typeparam name="T">Object type.</typeparam>
            <param name="value">Object to serialize.</param>
            <param name="options">Serialization options.</param>
            <returns>Serialized object.</returns>
        </member>
        <member name="M:PlaywrightSharp.Helpers.JsonExtensions.ToObject``1(System.Text.Json.JsonDocument,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Convert a <see cref="T:System.Text.Json.JsonDocument"/> to an object.
            </summary>
            <typeparam name="T">Type to convert the <see cref="T:System.Text.Json.JsonElement"/> to.</typeparam>
            <param name="document">Document to convert.</param>
            <param name="options">Serialization options.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="T:PlaywrightSharp.Helpers.StringExtensions">
            <summary>
            String extensions.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.Helpers.StringExtensions.Quote(System.String)">
            <summary>
            Quotes the specified <see cref="T:System.String"/>.
            </summary>
            <param name="value">The string to quote.</param>
            <returns>A quoted string.</returns>
        </member>
        <member name="M:PlaywrightSharp.Helpers.StringExtensions.UnQuote(System.String)">
            <summary>
            Unquote the specified <see cref="T:System.String"/>.
            </summary>
            <param name="value">The string to unquote.</param>
            <returns>An unquoted string.</returns>
        </member>
        <member name="M:PlaywrightSharp.Helpers.StringExtensions.ParseQueryString(System.String)">
            <summary>
            Parse the query string.
            </summary>
            <param name="query">Query string.</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> containing the parsed QueryString.</returns>
        </member>
        <member name="M:PlaywrightSharp.Helpers.StringExtensions.IsJavascriptFunction(System.String,System.Boolean,System.Boolean)">
            <summary>
            Determine if the script is a javascript function and not an expression.
            </summary>
            <param name="script">Script to evaluate.</param>
            <param name="retry">Whether it should retry by wrapping the code in parenthesis.</param>
            <param name="checkExpression">Checks whether the function could be a function expression.</param>
            <returns>Whether the script is a function or not.</returns>
        </member>
        <member name="M:PlaywrightSharp.Helpers.StringExtensions.GlobToRegex(System.String)">
            <summary>
            Converts an url glob expression to a regex.
            </summary>
            <param name="glob">Input url.</param>
            <returns>A Regex with the glob expression.</returns>
        </member>
        <member name="M:PlaywrightSharp.Helpers.StringExtensions.AsBinary(System.String)">
            <summary>
            Converts a string to a byte array. It's a shortcut for Convert.FromBase64String.
            </summary>
            <param name="value">Value to parse.</param>
            <returns>Value as an array of bytes.</returns>
        </member>
        <member name="T:PlaywrightSharp.Helpers.TaskHelper">
            <summary>
            Task helper.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.Helpers.TaskHelper.WithTimeout(System.Threading.Tasks.Task,System.Int32,System.Func{System.TimeSpan,System.Exception},System.Threading.CancellationToken)">
            <summary>
            Cancels the <paramref name="task"/> after <paramref name="milliseconds"/> milliseconds.
            </summary>
            <returns>The task result.</returns>
            <param name="task">Task to wait for.</param>
            <param name="milliseconds">Milliseconds timeout.</param>
            <param name="exceptionFactory">Optional timeout exception factory.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:PlaywrightSharp.Helpers.TaskHelper.WithTimeout(System.Threading.Tasks.Task,System.TimeSpan,System.Func{System.TimeSpan,System.Exception},System.Threading.CancellationToken)">
            <summary>
            Cancels the <paramref name="task"/> after a given <paramref name="timeout"/> period.
            </summary>
            <returns>The task result.</returns>
            <param name="task">Task to wait for.</param>
            <param name="timeout">The timeout period.</param>
            <param name="exceptionFactory">Optional timeout exception factory.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:PlaywrightSharp.Helpers.TaskHelper.WithTimeout(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Cancels the <paramref name="task"/> after <paramref name="timeout"/> milliseconds.
            </summary>
            <returns>The task result.</returns>
            <param name="task">Task to wait for.</param>
            <param name="timeoutAction">Action to be executed on Timeout.</param>
            <param name="timeout">Milliseconds timeout.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:PlaywrightSharp.Helpers.TaskHelper.WithTimeout(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Cancels the <paramref name="task"/> after a given <paramref name="timeout"/> period.
            </summary>
            <returns>The task result.</returns>
            <param name="task">Task to wait for.</param>
            <param name="timeoutAction">Action to be executed on Timeout.</param>
            <param name="timeout">The timeout period.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:PlaywrightSharp.Helpers.TaskHelper.WithTimeout``1(System.Threading.Tasks.Task{``0},System.Action,System.Int32)">
            <summary>
            Cancels the <paramref name="task"/> after <paramref name="timeout"/> milliseconds.
            </summary>
            <returns>The task result.</returns>
            <param name="task">Task to wait for.</param>
            <param name="timeoutAction">Action to be executed on Timeout.</param>
            <param name="timeout">Milliseconds timeout.</param>
            <typeparam name="T">Return type.</typeparam>
        </member>
        <member name="M:PlaywrightSharp.Helpers.TaskHelper.WithTimeout``1(System.Threading.Tasks.Task{``0},System.Action,System.TimeSpan)">
            <summary>
            Cancels the <paramref name="task"/> after a given <paramref name="timeout"/> period.
            </summary>
            <returns>The task result.</returns>
            <param name="task">Task to wait for.</param>
            <param name="timeoutAction">Action to be executed on Timeout.</param>
            <param name="timeout">The timeout period.</param>
            <typeparam name="T">Return type.</typeparam>
        </member>
        <member name="M:PlaywrightSharp.Helpers.TaskHelper.WithTimeout``1(System.Threading.Tasks.Task{``0},System.Int32,System.Func{System.TimeSpan,System.Exception})">
            <summary>
            Cancels the <paramref name="task"/> after <paramref name="milliseconds"/> milliseconds.
            </summary>
            <returns>The task result.</returns>
            <param name="task">Task to wait for.</param>
            <param name="milliseconds">Milliseconds timeout.</param>
            <param name="exceptionFactory">Optional timeout exception factory.</param>
            <typeparam name="T">Task return type.</typeparam>
        </member>
        <member name="M:PlaywrightSharp.Helpers.TaskHelper.WithTimeout``1(System.Threading.Tasks.Task{``0},System.TimeSpan,System.Func{System.TimeSpan,System.Exception})">
            <summary>
            Cancels the <paramref name="task"/> after a given <paramref name="timeout"/> period.
            </summary>
            <returns>The task result.</returns>
            <param name="task">Task to wait for.</param>
            <param name="timeout">The timeout period.</param>
            <param name="exceptionFactory">Optional timeout exception factory.</param>
            <typeparam name="T">Task return type.</typeparam>
        </member>
        <member name="T:PlaywrightSharp.IAccessibility">
            <summary>
            The Accessibility class provides methods for inspecting Chromium's accessibility tree.
            The accessibility tree is used by assistive technology such as screen readers or switches.
            <para/>
            Accessibility is a very platform-specific thing. On different platforms, there are different screen readers that might have wildly different output.
            Blink - Chrome's rendering engine - has a concept of "accessibility tree", which is than translated into different platform-specific APIs.
            Accessibility namespace gives users access to the Blink Accessibility Tree.
            Most of the accessibility tree gets filtered out when converting from Blink AX Tree to Platform-specific AX-Tree or by assistive technologies themselves.
            By default, PlaywrightSharp tries to approximate this filtering, exposing only the "interesting" nodes of the tree.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.IAccessibility.SnapshotAsync(System.Boolean,PlaywrightSharp.IElementHandle)">
            <summary>
            Snapshots the async.
            </summary>
            <param name="interestingOnly">Prune uninteresting nodes from the tree. Defaults to true.</param>
            <param name="root">The root DOM element for the snapshot. Defaults to the whole page.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the snapshot is completed, yielding the serialized result.</returns>
        </member>
        <member name="T:PlaywrightSharp.IBrowser">
            <summary>
            A Browser is created when Playwright connects to a browser instance.
            </summary>
        </member>
        <member name="E:PlaywrightSharp.IBrowser.Disconnected">
            <summary>
            Raised when the <see cref="T:PlaywrightSharp.IBrowser"/> gets disconnected from the browser instance.
            This might happen because one of the following:
            - Browser is closed or crashed
            - <see cref="M:PlaywrightSharp.IBrowser.CloseAsync"/> method was called
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IBrowser.Version">
            <summary>
            Returns the browser version.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IBrowser.IsConnected">
            <summary>
            Indicates that the browser is connected.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IBrowser.Contexts">
            <summary>
            Returns an array of all open browser contexts. In a newly created browser, this will return zero browser contexts.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.IBrowser.CloseAsync">
            <summary>
            Closes browser and all of its pages (if any were opened).
            The Browser object itself is considered to be disposed and cannot be used anymore.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the browser is closed.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowser.NewContextAsync(PlaywrightSharp.ViewportSize,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,PlaywrightSharp.Geolocation,PlaywrightSharp.ContextPermission[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Decimal},PlaywrightSharp.Credentials,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{PlaywrightSharp.ColorScheme},System.String,System.Collections.Generic.Dictionary{System.String,System.String},PlaywrightSharp.RecordHarOptions,PlaywrightSharp.RecordVideoOptions,PlaywrightSharp.ProxySettings,System.String,PlaywrightSharp.StorageState)">
            <summary>
            Creates a new browser context. It won't share cookies/cache with other browser contexts.
            </summary>
            <param name="viewport">Sets a consistent viewport for each page. Defaults to an 800x600 viewport. null disables the default viewport.</param>
            <param name="userAgent">Specific user agent to use in this context.</param>
            <param name="bypassCSP">Toggles bypassing page's Content-Security-Policy.</param>
            <param name="javaScriptEnabled">Whether or not to enable or disable JavaScript in the context. Defaults to true.</param>
            <param name="timezoneId">Changes the timezone of the context. See <see href="https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1">ICU’s metaZones.txt</see> for a list of supported timezone IDs.</param>
            <param name="geolocation">Changes the Geolocation of the context.</param>
            <param name="permissions">A <see cref="T:System.Collections.Generic.Dictionary`2"/> from origin keys to permissions values. See <see cref="M:PlaywrightSharp.IBrowserContext.GrantPermissionsAsync(PlaywrightSharp.ContextPermission[],System.String)"/> for more details.</param>
            <param name="isMobile">Gets or sets whether the meta viewport tag is taken into account.</param>
            <param name="offline">Whether to emulate network being offline. Defaults to `false`.</param>
            <param name="deviceScaleFactor">Gets or sets the device scale factor.</param>
            <param name="httpCredentials">Credentials for HTTP authentication.</param>
            <param name="hasTouch">Specifies if viewport supports touch events. Defaults to false.</param>
            <param name="acceptDownloads">Whether to automatically download all the attachments. Defaults to false where all the downloads are canceled.</param>
            <param name="ignoreHTTPSErrors"> Whether to ignore HTTPS errors during navigation. Defaults to false.</param>
            <param name="colorScheme">Emulates 'prefers-colors-scheme' media feature.</param>
            <param name="locale">Specify user locale, for example en-GB, de-DE, etc. Locale will affect navigator.language value, Accept-Language request header value as well as number and date formatting rules.</param>
            <param name="extraHTTPHeaders">An object containing additional HTTP headers to be sent with every request.</param>
            <param name="recordHar">Enables HAR recording for all pages into recordHar.path file. If not specified, the HAR is not recorded.
            Make sure to await <see cref="M:PlaywrightSharp.IPage.CloseAsync(System.Boolean)"/> for the HAR to be saved.
            You can use <see cref="T:PlaywrightSharp.Har.HarResult"/> to deserialize the generated JSON file.</param>
            <param name="recordVideo">Enables video recording for all pages into recordVideo.dir directory. If not specified videos are not recorded.
            Make sure to await <seealso cref="M:PlaywrightSharp.BrowserContext.CloseAsync"/> for videos to be saved.</param>
            <param name="proxy">Network proxy settings to use with this context. Note that browser needs to be launched with the global proxy for this option to work. If all contexts override the proxy, global proxy will be never used and can be any string.</param>
            <param name="storageStatePath">Path to the file with saved storage.</param>
            <param name="storageState">Populates context with given storage state. This method can be used to initialize context with logged-in information obtained via <see cref="M:PlaywrightSharp.IBrowserContext.GetStorageStateAsync(System.String)"/>.</param>
            <example>.
            <code>
            <![CDATA[
            // Create a new incognito browser context.
            const context = await browser.NewContextAsync();
            // Create a new page in a pristine context.
            const page = await context.NewPageAsync("https://example.com");
            ]]>
            </code>
            </example>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that completes when a new <see cref="T:PlaywrightSharp.IBrowserContext"/> is created.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowser.NewContextAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,PlaywrightSharp.Geolocation,PlaywrightSharp.ContextPermission[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Decimal},PlaywrightSharp.Credentials,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{PlaywrightSharp.ColorScheme},System.String,System.Collections.Generic.Dictionary{System.String,System.String},PlaywrightSharp.RecordHarOptions,PlaywrightSharp.RecordVideoOptions,PlaywrightSharp.ProxySettings,System.String,PlaywrightSharp.StorageState)">
            <summary>
            Creates a new browser context. It won't share cookies/cache with other browser contexts.
            </summary>
            <param name="userAgent">Specific user agent to use in this context.</param>
            <param name="bypassCSP">Toggles bypassing page's Content-Security-Policy.</param>
            <param name="javaScriptEnabled">Whether or not to enable or disable JavaScript in the context. Defaults to true.</param>
            <param name="timezoneId">Changes the timezone of the context. See <see href="https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1">ICU’s metaZones.txt</see> for a list of supported timezone IDs.</param>
            <param name="geolocation">Changes the Geolocation of the context.</param>
            <param name="permissions">A <see cref="T:System.Collections.Generic.Dictionary`2"/> from origin keys to permissions values. See <see cref="M:PlaywrightSharp.IBrowserContext.GrantPermissionsAsync(PlaywrightSharp.ContextPermission[],System.String)"/> for more details.</param>
            <param name="isMobile">Gets or sets whether the meta viewport tag is taken into account.</param>
            <param name="offline">Whether to emulate network being offline. Defaults to `false`.</param>
            <param name="deviceScaleFactor">Gets or sets the device scale factor.</param>
            <param name="httpCredentials">Credentials for HTTP authentication.</param>
            <param name="hasTouch">Specifies if viewport supports touch events. Defaults to false.</param>
            <param name="acceptDownloads">Whether to automatically download all the attachments. Defaults to false where all the downloads are canceled.</param>
            <param name="ignoreHTTPSErrors"> Whether to ignore HTTPS errors during navigation. Defaults to false.</param>
            <param name="colorScheme">Emulates 'prefers-colors-scheme' media feature.</param>
            <param name="locale">Specify user locale, for example en-GB, de-DE, etc. Locale will affect navigator.language value, Accept-Language request header value as well as number and date formatting rules.</param>
            <param name="extraHTTPHeaders">An object containing additional HTTP headers to be sent with every request.</param>
            <param name="recordHar">Enables HAR recording for all pages into recordHar.path file. If not specified, the HAR is not recorded.
            Make sure to await <see cref="M:PlaywrightSharp.IPage.CloseAsync(System.Boolean)"/> for the HAR to be saved.
            You can use <see cref="T:PlaywrightSharp.Har.HarResult"/> to deserialize the generated JSON file.</param>
            <param name="recordVideo">Enables video recording for all pages into recordVideo.dir directory. If not specified videos are not recorded.
            Make sure to await <seealso cref="M:PlaywrightSharp.BrowserContext.CloseAsync"/> for videos to be saved.</param>
            <param name="proxy">Network proxy settings to use with this context. Note that browser needs to be launched with the global proxy for this option to work. If all contexts override the proxy, global proxy will be never used and can be any string.</param>
            <param name="storageStatePath">Path to the file with saved storage.</param>
            <param name="storageState">Populates context with given storage state. This method can be used to initialize context with logged-in information obtained via <see cref="M:PlaywrightSharp.IBrowserContext.GetStorageStateAsync(System.String)"/>.</param>
            <example>.
            <code>
            <![CDATA[
            // Create a new incognito browser context.
            const context = await browser.NewContextAsync();
            // Create a new page in a pristine context.
            const page = await context.NewPageAsync("https://example.com");
            ]]>
            </code>
            </example>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that completes when a new <see cref="T:PlaywrightSharp.IBrowserContext"/> is created.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowser.NewContextAsync(PlaywrightSharp.BrowserContextOptions)">
            <summary>
            Creates a new browser context. It won't share cookies/cache with other browser contexts.
            </summary>
            <param name="options">Context options.</param>
            <example>.
            <code>
            <![CDATA[
            // Create a new incognito browser context.
            const context = await browser.NewContextAsync();
            // Create a new page in a pristine context.
            const page = await context.NewPageAsync("https://example.com");
            ]]>
            </code>
            </example>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that completes when a new <see cref="T:PlaywrightSharp.IBrowserContext"/> is created.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowser.NewPageAsync(PlaywrightSharp.ViewportSize,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,PlaywrightSharp.Geolocation,PlaywrightSharp.ContextPermission[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Decimal},PlaywrightSharp.Credentials,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{PlaywrightSharp.ColorScheme},System.String,System.Collections.Generic.Dictionary{System.String,System.String},PlaywrightSharp.RecordHarOptions,PlaywrightSharp.RecordVideoOptions,PlaywrightSharp.ProxySettings,System.String,PlaywrightSharp.StorageState)">
            <summary>
            Creates a new page in a new browser context. Closing this page will close the context as well.
            </summary>
            <param name="viewport">Sets a consistent viewport for each page. Defaults to an 800x600 viewport. null disables the default viewport.</param>
            <param name="userAgent">Specific user agent to use in this context.</param>
            <param name="bypassCSP">Toggles bypassing page's Content-Security-Policy.</param>
            <param name="javaScriptEnabled">Whether or not to enable or disable JavaScript in the context. Defaults to true.</param>
            <param name="timezoneId">Changes the timezone of the context. See <see href="https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1">ICU’s metaZones.txt</see> for a list of supported timezone IDs.</param>
            <param name="geolocation">Changes the Geolocation of the context.</param>
            <param name="permissions">A <see cref="T:System.Collections.Generic.Dictionary`2"/> from origin keys to permissions values. See <see cref="M:PlaywrightSharp.IBrowserContext.GrantPermissionsAsync(PlaywrightSharp.ContextPermission[],System.String)"/> for more details.</param>
            <param name="isMobile">Gets or sets whether the meta viewport tag is taken into account.</param>
            <param name="offline">Whether to emulate network being offline. Defaults to `false`.</param>
            <param name="deviceScaleFactor">Gets or sets the device scale factor.</param>
            <param name="httpCredentials">Credentials for HTTP authentication.</param>
            <param name="hasTouch">Specifies if viewport supports touch events. Defaults to false.</param>
            <param name="acceptDownloads">Whether to automatically download all the attachments. Defaults to false where all the downloads are canceled.</param>
            <param name="ignoreHTTPSErrors"> Whether to ignore HTTPS errors during navigation. Defaults to false.</param>
            <param name="colorScheme">Emulates 'prefers-colors-scheme' media feature.</param>
            <param name="locale">Specify user locale, for example en-GB, de-DE, etc. Locale will affect navigator.language value, Accept-Language request header value as well as number and date formatting rules.</param>
            <param name="extraHTTPHeaders">An object containing additional HTTP headers to be sent with every request.</param>
            <param name="recordHar">Enables HAR recording for all pages into recordHar.path file. If not specified, the HAR is not recorded.
            Make sure to await <see cref="M:PlaywrightSharp.IPage.CloseAsync(System.Boolean)"/> for the HAR to be saved.
            You can use <see cref="T:PlaywrightSharp.Har.HarResult"/> to deserialize the generated JSON file.</param>
            <param name="recordVideo">Enables video recording for all pages into recordVideo.dir directory. If not specified videos are not recorded.
            Make sure to await <seealso cref="M:PlaywrightSharp.BrowserContext.CloseAsync"/> for videos to be saved.</param>
            <param name="proxy">Network proxy settings to use with this context. Note that browser needs to be launched with the global proxy for this option to work. If all contexts override the proxy, global proxy will be never used and can be any string.</param>
            <param name="storageStatePath">Path to the file with saved storage.</param>
            <param name="storageState">Populates context with given storage state. This method can be used to initialize context with logged-in information obtained via <see cref="M:PlaywrightSharp.IBrowserContext.GetStorageStateAsync(System.String)"/>.</param>
            <example>.
            <code>
            <![CDATA[
            // Create a new incognito browser context.
            const context = await browser.NewContextAsync();
            // Create a new page in a pristine context.
            const page = await context.NewPageAsync("https://example.com");
            ]]>
            </code>
            </example>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that completes when a new <see cref="T:PlaywrightSharp.IPage"/> is created.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowser.NewPageAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,PlaywrightSharp.Geolocation,PlaywrightSharp.ContextPermission[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Decimal},PlaywrightSharp.Credentials,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{PlaywrightSharp.ColorScheme},System.String,System.Collections.Generic.Dictionary{System.String,System.String},PlaywrightSharp.RecordHarOptions,PlaywrightSharp.RecordVideoOptions,PlaywrightSharp.ProxySettings,System.String,PlaywrightSharp.StorageState)">
            <summary>
            Creates a new page in a new browser context. Closing this page will close the context as well.
            </summary>
            <param name="userAgent">Specific user agent to use in this context.</param>
            <param name="bypassCSP">Toggles bypassing page's Content-Security-Policy.</param>
            <param name="javaScriptEnabled">Whether or not to enable or disable JavaScript in the context. Defaults to true.</param>
            <param name="timezoneId">Changes the timezone of the context. See <see href="https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1">ICU’s metaZones.txt</see> for a list of supported timezone IDs.</param>
            <param name="geolocation">Changes the Geolocation of the context.</param>
            <param name="permissions">A <see cref="T:System.Collections.Generic.Dictionary`2"/> from origin keys to permissions values. See <see cref="M:PlaywrightSharp.IBrowserContext.GrantPermissionsAsync(PlaywrightSharp.ContextPermission[],System.String)"/> for more details.</param>
            <param name="isMobile">Gets or sets whether the meta viewport tag is taken into account.</param>
            <param name="offline">Whether to emulate network being offline. Defaults to `false`.</param>
            <param name="deviceScaleFactor">Gets or sets the device scale factor.</param>
            <param name="httpCredentials">Credentials for HTTP authentication.</param>
            <param name="hasTouch">Specifies if viewport supports touch events. Defaults to false.</param>
            <param name="acceptDownloads">Whether to automatically download all the attachments. Defaults to false where all the downloads are canceled.</param>
            <param name="ignoreHTTPSErrors"> Whether to ignore HTTPS errors during navigation. Defaults to false.</param>
            <param name="colorScheme">Emulates 'prefers-colors-scheme' media feature.</param>
            <param name="locale">Specify user locale, for example en-GB, de-DE, etc. Locale will affect navigator.language value, Accept-Language request header value as well as number and date formatting rules.</param>
            <param name="extraHTTPHeaders">An object containing additional HTTP headers to be sent with every request.</param>
            <param name="recordHar">Enables HAR recording for all pages into recordHar.path file. If not specified, the HAR is not recorded.
            Make sure to await <see cref="M:PlaywrightSharp.IPage.CloseAsync(System.Boolean)"/> for the HAR to be saved.
            You can use <see cref="T:PlaywrightSharp.Har.HarResult"/> to deserialize the generated JSON file.</param>
            <param name="recordVideo">Enables video recording for all pages into recordVideo.dir directory. If not specified videos are not recorded.
            Make sure to await <seealso cref="M:PlaywrightSharp.BrowserContext.CloseAsync"/> for videos to be saved.</param>
            <param name="proxy">Network proxy settings to use with this context. Note that browser needs to be launched with the global proxy for this option to work. If all contexts override the proxy, global proxy will be never used and can be any string.</param>
            <param name="storageStatePath">Path to the file with saved storage.</param>
            <param name="storageState">Populates context with given storage state. This method can be used to initialize context with logged-in information obtained via <see cref="M:PlaywrightSharp.IBrowserContext.GetStorageStateAsync(System.String)"/>.</param>
            <example>.
            <code>
            <![CDATA[
            // Create a new incognito browser context.
            const context = await browser.NewContextAsync();
            // Create a new page in a pristine context.
            const page = await context.NewPageAsync("https://example.com");
            ]]>
            </code>
            </example>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that completes when a new <see cref="T:PlaywrightSharp.IPage"/> is created.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowser.NewPageAsync(PlaywrightSharp.BrowserContextOptions)">
            <summary>
            Creates a new page in a new browser context. Closing this page will close the context as well.
            </summary>
            <param name="options">Context options.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that completes when a new <see cref="T:PlaywrightSharp.IPage"/> is created.</returns>
        </member>
        <member name="T:PlaywrightSharp.IBrowserContext">
            <summary>
            BrowserContexts provide a way to operate multiple independent browser sessions.
            If a <see cref="T:PlaywrightSharp.IPage"/> opens another page, e.g.with a window.open call, the popup will belong to the parent page's browser context.
            PlaywrightSharp allows creation of "incognito" browser contexts with <seealso cref="M:PlaywrightSharp.IBrowser.NewContextAsync(PlaywrightSharp.BrowserContextOptions)"/> method. "Incognito" browser contexts don't write any browsing data to disk.
            </summary>
            <example>
            <code>
            <![CDATA[
            // Create a new incognito browser context
            const context = await browser.NewContextAsync();
            // Create a new page inside context.
            const page = await context.NewPageAsync("https://example.com");
            // Dispose context once it's no longer needed.
            await context.CloseAsync();
            ]]>
            </code>
            </example>
        </member>
        <member name="E:PlaywrightSharp.IBrowserContext.Close">
            <summary>
            Raised when Browser context gets closed.
            </summary>
        </member>
        <member name="E:PlaywrightSharp.IBrowserContext.Page">
            <summary>
            Raised when a new page is created in the Browser context.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IBrowserContext.DefaultTimeout">
            <summary>
            This setting will change the default maximum time for all the methods accepting timeout option.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IBrowserContext.DefaultNavigationTimeout">
            <summary>
            Maximum navigation time in milliseconds.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IBrowserContext.Browser">
            <summary>
            Returns the browser instance of the context. If it was launched as a persistent context null gets returned.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IBrowserContext.Pages">
            <summary>
            An array of all pages inside the browser context.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.NewPageAsync(System.String)">
            <summary>
            Creates a new page in the browser context and optionally navigates it to the specified URL.
            </summary>
            <param name="url">URL to navigate after the page is created.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that completes when a new <see cref="T:PlaywrightSharp.IPage"/> is created, yielding the new <see cref="T:PlaywrightSharp.IPage"/>.</returns>.
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.CloseAsync">
            <summary>
            Closes the browser context. All the targets that belong to the browser context will be closed.
            </summary>
            <remarks>NOTE only incognito browser contexts can be closed.</remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the browser context is closed.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.GetCookiesAsync(System.String[])">
            <summary>
            Returns the context's cookies.
            </summary>
            <param name="urls">Url's to return cookies for.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the cookies are sent by the browser, yielding a <see cref="t:NetworkCookie[]"/>.</returns>
            <remarks>
            If no URLs are specified, this method returns cookies for the current page URL.
            If URLs are specified, only cookies for those URLs are returned.
            </remarks>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.AddInitScriptAsync(System.String,System.Object[],System.String,System.String)">
            <summary>
            Adds a script which would be evaluated in one of the following scenarios:
            * Whenever a page is created in the browser context or is navigated.
            * Whenever a child frame is attached or navigated in any page in the browser context.In this case, the script is evaluated in the context of the newly attached frame.
            </summary>
            <param name="script">Script to be evaluated in all pages in the browser context or script path.</param>
            <param name="arg">Optional argument to pass to script .</param>
            <param name="path">Gets or sets the path to the JavaScript file to be injected into frame. If its a relative path, then it is resolved relative to <see cref="M:System.IO.Directory.GetCurrentDirectory"/>.</param>
            <param name="content">Gets or sets the raw JavaScript content to be injected into frame.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the registration was completed.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.AddCookiesAsync(System.Collections.Generic.IEnumerable{PlaywrightSharp.SetNetworkCookieParam})">
            <summary>
            Clears all of the current cookies and then sets the cookies for the context.
            </summary>
            <param name="cookies">Cookies to set.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the cookies are set.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.AddCookiesAsync(PlaywrightSharp.SetNetworkCookieParam[])">
            <summary>
            Clears all of the current cookies and then sets the cookies for the context.
            </summary>
            <param name="cookies">Cookies to set.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the cookies are set.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.ClearCookiesAsync">
            <summary>
            Clears the context's cookies.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the cookies are cleared.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.GrantPermissionsAsync(PlaywrightSharp.ContextPermission[],System.String)">
            <summary>
            Grants permissions to an URL.
            </summary>
            <param name="permissions">An array of permissions to grant.</param>
            <param name="origin">The origin to grant permissions to, e.g. "https://example.com".</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message was confirmed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.GrantPermissionsAsync(PlaywrightSharp.ContextPermission,System.String)">
            <summary>
            Grants permissions to an URL.
            </summary>
            <param name="permission">Permission to grant.</param>
            <param name="origin">The origin to grant permissions to, e.g. "https://example.com".</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message was confirmed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.SetGeolocationAsync(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Sets the page's geolocation.
            </summary>
            <param name="latitude">Latitude between -90 and 90.</param>
            <param name="longitude">Longitude between -180 and 180.</param>
            <param name="accuracy">Optional non-negative accuracy value.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message was confirmed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.SetGeolocationAsync(PlaywrightSharp.Geolocation)">
            <summary>
            Sets the page's geolocation.
            </summary>
            <param name="geolocation">Geolocation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message was confirmed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.ClearPermissionsAsync">
            <summary>
            Clears all permission overrides for the browser context.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message was confirmed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.WaitForEventAsync``1(PlaywrightSharp.PlaywrightEvent{``0},System.Func{``0,System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Waits for event to fire and passes its value into the predicate function.
            </summary>
            <param name="e">Event to wait for.</param>
            <param name="predicate">Receives the event data and resolves when the waiting should resolve.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <typeparam name="T">Return type.</typeparam>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the predicate returns truthy value. Yielding the information of the event.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.ExposeBindingAsync(System.String,System.Action{PlaywrightSharp.BindingSource})">
            <summary>
            The method adds a function called name on the window object of every frame in every page in the context.
            When called, the function executes <paramref name="callback"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves when <paramref name="callback"/> completes.
            </summary>
            <param name="name">Name of the function on the window object.</param>
            <param name="callback">Callback function which will be called in Playwright's context.</param>
            <remarks>
            If the <paramref name="callback"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:PlaywrightSharp.IBrowserContext.ExposeBindingAsync(System.String,System.Action{PlaywrightSharp.BindingSource})"/> survive navigations.
            </remarks>
            <returns>Task.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.ExposeBindingAsync``1(System.String,System.Action{PlaywrightSharp.BindingSource,``0})">
            <summary>
            The method adds a function called name on the window object of every frame in every page in the context.
            When called, the function executes <paramref name="callback"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves when <paramref name="callback"/> completes.
            </summary>
            <typeparam name="T">The parameter of <paramref name="callback"/>.</typeparam>
            <param name="name">Name of the function on the window object.</param>
            <param name="callback">Callback function which will be called in Playwright's context.</param>
            <remarks>
            If the <paramref name="callback"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:PlaywrightSharp.IBrowserContext.ExposeBindingAsync(System.String,System.Action{PlaywrightSharp.BindingSource})"/> survive navigations.
            </remarks>
            <returns>Task.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.ExposeBindingAsync``1(System.String,System.Func{PlaywrightSharp.BindingSource,``0})">
            <summary>
            The method adds a function called name on the window object of every frame in every page in the context.
            When called, the function executes <paramref name="callback"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves to the return value of <paramref name="callback"/>.
            </summary>
            <typeparam name="TResult">The result of <paramref name="callback"/>.</typeparam>
            <param name="name">Name of the function on the window object.</param>
            <param name="callback">Callback function which will be called in Playwright's context.</param>
            <remarks>
            If the <paramref name="callback"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:PlaywrightSharp.IBrowserContext.ExposeBindingAsync``1(System.String,System.Func{PlaywrightSharp.BindingSource,``0})"/> survive navigations.
            </remarks>
            <returns>Task.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.ExposeBindingAsync``2(System.String,System.Func{PlaywrightSharp.BindingSource,``0,``1})">
            <summary>
            The method adds a function called name on the window object of every frame in every page in the context.
            When called, the function executes <paramref name="callback"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves to the return value of <paramref name="callback"/>.
            </summary>
            <typeparam name="T">The parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="TResult">The result of <paramref name="callback"/>.</typeparam>
            <param name="name">Name of the function on the window object.</param>
            <param name="callback">Callback function which will be called in Playwright's context.</param>
            <remarks>
            If the <paramref name="callback"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:PlaywrightSharp.IBrowserContext.ExposeBindingAsync``2(System.String,System.Func{PlaywrightSharp.BindingSource,``0,``1})"/> survive navigations.
            </remarks>
            <returns>Task.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.ExposeBindingAsync``1(System.String,System.Func{PlaywrightSharp.BindingSource,PlaywrightSharp.IJSHandle,``0})">
            <summary>
            The method adds a function called name on the window object of every frame in every page in the context.
            When called, the function executes <paramref name="callback"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves to the return value of <paramref name="callback"/>.
            </summary>
            <typeparam name="TResult">The result of <paramref name="callback"/>.</typeparam>
            <param name="name">Name of the function on the window object.</param>
            <param name="callback">Callback function which will be called in Playwright's context.</param>
            <remarks>
            If the <paramref name="callback"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:PlaywrightSharp.IBrowserContext.ExposeBindingAsync``2(System.String,System.Func{PlaywrightSharp.BindingSource,``0,``1})"/> survive navigations.
            </remarks>
            <returns>Task.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.ExposeBindingAsync``3(System.String,System.Func{PlaywrightSharp.BindingSource,``0,``1,``2})">
            <summary>
            The method adds a function called name on the window object of every frame in every page in the context.
            When called, the function executes <paramref name="callback"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves to the return value of <paramref name="callback"/>.
            </summary>
            <typeparam name="T1">The first parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="T2">The second parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="TResult">The result of <paramref name="callback"/>.</typeparam>
            <param name="name">Name of the function on the window object.</param>
            <param name="callback">Callback function which will be called in Playwright's context.</param>
            <remarks>
            If the <paramref name="callback"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:PlaywrightSharp.IBrowserContext.ExposeBindingAsync``3(System.String,System.Func{PlaywrightSharp.BindingSource,``0,``1,``2})"/> survive navigations.
            </remarks>
            <returns>Task.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.ExposeBindingAsync``4(System.String,System.Func{PlaywrightSharp.BindingSource,``0,``1,``2,``3})">
            <summary>
            The method adds a function called name on the window object of every frame in every page in the context.
            When called, the function executes <paramref name="callback"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves to the return value of <paramref name="callback"/>.
            </summary>
            <typeparam name="T1">The first parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="T2">The second parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="T3">The third parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="TResult">The result of <paramref name="callback"/>.</typeparam>
            <param name="name">Name of the function on the window object.</param>
            <param name="callback">Callback function which will be called in Playwright's context.</param>
            <remarks>
            If the <paramref name="callback"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:PlaywrightSharp.IBrowserContext.ExposeBindingAsync``4(System.String,System.Func{PlaywrightSharp.BindingSource,``0,``1,``2,``3})"/> survive navigations.
            </remarks>
            <returns>Task.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.ExposeBindingAsync``5(System.String,System.Func{PlaywrightSharp.BindingSource,``0,``1,``2,``3,``4})">
            <summary>
            The method adds a function called name on the window object of every frame in every page in the context.
            When called, the function executes <paramref name="callback"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves to the return value of <paramref name="callback"/>.
            </summary>
            <typeparam name="T1">The first parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="T2">The second parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="T3">The third parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="T4">The fourth parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="TResult">The result of <paramref name="callback"/>.</typeparam>
            <param name="name">Name of the function on the window object.</param>
            <param name="callback">Callback function which will be called in Playwright's context.</param>
            <remarks>
            If the <paramref name="callback"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:PlaywrightSharp.IBrowserContext.ExposeBindingAsync``5(System.String,System.Func{PlaywrightSharp.BindingSource,``0,``1,``2,``3,``4})"/> survive navigations.
            </remarks>
            <returns>Task.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.ExposeFunctionAsync(System.String,System.Action)">
            <summary>
            The method adds a function called name on the window object of every frame in every page in the context.
            When called, the function executes <paramref name="callback"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves when <paramref name="callback"/> completes.
            </summary>
            <param name="name">Name of the function on the window object.</param>
            <param name="callback">Callback function which will be called in Playwright's context.</param>
            <remarks>
            If the <paramref name="callback"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:PlaywrightSharp.IBrowserContext.ExposeFunctionAsync(System.String,System.Action)"/> survive navigations.
            </remarks>
            <returns>Task.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.ExposeFunctionAsync``1(System.String,System.Action{``0})">
            <summary>
            The method adds a function called name on the window object of every frame in every page in the context.
            When called, the function executes <paramref name="callback"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves when <paramref name="callback"/> completes.
            </summary>
            <param name="name">Name of the function on the window object.</param>
            <param name="callback">Callback function which will be called in Playwright's context.</param>
            <typeparam name="T">The parameter of <paramref name="callback"/>.</typeparam>
            <remarks>
            If the <paramref name="callback"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:PlaywrightSharp.IBrowserContext.ExposeFunctionAsync(System.String,System.Action)"/> survive navigations.
            </remarks>
            <returns>Task.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.ExposeFunctionAsync``1(System.String,System.Func{``0})">
            <summary>
            The method adds a function called name on the window object of every frame in every page in the context.
            When called, the function executes <paramref name="callback"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves to the return value of <paramref name="callback"/>.
            </summary>
            <typeparam name="TResult">The result of <paramref name="callback"/>.</typeparam>
            <param name="name">Name of the function on the window object.</param>
            <param name="callback">Callback function which will be called in Playwright's context.</param>
            <remarks>
            If the <paramref name="callback"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:PlaywrightSharp.IBrowserContext.ExposeFunctionAsync``1(System.String,System.Func{``0})"/> survive navigations.
            </remarks>
            <returns>Task.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.ExposeFunctionAsync``2(System.String,System.Func{``0,``1})">
            <summary>
            The method adds a function called name on the window object of every frame in every page in the context.
            When called, the function executes <paramref name="callback"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves to the return value of <paramref name="callback"/>.
            </summary>
            <typeparam name="T">The parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="TResult">The result of <paramref name="callback"/>.</typeparam>
            <param name="name">Name of the function on the window object.</param>
            <param name="callback">Callback function which will be called in Playwright's context.</param>
            <remarks>
            If the <paramref name="callback"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:PlaywrightSharp.IBrowserContext.ExposeFunctionAsync``2(System.String,System.Func{``0,``1})"/> survive navigations.
            </remarks>
            <returns>Task.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.ExposeFunctionAsync``3(System.String,System.Func{``0,``1,``2})">
            <summary>
            The method adds a function called name on the window object of every frame in every page in the context.
            When called, the function executes <paramref name="callback"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves to the return value of <paramref name="callback"/>.
            </summary>
            <typeparam name="T1">The first parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="T2">The second parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="TResult">The result of <paramref name="callback"/>.</typeparam>
            <param name="name">Name of the function on the window object.</param>
            <param name="callback">Callback function which will be called in Playwright's context.</param>
            <remarks>
            If the <paramref name="callback"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:PlaywrightSharp.IBrowserContext.ExposeFunctionAsync``3(System.String,System.Func{``0,``1,``2})"/> survive navigations.
            </remarks>
            <returns>Task.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.ExposeFunctionAsync``4(System.String,System.Func{``0,``1,``2,``3})">
            <summary>
            The method adds a function called name on the window object of every frame in every page in the context.
            When called, the function executes <paramref name="callback"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves to the return value of <paramref name="callback"/>.
            </summary>
            <typeparam name="T1">The first parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="T2">The second parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="T3">The third parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="TResult">The result of <paramref name="callback"/>.</typeparam>
            <param name="name">Name of the function on the window object.</param>
            <param name="callback">Callback function which will be called in Playwright's context.</param>
            <remarks>
            If the <paramref name="callback"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:PlaywrightSharp.IBrowserContext.ExposeFunctionAsync``4(System.String,System.Func{``0,``1,``2,``3})"/> survive navigations.
            </remarks>
            <returns>Task.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.ExposeFunctionAsync``5(System.String,System.Func{``0,``1,``2,``3,``4})">
            <summary>
            The method adds a function called name on the window object of every frame in every page in the context.
            When called, the function executes <paramref name="callback"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves to the return value of <paramref name="callback"/>.
            </summary>
            <typeparam name="T1">The first parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="T2">The second parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="T3">The third parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="T4">The fourth parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="TResult">The result of <paramref name="callback"/>.</typeparam>
            <param name="name">Name of the function on the window object.</param>
            <param name="callback">Callback function which will be called in Playwright's context.</param>
            <remarks>
            If the <paramref name="callback"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:PlaywrightSharp.IBrowserContext.ExposeFunctionAsync``5(System.String,System.Func{``0,``1,``2,``3,``4})"/> survive navigations.
            </remarks>
            <returns>Task.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.SetHttpCredentialsAsync(PlaywrightSharp.Credentials)">
            <summary>
            Provide credentials for http authentication <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication"/>.
            </summary>
            <param name="httpCredentials">The credentials.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the credentials are set.</returns>
            <remarks>
            To disable authentication, pass <c>null</c>.
            </remarks>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.RouteAsync(System.String,System.Action{PlaywrightSharp.Route,PlaywrightSharp.IRequest})">
            <summary>
            Routing provides the capability to modify network requests that are made by any page in the browser context.
            Once route is enabled, every request matching the url pattern will stall unless it's continued, fulfilled or aborted.
            </summary>
            <param name="url">A glob pattern to match while routing.</param>
            <param name="handler">Handler function to route the request.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the registration was completed.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.RouteAsync(System.Text.RegularExpressions.Regex,System.Action{PlaywrightSharp.Route,PlaywrightSharp.IRequest})">
            <summary>
            Routing provides the capability to modify network requests that are made by a page.
            Once route is enabled, every request matching the url pattern will stall unless it's continued, fulfilled or aborted.
            </summary>
            <param name="url">A regex to match while routing.</param>
            <param name="handler">Handler function to route the request.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the registration was completed.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.RouteAsync(System.Func{System.String,System.Boolean},System.Action{PlaywrightSharp.Route,PlaywrightSharp.IRequest})">
            <summary>
            Routing provides the capability to modify network requests that are made by a page.
            Once route is enabled, every request matching the url pattern will stall unless it's continued, fulfilled or aborted.
            </summary>
            <param name="url">A fucntion that evaluate the URL match.</param>
            <param name="handler">Handler function to route the request.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the registration was completed.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.UnrouteAsync(System.String,System.Action{PlaywrightSharp.Route,PlaywrightSharp.IRequest})">
            <summary>
            Removes a route created with <see cref="M:PlaywrightSharp.IBrowserContext.RouteAsync(System.String,System.Action{PlaywrightSharp.Route,PlaywrightSharp.IRequest})"/>. When handler is not specified, removes all routes for the url.
            </summary>
            <param name="url">A glob pattern used to match while routing.</param>
            <param name="handler">Handler function used to route a request.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the registration was completed.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.UnrouteAsync(System.Text.RegularExpressions.Regex,System.Action{PlaywrightSharp.Route,PlaywrightSharp.IRequest})">
            <summary>
            Removes a route created with <see cref="M:PlaywrightSharp.IBrowserContext.RouteAsync(System.String,System.Action{PlaywrightSharp.Route,PlaywrightSharp.IRequest})"/>. When handler is not specified, removes all routes for the url.
            </summary>
            <param name="url">A glob pattern used to match while routing.</param>
            <param name="handler">Handler function used to route a request.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the registration was completed.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.UnrouteAsync(System.Func{System.String,System.Boolean},System.Action{PlaywrightSharp.Route,PlaywrightSharp.IRequest})">
            <summary>
            Removes a route created with <see cref="M:PlaywrightSharp.IBrowserContext.RouteAsync(System.String,System.Action{PlaywrightSharp.Route,PlaywrightSharp.IRequest})"/>. When handler is not specified, removes all routes for the url.
            </summary>
            <param name="url">A function used to match while routing.</param>
            <param name="handler">Handler function used to route a request.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the registration was completed.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.SetOfflineAsync(System.Boolean)">
            <summary>
            Set offline mode for the context.
            </summary>
            <returns>A<see cref="T:System.Threading.Tasks.Task"/> that completes when the message is confirmed by the browser.</returns>
            <param name="offline">When <c>true</c> enables offline mode for the page.</param>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.SetExtraHTTPHeadersAsync(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sets extra HTTP headers that will be sent with every request in every page in the context.
            </summary>
            <param name="headers">Additional http headers to be sent with every request.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the headers are set.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserContext.GetStorageStateAsync(System.String)">
            <summary>
            Returns storage state for this browser context, contains current cookies and local storage snapshot.
            </summary>
            <param name="path">The file path to save the storage state to. If path is a relative path, then it is resolved relative to current working directory.
            If no path is provided, storage state is still returned, but won't be saved to the disk.</param>
            <returns>The storage state model.</returns>
        </member>
        <member name="T:PlaywrightSharp.IBrowserType">
            <summary>
            BrowserType provides methods to launch a specific browser instance or connect to an existing one.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IBrowserType.ExecutablePath">
            <summary>
            Executable path.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IBrowserType.Name">
            <summary>
            Returns browser name. For example: 'chromium', 'webkit' or 'firefox'.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.IBrowserType.LaunchAsync(PlaywrightSharp.LaunchOptions)">
            <summary>
            Launches a new browser.
            </summary>
            <param name="options">Launch options.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the browser is launched, yielding the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserType.LaunchAsync(System.Nullable{System.Boolean},System.String[],System.String,System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String[],System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.Object},PlaywrightSharp.ProxySettings,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Launches a new browser.
            </summary>
            <param name="headless">Whether to run browser in headless mode. Defaults to true unless the devtools option is true.</param>
            <param name="args">Additional arguments to pass to the browser instance.</param>
            <param name="userDataDir">Path to a User Data Directory.</param>
            <param name="devtools">Whether to auto-open DevTools panel for each tab. If this option is true, the headless option will be set false.</param>
            <param name="executablePath">Path to a browser executable to run instead of the bundled one.</param>
            <param name="downloadsPath">If specified, accepted downloads are downloaded into this folder. Otherwise, temporary folder is created and is deleted when browser is closed.</param>
            <param name="ignoreHTTPSErrors">Whether to ignore HTTPS errors during navigation. Defaults to false.</param>
            <param name="timeout">Maximum time in milliseconds to wait for the browser instance to start.</param>
            <param name="dumpIO">Whether to pipe browser process stdout and stderr into process.stdout and process.stderr. Defaults to false.</param>
            <param name="slowMo">Slows down PlaywrightSharp operations by the specified amount of milliseconds. Useful so that you can see what is going on.</param>
            <param name="ignoreAllDefaultArgs">If true, Playwright does not pass its own configurations args and only uses the ones from args.
            Dangerous option; use with care. Defaults to false.</param>
            <param name="ignoreDefaultArgs">if <paramref name="ignoreDefaultArgs"/> is set to <c>false</c> this list will be used to filter default arguments.</param>
            <param name="env">Specify environment variables that will be visible to browser. Defaults to Environment variables.</param>
            <param name="firefoxUserPrefs">Firefox user preferences. Learn more about the Firefox user preferences at about:config.</param>
            <param name="proxy">Network proxy settings.</param>
            <param name="chromiumSandbox">Enable Chromium sandboxing. Defaults to true.</param>
            <param name="handleSIGINT">Close the browser process on Ctrl-C. Defaults to true.</param>
            <param name="handleSIGTERM">Close the browser process on SIGTERM. Defaults to true.</param>
            <param name="handleSIGHUP">Close the browser process on SIGHUP. Defaults to true.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the browser is launched, yielding the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserType.LaunchPersistentContextAsync(System.String,PlaywrightSharp.LaunchOptions)">
            <summary>
            Launches browser that uses persistent storage located at userDataDir and returns the only context. Closing this context will automatically close the browser.
            </summary>
            <param name="userDataDir">Path to a User Data Directory, which stores browser session data like cookies and local storage.</param>
            <param name="options">Launch options.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the browser is launched, yielding the browser server.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserType.LaunchPersistentContextAsync(System.String,PlaywrightSharp.ViewportSize,System.Nullable{System.Boolean},System.String[],System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String[],System.Collections.Generic.Dictionary{System.String,System.String},PlaywrightSharp.ProxySettings,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,PlaywrightSharp.Geolocation,PlaywrightSharp.ContextPermission[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Decimal},PlaywrightSharp.Credentials,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{PlaywrightSharp.ColorScheme},System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},PlaywrightSharp.RecordHarOptions,PlaywrightSharp.RecordVideoOptions)">
            <summary>
            Launches browser that uses persistent storage located at userDataDir and returns the only context. Closing this context will automatically close the browser.
            </summary>
            <param name="userDataDir">Path to a User Data Directory, which stores browser session data like cookies and local storage.</param>
            <param name="viewport">Sets a consistent viewport for each page. Defaults to an 800x600 viewport. null disables the default viewport.</param>
            <param name="headless">Whether to run browser in headless mode. Defaults to true unless the devtools option is true.</param>
            <param name="args">Additional arguments to pass to the browser instance.</param>
            <param name="devtools">Whether to auto-open DevTools panel for each tab. If this option is true, the headless option will be set false.</param>
            <param name="executablePath">Path to a browser executable to run instead of the bundled one.</param>
            <param name="downloadsPath">If specified, accepted downloads are downloaded into this folder. Otherwise, temporary folder is created and is deleted when browser is closed.</param>
            <param name="ignoreHTTPSErrors">Whether to ignore HTTPS errors during navigation. Defaults to false.</param>
            <param name="timeout">Maximum time in milliseconds to wait for the browser instance to start.</param>
            <param name="dumpIO">Whether to pipe browser process stdout and stderr into process.stdout and process.stderr. Defaults to false.</param>
            <param name="slowMo">Slows down PlaywrightSharp operations by the specified amount of milliseconds. Useful so that you can see what is going on.</param>
            <param name="ignoreAllDefaultArgs">If true, Playwright does not pass its own configurations args and only uses the ones from args.
            Dangerous option; use with care. Defaults to false.</param>
            <param name="ignoreDefaultArgs">if <paramref name="ignoreDefaultArgs"/> is set to <c>false</c> this list will be used to filter default arguments.</param>
            <param name="env">Specify environment variables that will be visible to browser. Defaults to Environment variables.</param>
            <param name="proxy">Network proxy settings.</param>
            <param name="userAgent">Specific user agent to use in this context.</param>
            <param name="bypassCSP">Toggles bypassing page's Content-Security-Policy.</param>
            <param name="javaScriptEnabled">Whether or not to enable or disable JavaScript in the context. Defaults to true.</param>
            <param name="timezoneId">Changes the timezone of the context. See <see href="https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1">ICU’s metaZones.txt</see> for a list of supported timezone IDs.</param>
            <param name="geolocation">Changes the Geolocation of the context.</param>
            <param name="permissions">A <see cref="T:System.Collections.Generic.Dictionary`2"/> from origin keys to permissions values. See <see cref="M:PlaywrightSharp.IBrowserContext.GrantPermissionsAsync(PlaywrightSharp.ContextPermission[],System.String)"/> for more details.</param>
            <param name="isMobile">Gets or sets whether the meta viewport tag is taken into account.</param>
            <param name="offline">Whether to emulate network being offline. Defaults to `false`.</param>
            <param name="deviceScaleFactor">Gets or sets the device scale factor.</param>
            <param name="httpCredentials">Credentials for HTTP authentication.</param>
            <param name="hasTouch">Specifies if viewport supports touch events. Defaults to false.</param>
            <param name="acceptDownloads">Whether to automatically download all the attachments. Defaults to false where all the downloads are canceled.</param>
            <param name="colorScheme">Emulates 'prefers-colors-scheme' media feature.</param>
            <param name="locale">Specify user locale, for example en-GB, de-DE, etc. Locale will affect navigator.language value, Accept-Language request header value as well as number and date formatting rules.</param>
            <param name="extraHTTPHeaders">An object containing additional HTTP headers to be sent with every request.</param>
            <param name="chromiumSandbox">Enable Chromium sandboxing. Defaults to true.</param>
            <param name="handleSIGINT">Close the browser process on Ctrl-C. Defaults to true.</param>
            <param name="handleSIGTERM">Close the browser process on SIGTERM. Defaults to true.</param>
            <param name="handleSIGHUP">Close the browser process on SIGHUP. Defaults to true.</param>
            <param name="recordHar">Enables HAR recording for all pages into recordHar.path file. If not specified, the HAR is not recorded.
            Make sure to await <see cref="M:PlaywrightSharp.IPage.CloseAsync(System.Boolean)"/> for the HAR to be saved.
            You can use <see cref="T:PlaywrightSharp.Har.HarResult"/> to deserialize the generated JSON file.</param>
            <param name="recordVideo">Enables video recording for all pages into recordVideo.dir directory. If not specified videos are not recorded.
            Make sure to await <seealso cref="M:PlaywrightSharp.BrowserContext.CloseAsync"/> for videos to be saved.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the browser is launched, yielding the browser server.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserType.LaunchPersistentContextAsync(System.String,System.Nullable{System.Boolean},System.String[],System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String[],System.Collections.Generic.Dictionary{System.String,System.String},PlaywrightSharp.ProxySettings,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,PlaywrightSharp.Geolocation,PlaywrightSharp.ContextPermission[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Decimal},PlaywrightSharp.Credentials,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{PlaywrightSharp.ColorScheme},System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},PlaywrightSharp.RecordHarOptions,PlaywrightSharp.RecordVideoOptions)">
            <summary>
            Launches browser that uses persistent storage located at userDataDir and returns the only context. Closing this context will automatically close the browser.
            </summary>
            <param name="userDataDir">Path to a User Data Directory, which stores browser session data like cookies and local storage.</param>
            <param name="headless">Whether to run browser in headless mode. Defaults to true unless the devtools option is true.</param>
            <param name="args">Additional arguments to pass to the browser instance.</param>
            <param name="devtools">Whether to auto-open DevTools panel for each tab. If this option is true, the headless option will be set false.</param>
            <param name="executablePath">Path to a browser executable to run instead of the bundled one.</param>
            <param name="downloadsPath">If specified, accepted downloads are downloaded into this folder. Otherwise, temporary folder is created and is deleted when browser is closed.</param>
            <param name="ignoreHTTPSErrors">Whether to ignore HTTPS errors during navigation. Defaults to false.</param>
            <param name="timeout">Maximum time in milliseconds to wait for the browser instance to start.</param>
            <param name="dumpIO">Whether to pipe browser process stdout and stderr into process.stdout and process.stderr. Defaults to false.</param>
            <param name="slowMo">Slows down PlaywrightSharp operations by the specified amount of milliseconds. Useful so that you can see what is going on.</param>
            <param name="ignoreAllDefaultArgs">If true, Playwright does not pass its own configurations args and only uses the ones from args.
            Dangerous option; use with care. Defaults to false.</param>
            <param name="ignoreDefaultArgs">if <paramref name="ignoreDefaultArgs"/> is set to <c>false</c> this list will be used to filter default arguments.</param>
            <param name="env">Specify environment variables that will be visible to browser. Defaults to Environment variables.</param>
            <param name="proxy">Network proxy settings.</param>
            <param name="userAgent">Specific user agent to use in this context.</param>
            <param name="bypassCSP">Toggles bypassing page's Content-Security-Policy.</param>
            <param name="javaScriptEnabled">Whether or not to enable or disable JavaScript in the context. Defaults to true.</param>
            <param name="timezoneId">Changes the timezone of the context. See <see href="https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1">ICU’s metaZones.txt</see> for a list of supported timezone IDs.</param>
            <param name="geolocation">Changes the Geolocation of the context.</param>
            <param name="permissions">A <see cref="T:System.Collections.Generic.Dictionary`2"/> from origin keys to permissions values. See <see cref="M:PlaywrightSharp.IBrowserContext.GrantPermissionsAsync(PlaywrightSharp.ContextPermission[],System.String)"/> for more details.</param>
            <param name="isMobile">Gets or sets whether the meta viewport tag is taken into account.</param>
            <param name="offline">Whether to emulate network being offline. Defaults to `false`.</param>
            <param name="deviceScaleFactor">Gets or sets the device scale factor.</param>
            <param name="httpCredentials">Credentials for HTTP authentication.</param>
            <param name="hasTouch">Specifies if viewport supports touch events. Defaults to false.</param>
            <param name="acceptDownloads">Whether to automatically download all the attachments. Defaults to false where all the downloads are canceled.</param>
            <param name="colorScheme">Emulates 'prefers-colors-scheme' media feature.</param>
            <param name="locale">Specify user locale, for example en-GB, de-DE, etc. Locale will affect navigator.language value, Accept-Language request header value as well as number and date formatting rules.</param>
            <param name="extraHTTPHeaders">An object containing additional HTTP headers to be sent with every request.</param>
            <param name="chromiumSandbox">Enable Chromium sandboxing. Defaults to true.</param>
            <param name="handleSIGINT">Close the browser process on Ctrl-C. Defaults to true.</param>
            <param name="handleSIGTERM">Close the browser process on SIGTERM. Defaults to true.</param>
            <param name="handleSIGHUP">Close the browser process on SIGHUP. Defaults to true.</param>
            <param name="recordHar">Enables HAR recording for all pages into recordHar.path file. If not specified, the HAR is not recorded.
            Make sure to await <see cref="M:PlaywrightSharp.IPage.CloseAsync(System.Boolean)"/> for the HAR to be saved.
            You can use <see cref="T:PlaywrightSharp.Har.HarResult"/> to deserialize the generated JSON file.</param>
            <param name="recordVideo">Enables video recording for all pages into recordVideo.dir directory. If not specified videos are not recorded.
            Make sure to await <seealso cref="M:PlaywrightSharp.BrowserContext.CloseAsync"/> for videos to be saved.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the browser is launched, yielding the browser server.</returns>
        </member>
        <member name="M:PlaywrightSharp.IBrowserType.LaunchPersistentContextAsync(System.String,PlaywrightSharp.LaunchPersistentOptions)">
            <summary>
            Launches browser that uses persistent storage located at userDataDir and returns the only context. Closing this context will automatically close the browser.
            </summary>
            <param name="userDataDir">Path to a User Data Directory, which stores browser session data like cookies and local storage.</param>
            <param name="options">Launch options.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the browser is launched, yielding the browser server.</returns>
        </member>
        <member name="T:PlaywrightSharp.ICoverage">
            <summary>
            Coverage gathers information about parts of JavaScript and CSS that were used by the page.
            </summary>
            <seealso cref="P:PlaywrightSharp.IPage.Coverage"/>
        </member>
        <member name="M:PlaywrightSharp.ICoverage.StartJSCoverageAsync(System.Boolean,System.Boolean)">
            <summary>
            Starts the JS coverage.
            </summary>
            <param name="resetOnNavigation">Whether to reset coverage on every navigation. Defaults to <c>true</c>.</param>
            <param name="reportAnonymousScripts">Whether anonymous scripts generated by the page should be reported. Defaults to <c>false</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message was confirmed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.ICoverage.StopJSCoverageAsync">
            <summary>
            Stops the JS coverage.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message was confirmed by the browser, yielding the coverage result.</returns>
        </member>
        <member name="M:PlaywrightSharp.ICoverage.StartCSSCoverageAsync(System.Boolean)">
            <summary>
            Starts CSS coverage.
            </summary>
            <param name="resetOnNavigation">Whether to reset coverage on every navigation. Defaults to <c>true</c>.</param>
            <returns>A task that resolves when coverage is started.</returns>
        </member>
        <member name="M:PlaywrightSharp.ICoverage.StopCSSCoverageAsync">
            <summary>
            Stops JS coverage and returns coverage reports for all non-anonymous scripts.
            </summary>
            <returns>Task that resolves to the array of coverage reports for all stylesheets.</returns>
            <remarks>
            JavaScript Coverage doesn't include anonymous scripts; however, scripts with sourceURLs are reported.
            </remarks>
        </member>
        <member name="T:PlaywrightSharp.IDialog">
            <summary>
            <see cref="T:PlaywrightSharp.IDialog"/> objects are dispatched by page via the <see cref="E:PlaywrightSharp.IPage.Dialog"/> event.
            </summary>
            <example>
            An example of using Dialog class:
            <code>
            <![CDATA[
            Page.Dialog += async (sender, e) =>
            {
                await e.Dialog.AcceptAsync();
            }
            await Page.EvaluateAsync("alert('yo');");
            ]]>
            </code>
            </example>
        </member>
        <member name="P:PlaywrightSharp.IDialog.Type">
            <summary>
            Dialog's type, can be one of alert, beforeunload, confirm or prompt.
            </summary>
            <value>The type of the dialog.</value>
        </member>
        <member name="P:PlaywrightSharp.IDialog.DefaultValue">
            <summary>
            If dialog is prompt, returns default prompt value. Otherwise, returns empty string.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:PlaywrightSharp.IDialog.Message">
            <summary>
            A message displayed in the dialog.
            </summary>
            <value>The message.</value>
        </member>
        <member name="M:PlaywrightSharp.IDialog.AcceptAsync(System.String)">
            <summary>
            Accept the Dialog.
            </summary>
            <param name="promptText">A text to enter in prompt. Does not cause any effects if the dialog's type is not prompt.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the dialog has been accepted.</returns>
        </member>
        <member name="M:PlaywrightSharp.IDialog.DismissAsync">
            <summary>
            Dismiss the dialog.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the dialog has been dismissed.</returns>
        </member>
        <member name="T:PlaywrightSharp.IElementHandle">
            <summary>
            It represents an in-page DOM element.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.PressAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Focuses the element, and then uses <see cref="M:PlaywrightSharp.IKeyboard.DownAsync(System.String)"/> and <see cref="M:PlaywrightSharp.IKeyboard.UpAsync(System.String)"/>.
            </summary>
            <param name="key">Name of key to press, such as <c>ArrowLeft</c>. See <see cref="T:PlaywrightSharp.KeyDefinitions"/> for a list of all key names.</param>
            <param name="delay">Time to wait between <c>keydown</c> and <c>keyup</c> in milliseconds. Defaults to 0.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.</param>
            <remarks>
            If <c>key</c> is a single character and no modifier keys besides <c>Shift</c> are being held down, a <c>keypress</c>/<c>input</c> event will also be generated.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is confirmed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.SelectTextAsync(System.Nullable{System.Int32})">
            <summary>
            This method waits for actionability checks, then focuses the element and selects all its text content.
            </summary>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the text is selected or timeout.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.DispatchEventAsync(System.String,System.Object,System.Nullable{System.Int32})">
            <summary>
            Under the hood, it creates an instance of an event based on the given type, initializes it with eventInit properties and dispatches it on the element.
            Events are composed, cancelable and bubble by default.
            </summary>
            <param name="type">DOM event type: "click", "dragstart", etc.</param>
            <param name="eventInit">Event-specific initialization properties.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the event was dispatched.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.GetAttributeAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            Returns element attribute value.
            </summary>
            <param name="name">Attribute name to get the value for.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the attribute was evaluated (or timeout), yielding the value or the attribute.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.GetInnerHtmlAsync(System.Nullable{System.Int32})">
            <summary>
            Resolves to the element.innerHTML.
            </summary>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the attribute was evaluated (or timeout), yielding the innerHTML of the element.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.GetInnerTextAsync(System.Nullable{System.Int32})">
            <summary>
            Resolves to the element.innerText.
            </summary>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the attribute was evaluated (or timeout), yielding the innerText of the element.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.GetTextContentAsync(System.Nullable{System.Int32})">
            <summary>
            Resolves to the element.textContent.
            </summary>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the attribute was evaluated (or timeout), yielding the textContent of the element.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.TypeAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Focuses the element, and sends a <c>keydown</c>, <c>keypress</c>/<c>input</c>, and <c>keyup</c> event for each character in the text.
            </summary>
            <param name="text">A text to type into a focused element.</param>
            <param name="delay">Delay between key press.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.</param>
            <remarks>
            To press a special key, like <c>Control</c> or <c>ArrowDown</c> use <see cref="M:PlaywrightSharp.IElementHandle.PressAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Boolean})"/>.
            </remarks>
            <example>
            <code>
            elementHandle.TypeAsync("#mytextarea", "Hello"); // Types instantly
            elementHandle.TypeAsync("#mytextarea", "World", new TypeOptions { Delay = 100 }); // Types slower, like a user
            </code>
            An example of typing into a text field and then submitting the form:
            <code>
            var elementHandle = await page.GetElementAsync("input");
            await elementHandle.TypeAsync("some text");
            await elementHandle.PressAsync("Enter");
            </code>
            </example>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is confirmed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.ScreenshotAsync(System.String,System.Boolean,System.Nullable{PlaywrightSharp.ScreenshotFormat},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Takes a screenshot of the element.
            </summary>
            <param name="path">The file path to save the image to.
             The screenshot type will be inferred from file extension.
            If path is a relative path, then it is resolved relative to current working directory.
            If no path is provided, the image won't be saved to the disk.</param>
            <param name="omitBackground">Hides default white background and allows capturing screenshots with transparency. Defaults to <c>false</c>.</param>
            <param name="type">Specify screenshot type, can be either jpeg or png. Defaults to 'png'.</param>
            <param name="quality">The quality of the image, between 0-100. Not applicable to png images.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that completes when the screenshot is done, yielding the screenshot as a <see cref="t:byte[]"/>.
            </returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.FillAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Focuses the element and triggers an `input` event after filling.
            If element is not a text `&lt;input&gt;`, `&lt;textarea&gt;` or `[contenteditable]` element, the method throws an error.
            </summary>
            <param name="value">Value to set for the `&lt;input&gt;`, `&lt;textarea&gt;` or `[contenteditable]` element.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the fill action is done.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.GetContentFrameAsync">
            <summary>
            Content frame for element handles referencing iframe nodes, or null otherwise.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the frame is resolved, yielding element's parent <see cref="T:PlaywrightSharp.IFrame" />.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.HoverAsync(PlaywrightSharp.Input.Modifier[],System.Nullable{System.Drawing.Point},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Scrolls element into view if needed, and then uses <see cref="P:PlaywrightSharp.IPage.Mouse"/> to hover over the center of the element.
            </summary>
            <param name="modifiers">Modifier keys to press. Ensures that only these modifiers are pressed during the click, and then restores current modifiers back. If not specified, currently pressed modifiers are used.</param>
            <param name="position">A point to click relative to the top-left corner of element padding box. If not specified, clicks to some visible point of the element.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="force">Whether to pass the actionability checks.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the element is successfully hovered.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.ScrollIntoViewIfNeededAsync(System.Nullable{System.Int32})">
            <summary>
            Tries to scroll element into view, unless it is completely visible as defined by <see href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"/>'s <b>ratio</b>.
            </summary>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the element is successfully scrolled into view.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.GetOwnerFrameAsync">
            <summary>
            Returns the frame containing the given element.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the frame is resolved, yielding element's owner <see cref="T:PlaywrightSharp.IFrame" />.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.GetBoundingBoxAsync">
            <summary>
            Gets the bounding box of the element (relative to the main frame), or null if the element is not visible.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the <see cref="T:PlaywrightSharp.Rect"/> is resolved, yielding element's <see cref="T:PlaywrightSharp.Rect"/>.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.ClickAsync(System.Int32,PlaywrightSharp.Input.MouseButton,System.Int32,PlaywrightSharp.Input.Modifier[],System.Nullable{System.Drawing.Point},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Scrolls element into view if needed, and then uses <see cref="P:PlaywrightSharp.IPage.Mouse"/> to click in the center of the element.
            </summary>
            <param name="delay">Time to wait between <c>mousedown</c> and <c>mouseup</c> in milliseconds. Defaults to 0.</param>
            <param name="button">Button to click. Details to <see cref="F:PlaywrightSharp.Input.MouseButton.Left"/>.</param>
            <param name="clickCount">Click count. Defaults to 1.</param>
            <param name="modifiers">Modifier keys to press. Ensures that only these modifiers are pressed during the click, and then restores current modifiers back. If not specified, currently pressed modifiers are used.</param>
            <param name="position">A point to click relative to the top-left corner of element padding box. If not specified, clicks to some visible point of the element.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="force">Whether to pass the actionability checks.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is confirmed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.DblClickAsync(System.Int32,PlaywrightSharp.Input.MouseButton,PlaywrightSharp.Input.Modifier[],System.Nullable{System.Drawing.Point},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Scrolls element into view if needed, and then uses <see cref="P:PlaywrightSharp.IPage.Mouse"/> to double click in the center of the element.
            </summary>
            <param name="delay">Time to wait between <c>mousedown</c> and <c>mouseup</c> in milliseconds. Defaults to 0.</param>
            <param name="button">Button to click. Details to <see cref="F:PlaywrightSharp.Input.MouseButton.Left"/>.</param>
            <param name="modifiers">Modifier keys to press. Ensures that only these modifiers are pressed during the click, and then restores current modifiers back. If not specified, currently pressed modifiers are used.</param>
            <param name="position">A point to click relative to the top-left corner of element padding box. If not specified, clicks to some visible point of the element.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="force">Whether to pass the actionability checks.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the element is successfully double clicked.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.SetInputFilesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Sets the value of the file input to these file paths or files. If some of the  <paramref name="file"/> are relative paths, then they are resolved relative to the <see cref="M:System.IO.Directory.GetCurrentDirectory"/>.
            </summary>
            <param name="file">The file path.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.</param>
            <remarks>
            This method expects <see cref="T:PlaywrightSharp.IElementHandle"/> to point to an <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input"/>.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the files are successfully set.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.SetInputFilesAsync(System.String[],System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Sets the value of the file input to these file paths or files. If some of the  <paramref name="files"/> are relative paths, then they are resolved relative to the <see cref="M:System.IO.Directory.GetCurrentDirectory"/>.
            </summary>
            <param name="files">File paths.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.</param>
            <remarks>
            This method expects <see cref="T:PlaywrightSharp.IElementHandle"/> to point to an <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input"/>.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the files are successfully set.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.SetInputFilesAsync(PlaywrightSharp.FilePayload,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Sets the value of the file input to these file paths or files. If some of the  <paramref name="file"/> are relative paths, then they are resolved relative to the <see cref="M:System.IO.Directory.GetCurrentDirectory"/>.
            </summary>
            <param name="file">The file payload.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.</param>
            <remarks>
            This method expects <see cref="T:PlaywrightSharp.IElementHandle"/> to point to an <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input"/>.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the files are successfully set.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.SetInputFilesAsync(PlaywrightSharp.FilePayload[],System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Sets the value of the file input to these file paths or files. If some of the  <paramref name="files"/> are relative paths, then they are resolved relative to the <see cref="M:System.IO.Directory.GetCurrentDirectory"/>.
            </summary>
            <param name="files">File payloads.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.</param>
            <remarks>
            This method expects <see cref="T:PlaywrightSharp.IElementHandle"/> to point to an <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input"/>.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the files are successfully set.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.QuerySelectorAsync(System.String)">
            <summary>
            The method runs <c>document.querySelector</c> within the element. If no element matches the selector, the return value resolve to <c>null</c>.
            </summary>
            <param name="selector">A selector to query element for.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that completes when the javascript function finishes, yielding an <see cref="T:PlaywrightSharp.IElementHandle"/>.
            </returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.QuerySelectorAllAsync(System.String)">
            <summary>
            The method runs <c>Array.from(document.querySelectorAll(selector))</c> within the element.
            </summary>
            <param name="selector">A selector to query element for.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that completes when the javascript function finishes, yielding an array of <see cref="T:PlaywrightSharp.IElementHandle"/>.
            </returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.EvalOnSelectorAsync(System.String,System.String)">
            <summary>
            This method runs <c>document.querySelector</c> within the page and passes it as the first argument to <paramref name="expression"/>.
            If there's no element matching selector, the method throws an error.
            </summary>
            <param name="selector">A selector to query element for.</param>
            <param name="expression">Script to be evaluated in browser context.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script finishes or the promise is resolved, yielding the result of the script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.EvalOnSelectorAsync(System.String,System.String,System.Object)">
            <summary>
            This method runs <c>document.querySelector</c> within the page and passes it as the first argument to <paramref name="expression"/>.
            If there's no element matching selector, the method throws an error.
            </summary>
            <param name="selector">A selector to query element for.</param>
            <param name="expression">Script to be evaluated in browser context.</param>
            <param name="arg">Arguments to pass to script.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script finishes or the promise is resolved, yielding the result of the script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.EvalOnSelectorAsync``1(System.String,System.String)">
            <summary>
            This method runs <c>document.querySelector</c> within the element and passes it as the first argument to <paramref name="expression"/>.
            If there's no element matching selector, the method throws an error.
            </summary>
            <typeparam name="T">Result type.</typeparam>
            <param name="selector">A selector to query element for.</param>
            <param name="expression">Script to be evaluated in browser context.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script finishes or the promise is resolved, yielding the result of the script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.EvalOnSelectorAsync``1(System.String,System.String,System.Object)">
            <summary>
            This method runs <c>document.querySelector</c> within the element and passes it as the first argument to <paramref name="expression"/>.
            If there's no element matching selector, the method throws an error.
            </summary>
            <typeparam name="T">Result type.</typeparam>
            <param name="selector">A selector to query element for.</param>
            <param name="expression">Script to be evaluated in browser context.</param>
            <param name="arg">Arguments to pass to script.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script finishes or the promise is resolved, yielding the result of the script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.EvalOnSelectorAllAsync(System.String,System.String)">
            <summary>
            This method runs <c>Array.from(document.querySelectorAll(selector))</c> within the page and passes it as the first argument to <paramref name="expression"/>.
            </summary>
            <param name="selector">A selector to query element for.</param>
            <param name="expression">Script to be evaluated in browser context.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script finishes or the promise is resolved, yielding the result of the script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.EvalOnSelectorAllAsync(System.String,System.String,System.Object)">
            <summary>
            This method runs <c>Array.from(document.querySelectorAll(selector))</c> within the page and passes it as the first argument to <paramref name="expression"/>.
            </summary>
            <param name="selector">A selector to query element for.</param>
            <param name="expression">Script to be evaluated in browser context.</param>
            <param name="arg">Arguments to pass to script.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script finishes or the promise is resolved, yielding the result of the script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.EvalOnSelectorAllAsync``1(System.String,System.String)">
            <summary>
            This method runs <c>Array.from(document.querySelectorAll(selector))</c> within the element and passes it as the first argument to <paramref name="expression"/>.
            </summary>
            <typeparam name="T">Result type.</typeparam>
            <param name="selector">A selector to query element for.</param>
            <param name="expression">Script to be evaluated in browser context.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script finishes or the promise is resolved, yielding the result of the script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.EvalOnSelectorAllAsync``1(System.String,System.String,System.Object)">
            <summary>
            This method runs <c>Array.from(document.querySelectorAll(selector))</c> within the element and passes it as the first argument to <paramref name="expression"/>.
            </summary>
            <typeparam name="T">Result type.</typeparam>
            <param name="selector">A selector to query element for.</param>
            <param name="expression">Script to be evaluated in browser context.</param>
            <param name="arg">Arguments to pass to script.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script finishes or the promise is resolved, yielding the result of the script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.FocusAsync">
            <summary>
            Calls focus on the element.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is confirmed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.SelectOptionAsync(System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Triggers a change and input event once all, unselecting all the selected elements.
            </summary>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> the completes when the value have been selected, yielding an array of option values that have been successfully selected.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.SelectOptionAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Triggers a change and input event once all the provided options have been selected.
            If there's no <![CDATA[<select>]]> element matching selector, the method throws an error.
            </summary>
            <param name="value">Value to select. If the <![CDATA[<select>]]> has the multiple attribute.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> the completes when the value have been selected, yielding an array of option values that have been successfully selected.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.SelectOptionAsync(PlaywrightSharp.SelectOption,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Triggers a change and input event once all the provided options have been selected.
            If there's no <![CDATA[<select>]]> element matching selector, the method throws an error.
            </summary>
            <param name="value">Value to select. If the <![CDATA[<select>]]> has the multiple attribute.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> the completes when the value have been selected, yielding an array of option values that have been successfully selected.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.SelectOptionAsync(PlaywrightSharp.IElementHandle,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Triggers a change and input event once all the provided options have been selected.
            If there's no <![CDATA[<select>]]> element matching selector, the method throws an error.
            </summary>
            <param name="value">Value to select. If the <![CDATA[<select>]]> has the multiple attribute.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> the completes when the value have been selected, yielding an array of option values that have been successfully selected.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.SelectOptionAsync(System.String[],System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Triggers a change and input event once all the provided options have been selected.
            If there's no <![CDATA[<select>]]> element matching selector, the method throws an error.
            </summary>
            <param name="values">Values of options to select. If the <![CDATA[<select>]]> has the multiple attribute,
            all values are considered, otherwise only the first one is taken into account.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> the completes when the value have been selected, yielding an array of option values that have been successfully selected.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.SelectOptionAsync(PlaywrightSharp.SelectOption[],System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Triggers a change and input event once all the provided options have been selected.
            If there's no <![CDATA[<select>]]> element matching selector, the method throws an error.
            </summary>
            <param name="values">Values of options to select. If the <![CDATA[<select>]]> has the multiple attribute,
            all values are considered, otherwise only the first one is taken into account.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> the completes when the value have been selected, yielding an array of option values that have been successfully selected.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.SelectOptionAsync(PlaywrightSharp.IElementHandle[],System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Triggers a change and input event once all the provided options have been selected.
            If there's no <![CDATA[<select>]]> element matching selector, the method throws an error.
            </summary>
            <param name="values">Values of options to select. If the <![CDATA[<select>]]> has the multiple attribute,
            all values are considered, otherwise only the first one is taken into account.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> the completes when the value have been selected, yielding an array of option values that have been successfully selected.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.SelectOptionAsync(System.String[])">
            <summary>
            Triggers a change and input event once all the provided options have been selected.
            If there's no <![CDATA[<select>]]> element matching selector, the method throws an error.
            </summary>
            <param name="values">Values of options to select. If the <![CDATA[<select>]]> has the multiple attribute,
            all values are considered, otherwise only the first one is taken into account.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> the completes when the value have been selected, yielding an array of option values that have been successfully selected.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.SelectOptionAsync(PlaywrightSharp.SelectOption[])">
            <summary>
            Triggers a change and input event once all the provided options have been selected.
            If there's no <![CDATA[<select>]]> element matching selector, the method throws an error.
            </summary>
            <param name="values">Values of options to select. If the <![CDATA[<select>]]> has the multiple attribute,
            all values are considered, otherwise only the first one is taken into account.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> the completes when the value have been selected, yielding an array of option values that have been successfully selected.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.SelectOptionAsync(PlaywrightSharp.IElementHandle[])">
            <summary>
            Triggers a change and input event once all the provided options have been selected.
            If there's no <![CDATA[<select>]]> element matching selector, the method throws an error.
            </summary>
            <param name="values">Values of options to select. If the <![CDATA[<select>]]> has the multiple attribute,
            all values are considered, otherwise only the first one is taken into account.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> the completes when the value have been selected, yielding an array of option values that have been successfully selected.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.CheckAsync(System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            This method fetches an element with selector, if element is not already checked, it scrolls it into view if needed, and then uses <see cref="M:PlaywrightSharp.IPage.ClickAsync(System.String,System.Int32,PlaywrightSharp.Input.MouseButton,System.Int32,PlaywrightSharp.Input.Modifier[],System.Nullable{System.Drawing.Point},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})"/> to click in the center of the element.
            If there's no element matching selector, the method waits until a matching element appears in the DOM.
            If the element is detached during the actionability checks, the action is retried.
            </summary>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="force">Whether to pass the actionability checks.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the element is successfully clicked.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.UncheckAsync(System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            This method fetches an element with selector, if element is not already unchecked, it scrolls it into view if needed, and then uses <see cref="M:PlaywrightSharp.IPage.ClickAsync(System.String,System.Int32,PlaywrightSharp.Input.MouseButton,System.Int32,PlaywrightSharp.Input.Modifier[],System.Nullable{System.Drawing.Point},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})"/> to click in the center of the element.
            If there's no element matching selector, the method waits until a matching element appears in the DOM.
            If the element is detached during the actionability checks, the action is retried.
            </summary>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="force">Whether to pass the actionability checks.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the element is successfully clicked.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.WaitForSelectorAsync(System.String,System.Nullable{PlaywrightSharp.WaitForState},System.Nullable{System.Int32})">
            <summary>
            Waits for a selector to be added to the DOM.
            </summary>
            <param name="selector">A selector of an element to wait for, relative to the <see cref="T:PlaywrightSharp.IElementHandle"/>.</param>
            <param name="state">Wait for element to become in the specified state.</param>
            <param name="timeout">
            Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.
            </param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when element specified by selector string is added to DOM, yielding the <see cref="T:PlaywrightSharp.IElementHandle"/> to wait for.
            Resolves to `null` if waiting for `hidden: true` and selector is not found in DOM.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.WaitForElementStateAsync(PlaywrightSharp.ElementState,System.Nullable{System.Int32})">
            <summary>
            Depending on the state parameter, this method waits for one of the actionability checks to pass.
            This method throws when the element is detached while waiting, unless waiting for the "hidden" state.
            </summary>
            <param name="state">State to wait for.</param>
            <param name="timeout">
            Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.
            </param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the wait condition matches or timed out.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.TapAsync(System.Nullable{System.Drawing.Point},PlaywrightSharp.Input.Modifier[],System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            <para>This method taps the element by performing the following steps:</para>
            <para>Wait for actionability checks on the element, unless force option is set.
            Scroll the element into view if needed.
            Use page.touchscreen to tap in the center of the element, or the specified position.
            Wait for initiated navigations to either succeed or fail, unless noWaitAfter option is set.
            If the element is detached from the DOM at any moment during the action, this method rejects.
            </para>
            <para>When all steps combined have not finished during the specified timeout, this method rejects with a TimeoutError.
            Passing zero timeout disables this.</para>
            </summary>
            <param name="position">A point to tap relative to the top-left corner of element padding box. If not specified, taps some visible point of the element.</param>
            <param name="modifiers">Modifier keys to press. Ensures that only these modifiers are pressed during the tap, and then restores current modifiers back. If not specified, currently pressed modifiers are used.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <param name="force">Whether to bypass the actionability checks. Defaults to false.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and
            for pages to start loading. You can opt out of waiting via setting this flag.
            You would only need this option in the exceptional cases such as navigating to inaccessible pages.
            Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is processed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.IsCheckedAsync">
            <summary>
            Returns whether the element is checked. Throws if the element is not a checkbox or radio input.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is processed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.IsDisabledAsync">
            <summary>
            Returns whether the element is disabled, the opposite of <see cref="M:PlaywrightSharp.IElementHandle.IsEnabledAsync"/>.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is processed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.IsEditableAsync">
            <summary>
            Returns whether the element is editable.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is processed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.IsEnabledAsync">
            <summary>
            Returns whether the element is enabled.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is processed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.IsHiddenAsync">
            <summary>
            Returns whether the element is hidden, the opposite of <see cref="M:PlaywrightSharp.IElementHandle.IsVisibleAsync"/>.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is processed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IElementHandle.IsVisibleAsync">
            <summary>
            Returns whether the element is visible.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is processed by the browser.</returns>
        </member>
        <member name="T:PlaywrightSharp.IEvent">
            <summary>
            Events for <see cref="M:PlaywrightSharp.IPage.WaitForEventAsync``1(PlaywrightSharp.PlaywrightEvent{``0},System.Func{``0,System.Boolean},System.Nullable{System.Int32})"/> and <see cref="M:PlaywrightSharp.IBrowserContext.WaitForEventAsync``1(PlaywrightSharp.PlaywrightEvent{``0},System.Func{``0,System.Boolean},System.Nullable{System.Int32})"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IEvent.Name">
            <summary>
            Event Name.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.IFrame">
            <summary>
            At every point of time, page exposes its current frame tree via the <see cref="P:PlaywrightSharp.IPage.MainFrame"/> and <see cref="P:PlaywrightSharp.IFrame.ChildFrames"/> methods.
            </summary>
            <example>
            <code>
            <![CDATA[
            var frame = page.Frames.FirstOrDefault(frame => frame.Name == "myframe");
            var text = await frame.QuerySelectorEvalAsync(".selector", "element => element.textContent");
            Console.WriteLine(text);
            ]]>
            </code>
            </example>
        </member>
        <member name="P:PlaywrightSharp.IFrame.ChildFrames">
            <summary>
            Child frames of the this frame.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IFrame.Name">
            <summary>
            Gets the frame's name attribute as specified in the tag.
            If the name is empty, returns the id attribute instead.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IFrame.Url">
            <summary>
            Gets the frame's url.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IFrame.ParentFrame">
            <summary>
            Gets the parent <see cref="T:PlaywrightSharp.IFrame"/>, if any. Detached frames and main frames return <c>null</c>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IFrame.IsDetached">
            <summary>
            Gets a value indicating if the frame is detached or not.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IFrame.Page">
            <summary>
            Owner page.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.IFrame.GetFrameElementAsync">
            <summary>
            This is an inverse of <see cref="M:PlaywrightSharp.IElementHandle.GetContentFrameAsync"/>. Note that returned handle actually belongs to the parent frame.
            This method throws an error if the frame has been detached before frameElement() returns.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the element is resolved, yielding the corresponding <see cref="T:PlaywrightSharp.IElementHandle"/>.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.GetTitleAsync">
            <summary>
            Returns page's title.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the action completed, yielding the frame's title.</returns>
            <seealso cref="M:PlaywrightSharp.IPage.GetTitleAsync"/>
        </member>
        <member name="M:PlaywrightSharp.IFrame.GoToAsync(System.String,System.Nullable{PlaywrightSharp.LifecycleEvent},System.String,System.Nullable{System.Int32})">
            <summary>
            Navigates to an URL.
            </summary>
            <param name="url">URL to navigate page to. The url should include scheme, e.g. https://.</param>
            <param name="waitUntil">When to consider navigation succeeded, defaults to <see cref="F:PlaywrightSharp.LifecycleEvent.Load"/>.</param>
            <param name="referer">Referer header value. If provided it will take prefrence over the referer header value set by <see cref="M:PlaywrightSharp.IPage.SetExtraHTTPHeadersAsync(System.Collections.Generic.Dictionary{System.String,System.String})"/>.</param>
            <param name="timeout">Maximum navigation time in milliseconds, defaults to 30 seconds, pass <c>0</c> to disable timeout.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that completes with resolves to the main resource response.
            In case of multiple redirects, the navigation will resolve with the response of the last redirect.
            </returns>
            <remarks>
            <see cref="M:PlaywrightSharp.IPage.GoToAsync(System.String,System.Nullable{PlaywrightSharp.LifecycleEvent},System.String,System.Nullable{System.Int32})"/> will throw an error if:
            * There's an SSL error (e.g. in case of self-signed certificates).
            * Target URL is invalid.
            * The timeout is exceeded during navigation.
            * The remote server does not respond or is unreachable.
            * The main resource failed to load.
            <para/>
            <see cref="M:PlaywrightSharp.IPage.GoToAsync(System.String,System.Nullable{PlaywrightSharp.LifecycleEvent},System.String,System.Nullable{System.Int32})"/> will not throw an error when any valid HTTP status code is returned by the remote server, including 404 "Not Found" and 500 "Internal Server Error".
            The status code for such responses can be retrieved by calling response.status().
            <para/>
            NOTE <see cref="M:PlaywrightSharp.IPage.GoToAsync(System.String,System.Nullable{PlaywrightSharp.LifecycleEvent},System.String,System.Nullable{System.Int32})"/> either throws an error or returns a main resource response.
            The only exceptions are navigation to about:blank or navigation to the same URL with a different hash, which would succeed and return null.
            <para/>
            NOTE Headless mode doesn't support navigation to a PDF document. See the upstream issue.
            <para/>
            Shortcut for <see cref="M:PlaywrightSharp.IFrame.GoToAsync(System.String,System.Nullable{PlaywrightSharp.LifecycleEvent},System.String,System.Nullable{System.Int32})"/>.
            </remarks>
        </member>
        <member name="M:PlaywrightSharp.IFrame.SetContentAsync(System.String,System.Nullable{PlaywrightSharp.LifecycleEvent},System.Nullable{System.Int32})">
            <summary>
            Sets the HTML markup to the frame.
            </summary>
            <param name="html">HTML markup to assign to the page.</param>
            <param name="waitUntil">When to consider navigation succeeded, defaults to <see cref="F:PlaywrightSharp.LifecycleEvent.Load"/>.</param>
            <param name="timeout">Maximum navigation time in milliseconds, defaults to 30 seconds, pass <c>0</c> to disable timeout.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the javascript code executing injected the HTML finishes.</returns>
            <seealso cref="M:PlaywrightSharp.IPage.SetContentAsync(System.String,System.Nullable{PlaywrightSharp.LifecycleEvent},System.Nullable{System.Int32})"/>
        </member>
        <member name="M:PlaywrightSharp.IFrame.GetContentAsync">
            <summary>
            Gets the full HTML contents of the page, including the doctype.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the html content is retrieved, yielding the HTML content.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.AddScriptTagAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Adds a <c><![CDATA[<script>]]></c> tag into the frame with the desired url or content.
            </summary>
            <param name="url">URL of a script to be added.</param>
            <param name="path">Path to the JavaScript file to be injected into frame. If path is a relative path, then it is resolved relative to current working directory.</param>
            <param name="content">Raw JavaScript content to be injected into frame.</param>
            <param name="type">Script type. Use 'module' in order to load a Javascript ES6 module.</param>
            <remarks>
            Shortcut for <c>page.MainFrame.AddScriptTagAsync(options)</c>.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the tag is added, yielding the added tag as an <see cref="T:PlaywrightSharp.IElementHandle"/> when the script's onload fires or when the script content was injected into frame.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.AddStyleTagAsync(System.String,System.String,System.String)">
            <summary>
            Adds a <c><![CDATA[<link rel="stylesheet">]]></c> tag into the frame with the desired url or a <c><![CDATA[<link rel="stylesheet">]]></c> tag with the content.
            </summary>
            <param name="url">URL of the link tag.</param>
            <param name="path">Path to the CSS file to be injected into frame. If path is a relative path, then it is resolved relative to current working directory.</param>
            <param name="content">Raw CSS content to be injected into frame.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the stylesheet's onload fires or when the CSS content was injected into frame, yieling the added <see cref="T:PlaywrightSharp.IElementHandle"/>.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.EvaluateAsync``1(System.String)">
            <summary>
            Executes a script in the frame context.
            </summary>
            <typeparam name="T">Return type.</typeparam>
            <param name="expression">Script to be evaluated in browser context.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <seealso cref="M:PlaywrightSharp.IPage.EvaluateAsync``1(System.String,System.Object)"/>
            <returns>Task that completes when the script finishes or the promise is resolved, yielding the result of the script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.EvaluateAsync(System.String)">
            <summary>
            Executes a script in the frame context.
            </summary>
            <param name="expression">Script to be evaluated in browser context.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <seealso cref="M:PlaywrightSharp.IPage.EvaluateAsync(System.String)"/>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script finishes or the promise is resolved, yielding the result of the script as an row Json element.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.EvaluateAsync``1(System.String,System.Object)">
            <summary>
            Executes a script in the frame context.
            </summary>
            <typeparam name="T">Return type.</typeparam>
            <param name="expression">Script to be evaluated in browser context.</param>
            <param name="arg">Arguments to pass to script.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <seealso cref="M:PlaywrightSharp.IPage.EvaluateAsync``1(System.String,System.Object)"/>
            <returns>Task that completes when the script finishes or the promise is resolved, yielding the result of the script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.EvaluateAsync(System.String,System.Object)">
            <summary>
            Executes a script in the frame context.
            </summary>
            <param name="expression">Script to be evaluated in browser context.</param>
            <param name="arg">Arguments to pass to script.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <seealso cref="M:PlaywrightSharp.IPage.EvaluateAsync(System.String,System.Object)"/>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script finishes or the promise is resolved, yielding the result of the script as an row Json element.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.EvaluateHandleAsync(System.String)">
            <summary>
            Executes a function that returns a <see cref="T:PlaywrightSharp.IJSHandle"/>.
            </summary>
            <param name="expression">Function to be evaluated in the frame context.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script finishes or the promise is resolved, yielding the result of the script as a <see cref="T:PlaywrightSharp.IJSHandle"/>.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.EvaluateHandleAsync(System.String,System.Object)">
            <summary>
            Executes a function that returns a <see cref="T:PlaywrightSharp.IJSHandle"/>.
            </summary>
            <param name="expression">Function to be evaluated in the frame context.</param>
            <param name="arg">Arguments to pass to script.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script finishes or the promise is resolved, yielding the result of the script as a <see cref="T:PlaywrightSharp.IJSHandle"/>.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.FillAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            <![CDATA[
            This method focuses the element and triggers an input event after filling. If there's no text <input>, <textarea> or [contenteditable] element matching selector, the method throws an error.
            ]]>
            </summary>
            <param name="selector">A selector to query page for.</param>
            <param name="value"><![CDATA[Value to fill for the <input>, <textarea> or [contenteditable] element]]></param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the fill action is done.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.WaitForTimeoutAsync(System.Int32)">
            <summary>
            Returns a Task that resolves after the timeout.
            </summary>
            <param name="timeout">A timeout to wait for.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the timeout is hit.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.WaitForSelectorAsync(System.String,System.Nullable{PlaywrightSharp.WaitForState},System.Nullable{System.Int32})">
            <summary>
            Waits for a selector to be added to the DOM.
            </summary>
            <param name="selector">A selector of an element to wait for.</param>
            <param name="state">Wait for element to become in the specified state.</param>
            <param name="timeout">
            Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.
            </param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when element specified by selector string is added to DOM, yielding the <see cref="T:PlaywrightSharp.IElementHandle"/> to wait for.
            Resolves to `null` if waiting for `hidden: true` and selector is not found in DOM.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.WaitForFunctionAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            Waits for a function to be evaluated to a truthy value.
            </summary>
            <param name="expression">Function to be evaluated in browser context.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that resolves when the <c>script</c> returns a truthy value, yielding a <see cref="T:PlaywrightSharp.IJSHandle"/>.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.WaitForFunctionAsync(System.String,PlaywrightSharp.Polling,System.Nullable{System.Int32})">
            <summary>
            Waits for a function to be evaluated to a truthy value.
            </summary>
            <param name="expression">Function to be evaluated in browser context.</param>
            <param name="polling">An interval at which the <c>pageFunction</c> is executed. defaults to <see cref="F:PlaywrightSharp.Polling.Raf"/>.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that resolves when the <c>script</c> returns a truthy value, yielding a <see cref="T:PlaywrightSharp.IJSHandle"/>.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.WaitForFunctionAsync(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Waits for a function to be evaluated to a truthy value.
            </summary>
            <param name="expression">Function to be evaluated in browser context.</param>
            <param name="polling">An interval at which the function is executed. If no value is specified will use <paramref name="polling"/>.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that resolves when the <c>script</c> returns a truthy value, yielding a <see cref="T:PlaywrightSharp.IJSHandle"/>.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.WaitForFunctionAsync(System.String,System.Object,System.Nullable{System.Int32})">
            <summary>
            Waits for a function to be evaluated to a truthy value.
            </summary>
            <param name="expression">Function to be evaluated in browser context.</param>
            <param name="arg">Arguments to pass to <c>script</c>.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that resolves when the <c>script</c> returns a truthy value, yielding a <see cref="T:PlaywrightSharp.IJSHandle"/>.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.WaitForFunctionAsync(System.String,System.Object,PlaywrightSharp.Polling,System.Nullable{System.Int32})">
            <summary>
            Waits for a function to be evaluated to a truthy value.
            </summary>
            <param name="expression">Function to be evaluated in browser context.</param>
            <param name="arg">Arguments to pass to <c>script</c>.</param>
            <param name="polling">An interval at which the <c>pageFunction</c> is executed. defaults to <see cref="F:PlaywrightSharp.Polling.Raf"/>.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that resolves when the <c>script</c> returns a truthy value, yielding a <see cref="T:PlaywrightSharp.IJSHandle"/>.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.WaitForFunctionAsync(System.String,System.Object,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Waits for a function to be evaluated to a truthy value.
            </summary>
            <param name="expression">Function to be evaluated in browser context.</param>
            <param name="arg">Arguments to pass to <c>script</c>.</param>
            <param name="polling">An interval at which the function is executed. If no value is specified will use <paramref name="polling"/>.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that resolves when the <c>script</c> returns a truthy value, yielding a <see cref="T:PlaywrightSharp.IJSHandle"/>.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.QuerySelectorAsync(System.String)">
            <summary>
            Queries frame for the selector. If there's no such element within the frame, the method will resolve to <c>null</c>.
            </summary>
            <param name="selector">Selector to query frame for.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the selector is found (or failed), yielding the <see cref="T:PlaywrightSharp.IElementHandle"/> pointing to the frame element.</returns>
            <seealso cref="M:PlaywrightSharp.IPage.QuerySelectorAsync(System.String)"/>
        </member>
        <member name="M:PlaywrightSharp.IFrame.QuerySelectorAllAsync(System.String)">
            <summary>
            The method runs <c>Array.from(document.querySelectorAll(selector))</c> within the page.
            </summary>
            <param name="selector">A selector to query page for.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that completes when the javascript function finishes, yielding an array of <see cref="T:PlaywrightSharp.IElementHandle"/>.
            </returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.EvalOnSelectorAllAsync(System.String,System.String)">
            <summary>
            This method runs <c>Array.from(document.querySelectorAll(selector))</c> within the frame and passes it as the first argument to expression.
            </summary>
            <param name="selector">A selector to query frame for.</param>
            <param name="expression">Script to be evaluated in browser context.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script finishes or the promise is resolved, yielding the result of the script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.EvalOnSelectorAllAsync``1(System.String,System.String)">
            <summary>
            This method runs <c>Array.from(document.querySelectorAll(selector))</c> within the frame and passes it as the first argument to expression.
            </summary>
            <typeparam name="T">Result type.</typeparam>
            <param name="selector">A selector to query frame for.</param>
            <param name="expression">Script to be evaluated in browser context.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script finishes or the promise is resolved, yielding the result of the script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.EvalOnSelectorAllAsync(System.String,System.String,System.Object)">
            <summary>
            This method runs <c>Array.from(document.querySelectorAll(selector))</c> within the frame and passes it as the first argument to expression.
            </summary>
            <param name="selector">A selector to query frame for.</param>
            <param name="expression">Script to be evaluated in browser context.</param>
            <param name="arg">Arguments to pass to script.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script finishes or the promise is resolved, yielding the result of the script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.EvalOnSelectorAllAsync``1(System.String,System.String,System.Object)">
            <summary>
            This method runs <c>Array.from(document.querySelectorAll(selector))</c> within the frame and passes it as the first argument to expression.
            </summary>
            <typeparam name="T">Result type.</typeparam>
            <param name="selector">A selector to query frame for.</param>
            <param name="expression">Script to be evaluated in browser context.</param>
            <param name="arg">Arguments to pass to script.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script finishes or the promise is resolved, yielding the result of the script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.ClickAsync(System.String,System.Int32,PlaywrightSharp.Input.MouseButton,System.Int32,PlaywrightSharp.Input.Modifier[],System.Nullable{System.Drawing.Point},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Fetches an element with <paramref name="selector"/>, scrolls it into view if needed, and then uses <see cref="P:PlaywrightSharp.IPage.Mouse"/> to click in the center of the element.
            </summary>
            <param name="selector">A selector to search for element to click. If there are multiple elements satisfying the selector, the first will be clicked.</param>
            <param name="delay">Time to wait between <c>mousedown</c> and <c>mouseup</c> in milliseconds. Defaults to 0.</param>
            <param name="button">Button to click. Details to <see cref="F:PlaywrightSharp.Input.MouseButton.Left"/>.</param>
            <param name="clickCount">Click count. Defaults to 1.</param>
            <param name="modifiers">Modifier keys to press. Ensures that only these modifiers are pressed during the click, and then restores current modifiers back. If not specified, currently pressed modifiers are used.</param>
            <param name="position">A point to click relative to the top-left corner of element padding box. If not specified, clicks to some visible point of the element.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="force">Whether to pass the actionability checks.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the element matching <paramref name="selector"/> is successfully clicked.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.DblClickAsync(System.String,System.Int32,PlaywrightSharp.Input.MouseButton,PlaywrightSharp.Input.Modifier[],System.Nullable{System.Drawing.Point},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Fetches an element with <paramref name="selector"/>, scrolls it into view if needed, and then uses <see cref="P:PlaywrightSharp.IPage.Mouse"/> to double click in the center of the element.
            </summary>
            <param name="selector">A selector to search for element to click. If there are multiple elements satisfying the selector, the first will be clicked.</param>
            <param name="delay">Time to wait between <c>mousedown</c> and <c>mouseup</c> in milliseconds. Defaults to 0.</param>
            <param name="button">Button to click. Details to <see cref="F:PlaywrightSharp.Input.MouseButton.Left"/>.</param>
            <param name="modifiers">Modifier keys to press. Ensures that only these modifiers are pressed during the click, and then restores current modifiers back. If not specified, currently pressed modifiers are used.</param>
            <param name="position">A point to click relative to the top-left corner of element padding box. If not specified, clicks to some visible point of the element.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="force">Whether to pass the actionability checks.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the element matching <paramref name="selector"/> is successfully double clicked.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.EvalOnSelectorAsync(System.String,System.String,System.Object)">
            <summary>
            This method runs document.querySelector within the page and passes it as the first argument to expression.
            If there's no element matching selector, the method throws an error.
            </summary>
            <param name="selector">A selector to query page for.</param>
            <param name="expression">Script to be evaluated in browser context.</param>
            <param name="arg">Arguments to pass to script.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script finishes or the promise is resolved, yielding the result of the script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.EvalOnSelectorAsync``1(System.String,System.String,System.Object)">
            <summary>
            This method runs document.querySelector within the page and passes it as the first argument to expression.
            If there's no element matching selector, the method throws an error.
            </summary>
            <typeparam name="T">Result type.</typeparam>
            <param name="selector">A selector to query page for.</param>
            <param name="expression">Script to be evaluated in browser context.</param>
            <param name="arg">Arguments to pass to script.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script finishes or the promise is resolved, yielding the result of the script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.EvalOnSelectorAsync(System.String,System.String)">
            <summary>
            This method runs document.querySelector within the page and passes it as the first argument to expression.
            If there's no element matching selector, the method throws an error.
            </summary>
            <param name="selector">A selector to query page for.</param>
            <param name="expression">Script to be evaluated in browser context.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script finishes or the promise is resolved, yielding the result of the script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.EvalOnSelectorAsync``1(System.String,System.String)">
            <summary>
            This method runs document.querySelector within the page and passes it as the first argument to expression.
            If there's no element matching selector, the method throws an error.
            </summary>
            <typeparam name="T">Result type.</typeparam>
            <param name="selector">A selector to query page for.</param>
            <param name="expression">Script to be evaluated in browser context.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script finishes or the promise is resolved, yielding the result of the script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.WaitForNavigationAsync(System.Nullable{PlaywrightSharp.LifecycleEvent},System.Nullable{System.Int32})">
            <summary>
            This resolves when the frame navigates to a new URL or reloads.
            It is useful for when you run code which will indirectly cause the page to navigate.
            </summary>
            <param name="waitUntil">When to consider navigation succeeded, defaults to <see cref="F:PlaywrightSharp.LifecycleEvent.Load"/>.</param>
            <param name="timeout">Maximum navigation time in milliseconds, defaults to 30 seconds, pass <c>0</c> to disable timeout.</param>
            <returns>Task which resolves to the main resource response.
            In case of multiple redirects, the navigation will resolve with the response of the last redirect.
            In case of navigation to a different anchor or navigation due to History API usage, the navigation will resolve with `null`.
            </returns>
            <remarks>
            Usage of the <c>History API</c> <see href="https://developer.mozilla.org/en-US/docs/Web/API/History_API"/> to change the URL is considered a navigation.
            </remarks>
            <example>
            <code>
            <![CDATA[
            var navigationTask = page.WaitForNavigationAsync();
            await page.ClickAsync("a.my-link");
            await navigationTask;
            ]]>
            </code>
            </example>
        </member>
        <member name="M:PlaywrightSharp.IFrame.WaitForNavigationAsync(System.String,System.Nullable{PlaywrightSharp.LifecycleEvent},System.Nullable{System.Int32})">
            <summary>
            This resolves when the frame navigates to a new URL or reloads.
            It is useful for when you run code which will indirectly cause the page to navigate.
            </summary>
            <param name="url">Wait for this specific URL.</param>
            <param name="waitUntil">When to consider navigation succeeded, defaults to <see cref="F:PlaywrightSharp.LifecycleEvent.Load"/>.</param>
            <param name="timeout">Maximum navigation time in milliseconds, defaults to 30 seconds, pass <c>0</c> to disable timeout.</param>
            <returns>Task which resolves to the main resource response.
            In case of multiple redirects, the navigation will resolve with the response of the last redirect.
            In case of navigation to a different anchor or navigation due to History API usage, the navigation will resolve with `null`.
            </returns>
            <remarks>
            Usage of the <c>History API</c> <see href="https://developer.mozilla.org/en-US/docs/Web/API/History_API"/> to change the URL is considered a navigation.
            </remarks>
            <example>
            <code>
            <![CDATA[
            var navigationTask = page.WaitForNavigationAsync();
            await page.ClickAsync("a.my-link");
            await navigationTask;
            ]]>
            </code>
            </example>
        </member>
        <member name="M:PlaywrightSharp.IFrame.WaitForNavigationAsync(System.Text.RegularExpressions.Regex,System.Nullable{PlaywrightSharp.LifecycleEvent},System.Nullable{System.Int32})">
            <summary>
            This resolves when the frame navigates to a new URL or reloads.
            It is useful for when you run code which will indirectly cause the page to navigate.
            </summary>
            <param name="url">Wait for this specific URL Regex.</param>
            <param name="waitUntil">When to consider navigation succeeded, defaults to <see cref="F:PlaywrightSharp.LifecycleEvent.Load"/>.</param>
            <param name="timeout">Maximum navigation time in milliseconds, defaults to 30 seconds, pass <c>0</c> to disable timeout.</param>
            <returns>Task which resolves to the main resource response.
            In case of multiple redirects, the navigation will resolve with the response of the last redirect.
            In case of navigation to a different anchor or navigation due to History API usage, the navigation will resolve with `null`.
            </returns>
            <remarks>
            Usage of the <c>History API</c> <see href="https://developer.mozilla.org/en-US/docs/Web/API/History_API"/> to change the URL is considered a navigation.
            </remarks>
            <example>
            <code>
            <![CDATA[
            var navigationTask = page.WaitForNavigationAsync();
            await page.ClickAsync("a.my-link");
            await navigationTask;
            ]]>
            </code>
            </example>
        </member>
        <member name="M:PlaywrightSharp.IFrame.WaitForNavigationAsync(System.Func{System.String,System.Boolean},System.Nullable{PlaywrightSharp.LifecycleEvent},System.Nullable{System.Int32})">
            <summary>
            This resolves when the frame navigates to a new URL or reloads.
            It is useful for when you run code which will indirectly cause the page to navigate.
            </summary>
            <param name="url">Wait for this specific URL that matches the function condition.</param>
            <param name="waitUntil">When to consider navigation succeeded, defaults to <see cref="F:PlaywrightSharp.LifecycleEvent.Load"/>.</param>
            <param name="timeout">Maximum navigation time in milliseconds, defaults to 30 seconds, pass <c>0</c> to disable timeout.</param>
            <returns>Task which resolves to the main resource response.
            In case of multiple redirects, the navigation will resolve with the response of the last redirect.
            In case of navigation to a different anchor or navigation due to History API usage, the navigation will resolve with `null`.
            </returns>
            <remarks>
            Usage of the <c>History API</c> <see href="https://developer.mozilla.org/en-US/docs/Web/API/History_API"/> to change the URL is considered a navigation.
            </remarks>
            <example>
            <code>
            <![CDATA[
            var navigationTask = page.WaitForNavigationAsync();
            await page.ClickAsync("a.my-link");
            await navigationTask;
            ]]>
            </code>
            </example>
        </member>
        <member name="M:PlaywrightSharp.IFrame.FocusAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            Fetches an element with <paramref name="selector"/> and focuses it.
            </summary>
            <param name="selector">A selector to search for element to focus. If there are multiple elements satisfying the selector, the first will be focused.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the the element matching <paramref name="selector"/> is successfully focused.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.HoverAsync(System.String,System.Nullable{System.Drawing.Point},PlaywrightSharp.Input.Modifier[],System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Fetches an element with <paramref name="selector"/>, scrolls it into view if needed, and then uses <see cref="T:PlaywrightSharp.Mouse"/> to hover over the center of the element.
            </summary>
            <param name="selector">A selector to search for element to hover. If there are multiple elements satisfying the selector, the first will be hovered.</param>
            <param name="position">A point to hover relative to the top-left corner of element padding box. If not specified, hovers over some visible point of the element.</param>
            <param name="modifiers">Modifier keys to press. Ensures that only these modifiers are pressed during the hover, and then restores current modifiers back. If not specified, currently pressed modifiers are used.</param>
            <param name="force">Whether to bypass the actionability checks. Defaults to false.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the element matching <paramref name="selector"/> is successfully hovered.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.TypeAsync(System.String,System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Sends a <c>keydown</c>, <c>keypress</c>/<c>input</c>, and <c>keyup</c> event for each character in the text.
            </summary>
            <param name="selector">A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used.</param>
            <param name="text">A text to type into a focused element.</param>
            <param name="delay">Time to wait between <c>keydown</c> and <c>keyup</c> in milliseconds. Defaults to 0.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <remarks>
            To press a special key, like <c>Control</c> or <c>ArrowDown</c> use <see cref="M:PlaywrightSharp.IKeyboard.PressAsync(System.String,System.Int32)"/>.
            </remarks>
            <example>
            <code>
            await page.TypeAsync("#mytextarea", "Hello"); // Types instantly
            await page.TypeAsync("#mytextarea", "World", new TypeOptions { Delay = 100 }); // Types slower, like a user
            </code>
            </example>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the type message is confirmed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.PressAsync(System.String,System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Focuses the element, and then sends a <c>keydown</c>, <c>keypress</c>/<c>input</c>, and <c>keyup</c> event for each character in the text.
            </summary>
            <param name="selector">A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used.</param>
            <param name="key">Name of the key to press or a character to generate, such as `ArrowLeft or `a`.</param>
            <param name="delay">Time to wait between <c>keydown</c> and <c>keyup</c> in milliseconds. Defaults to 0.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the type message is confirmed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.SetInputFilesAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Sets the value of the file input to these file paths or files. If some of the  <paramref name="file"/> are relative paths, then they are resolved relative to the <see cref="M:System.IO.Directory.GetCurrentDirectory"/>.
            </summary>
            <param name="selector">A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used.</param>
            <param name="file">The file path.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <remarks>
            This method expects <see cref="T:PlaywrightSharp.IElementHandle"/> to point to an <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input"/>.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the files are successfully set.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.SetInputFilesAsync(System.String,System.String[],System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Sets the value of the file input to these file paths or files. If some of the  <paramref name="files"/> are relative paths, then they are resolved relative to the <see cref="M:System.IO.Directory.GetCurrentDirectory"/>.
            </summary>
            <param name="selector">A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used.</param>
            <param name="files">File paths.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <remarks>
            This method expects <see cref="T:PlaywrightSharp.IElementHandle"/> to point to an <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input"/>.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the files are successfully set.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.SetInputFilesAsync(System.String,PlaywrightSharp.FilePayload,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Sets the value of the file input to these file paths or files. If some of the  <paramref name="file"/> are relative paths, then they are resolved relative to the <see cref="M:System.IO.Directory.GetCurrentDirectory"/>.
            </summary>
            <param name="selector">A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used.</param>
            <param name="file">The file payload.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <remarks>
            This method expects <see cref="T:PlaywrightSharp.IElementHandle"/> to point to an <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input"/>.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the files are successfully set.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.SetInputFilesAsync(System.String,PlaywrightSharp.FilePayload[],System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Sets the value of the file input to these file paths or files. If some of the  <paramref name="files"/> are relative paths, then they are resolved relative to the <see cref="M:System.IO.Directory.GetCurrentDirectory"/>.
            </summary>
            <param name="selector">A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used.</param>
            <param name="files">File payloads.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <remarks>
            This method expects <see cref="T:PlaywrightSharp.IElementHandle"/> to point to an <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input"/>.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the files are successfully set.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.WaitForLoadStateAsync(PlaywrightSharp.LifecycleEvent,System.Nullable{System.Int32})">
            <summary>
            Completes when the page reaches a required load state, load by default.
            The navigation can be in progress when it is called.
            If navigation is already at a required state, completes immediately.
            </summary>
            <param name="state">When to consider navigation succeeded, defaults to <see cref="F:PlaywrightSharp.LifecycleEvent.Load"/>.</param>
            <param name="timeout">Maximum navigation time in milliseconds, defaults to 30 seconds, pass <c>0</c> to disable timeout.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the load is completed.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.SelectOptionAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Triggers a change and input event once all, unselecting all the selected elements.
            </summary>
            <param name="selector">A selector to query page for.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> the completes when the value have been selected, yielding an array of option values that have been successfully selected.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.SelectOptionAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Triggers a change and input event once all the provided options have been selected.
            If there's no <![CDATA[<select>]]> element matching selector, the method throws an error.
            </summary>
            <param name="selector">A selector to query page for.</param>
            <param name="value">Value to select. If the <![CDATA[<select>]]> has the multiple attribute.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> the completes when the value have been selected, yielding an array of option values that have been successfully selected.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.SelectOptionAsync(System.String,PlaywrightSharp.SelectOption,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Triggers a change and input event once all the provided options have been selected.
            If there's no <![CDATA[<select>]]> element matching selector, the method throws an error.
            </summary>
            <param name="selector">A selector to query page for.</param>
            <param name="value">Value to select. If the <![CDATA[<select>]]> has the multiple attribute.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> the completes when the value have been selected, yielding an array of option values that have been successfully selected.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.SelectOptionAsync(System.String,PlaywrightSharp.IElementHandle,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Triggers a change and input event once all the provided options have been selected.
            If there's no <![CDATA[<select>]]> element matching selector, the method throws an error.
            </summary>
            <param name="selector">A selector to query page for.</param>
            <param name="value">Value to select. If the <![CDATA[<select>]]> has the multiple attribute.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> the completes when the value have been selected, yielding an array of option values that have been successfully selected.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.SelectOptionAsync(System.String,System.String[],System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Triggers a change and input event once all the provided options have been selected.
            If there's no <![CDATA[<select>]]> element matching selector, the method throws an error.
            </summary>
            <param name="selector">A selector to query page for.</param>
            <param name="values">Values of options to select. If the <![CDATA[<select>]]> has the multiple attribute,
            all values are considered, otherwise only the first one is taken into account.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> the completes when the value have been selected, yielding an array of option values that have been successfully selected.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.SelectOptionAsync(System.String,PlaywrightSharp.SelectOption[],System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Triggers a change and input event once all the provided options have been selected.
            If there's no <![CDATA[<select>]]> element matching selector, the method throws an error.
            </summary>
            <param name="selector">A selector to query page for.</param>
            <param name="values">Values of options to select. If the <![CDATA[<select>]]> has the multiple attribute,
            all values are considered, otherwise only the first one is taken into account.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> the completes when the value have been selected, yielding an array of option values that have been successfully selected.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.SelectOptionAsync(System.String,PlaywrightSharp.IElementHandle[],System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Triggers a change and input event once all the provided options have been selected.
            If there's no <![CDATA[<select>]]> element matching selector, the method throws an error.
            </summary>
            <param name="selector">A selector to query page for.</param>
            <param name="values">Values of options to select. If the <![CDATA[<select>]]> has the multiple attribute,
            all values are considered, otherwise only the first one is taken into account.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> the completes when the value have been selected, yielding an array of option values that have been successfully selected.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.SelectOptionAsync(System.String,System.String[])">
            <summary>
            Triggers a change and input event once all the provided options have been selected.
            If there's no <![CDATA[<select>]]> element matching selector, the method throws an error.
            </summary>
            <param name="selector">A selector to query page for.</param>
            <param name="values">Values of options to select. If the <![CDATA[<select>]]> has the multiple attribute,
            all values are considered, otherwise only the first one is taken into account.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> the completes when the value have been selected, yielding an array of option values that have been successfully selected.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.SelectOptionAsync(System.String,PlaywrightSharp.SelectOption[])">
            <summary>
            Triggers a change and input event once all the provided options have been selected.
            If there's no <![CDATA[<select>]]> element matching selector, the method throws an error.
            </summary>
            <param name="selector">A selector to query page for.</param>
            <param name="values">Values of options to select. If the <![CDATA[<select>]]> has the multiple attribute,
            all values are considered, otherwise only the first one is taken into account.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> the completes when the value have been selected, yielding an array of option values that have been successfully selected.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.SelectOptionAsync(System.String,PlaywrightSharp.IElementHandle[])">
            <summary>
            Triggers a change and input event once all the provided options have been selected.
            If there's no <![CDATA[<select>]]> element matching selector, the method throws an error.
            </summary>
            <param name="selector">A selector to query page for.</param>
            <param name="values">Values of options to select. If the <![CDATA[<select>]]> has the multiple attribute,
            all values are considered, otherwise only the first one is taken into account.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> the completes when the value have been selected, yielding an array of option values that have been successfully selected.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.CheckAsync(System.String,System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            This method fetches an element with selector, if element is not already checked, it scrolls it into view if needed, and then uses <see cref="M:PlaywrightSharp.IPage.ClickAsync(System.String,System.Int32,PlaywrightSharp.Input.MouseButton,System.Int32,PlaywrightSharp.Input.Modifier[],System.Nullable{System.Drawing.Point},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})"/> to click in the center of the element.
            If there's no element matching selector, the method waits until a matching element appears in the DOM.
            If the element is detached during the actionability checks, the action is retried.
            </summary>
            <param name="selector">A selector to search for element to check. If there are multiple elements satisfying the selector, the first will be clicked.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="force">Whether to pass the actionability checks.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the element is successfully clicked.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.UncheckAsync(System.String,System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            This method fetches an element with selector, if element is not already unchecked, it scrolls it into view if needed, and then uses <see cref="M:PlaywrightSharp.IPage.ClickAsync(System.String,System.Int32,PlaywrightSharp.Input.MouseButton,System.Int32,PlaywrightSharp.Input.Modifier[],System.Nullable{System.Drawing.Point},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})"/> to click in the center of the element.
            If there's no element matching selector, the method waits until a matching element appears in the DOM.
            If the element is detached during the actionability checks, the action is retried.
            </summary>
            <param name="selector">A selector to search for element to unchecked. If there are multiple elements satisfying the selector, the first will be clicked.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="force">Whether to pass the actionability checks.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the element is successfully clicked.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.DispatchEventAsync(System.String,System.String,System.Object,System.Nullable{System.Int32})">
            <summary>
            Under the hood, it creates an instance of an event based on the given type, initializes it with eventInit properties and dispatches it on the element.
            Events are composed, cancelable and bubble by default.
            </summary>
            <param name="selector">A selector to search for element to use. If there are multiple elements satisfying the selector, the first will be used.</param>
            <param name="type">DOM event type: "click", "dragstart", etc.</param>
            <param name="eventInit">Event-specific initialization properties.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the event was dispatched.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.GetAttributeAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Returns element attribute value.
            </summary>
            <param name="selector">A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked.</param>
            <param name="name">Attribute name to get the value for.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the attribute was evaluated (or timeout), yielding the value or the attribute.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.GetInnerHtmlAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            Resolves to the element.innerHTML.
            </summary>
            <param name="selector">A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the attribute was evaluated (or timeout), yielding the innerHTML of the element.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.GetInnerTextAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            Resolves to the element.innerText.
            </summary>
            <param name="selector">A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the attribute was evaluated (or timeout), yielding the innerText of the element.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.GetTextContentAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            Resolves to the element.textContent.
            </summary>
            <param name="selector">A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the attribute was evaluated (or timeout), yielding the textContent of the element.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.TapAsync(System.String,PlaywrightSharp.Input.Modifier[],System.Nullable{System.Drawing.Point},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            This method taps an element matching selector by performing the following steps:
            1. Find an element match matching selector.If there is none, wait until a matching element is attached to the DOM.
            2. Wait for actionability checks on the matched element, unless force option is set.If the element is detached during the checks, the whole action is retried.
            3. Scroll the element into view if needed.
            4. Use page.touchscreen to tap the center of the element, or the specified position.
            5. Wait for initiated navigations to either succeed or fail, unless noWaitAfter option is set.
            </summary>
            <param name="selector">A selector to search for element to tap. If there are multiple elements satisfying the selector, the first will be tapped. See working with selectors for more details.</param>
            <param name="modifiers">Modifier keys to press. Ensures that only these modifiers are pressed during the tap, and then restores current modifiers back. If not specified, currently pressed modifiers are used.</param>
            <param name="position">A point to tap relative to the top-left corner of element padding box. If not specified, taps some visible point of the element.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <param name="force">Whether to bypass the actionability checks. Defaults to false.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and
            for pages to start loading. You can opt out of waiting via setting this flag.
            You would only need this option in the exceptional cases such as navigating to inaccessible pages.
            Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when all steps combined succeeded. Or, if they have not finished during the specified timeout, this method rejects with a TimeoutError.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.IsCheckedAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            Returns whether the element is checked. Throws if the element is not a checkbox or radio input.
            </summary>
            <param name="selector">A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is processed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.IsDisabledAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            Returns whether the element is disabled, the opposite of <see cref="M:PlaywrightSharp.IFrame.IsEnabledAsync(System.String,System.Nullable{System.Int32})"/>.
            </summary>
            <param name="selector">A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is processed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.IsEditableAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            Returns whether the element is editable.
            </summary>
            <param name="selector">A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is processed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.IsEnabledAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            Returns whether the element is enabled.
            </summary>
            <param name="selector">A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is processed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.IsHiddenAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            Returns whether the element is hidden, the opposite of <see cref="M:PlaywrightSharp.IFrame.IsVisibleAsync(System.String,System.Nullable{System.Int32})"/>.
            </summary>
            <param name="selector">A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is processed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IFrame.IsVisibleAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            Returns whether the element is visible.
            </summary>
            <param name="selector">A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is processed by the browser.</returns>
        </member>
        <member name="T:PlaywrightSharp.IJSHandle">
            <summary>
            JSHandle represents an in-page JavaScript object. JSHandles can be created with the <see cref="M:PlaywrightSharp.IPage.EvaluateHandleAsync(System.String,System.Object)"/> method.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.IJSHandle.EvaluateHandleAsync(System.String)">
            <summary>
            Executes a function in browser context, passing the current <see cref="T:PlaywrightSharp.IJSHandle"/> as the first argument.
            </summary>
            <param name="expression">Script to be evaluated in browser context.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            <see cref="T:PlaywrightSharp.IJSHandle"/> instances can be passed as arguments.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script is executed, yielding the return value of that script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IJSHandle.EvaluateHandleAsync(System.String,System.Object)">
            <summary>
            Executes a function in browser context, passing the current <see cref="T:PlaywrightSharp.IJSHandle"/> as the first argument.
            </summary>
            <param name="expression">Script to be evaluated in browser context.</param>
            <param name="arg">Arguments to pass to script.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            <see cref="T:PlaywrightSharp.IJSHandle"/> instances can be passed as arguments.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script is executed, yielding the return value of that script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IJSHandle.EvaluateAsync``1(System.String)">
            <summary>
            Executes a function in browser context, passing the current <see cref="T:PlaywrightSharp.IElementHandle"/> as the first argument.
            </summary>
            <param name="expression">Script to be evaluated in browser context.</param>
            <typeparam name="T">Type to parse the result to.</typeparam>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            <see cref="T:PlaywrightSharp.IJSHandle"/> instances can be passed as arguments.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script is executed, yieling the return value of that script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IJSHandle.EvaluateAsync(System.String)">
            <summary>
            Executes a function in browser context, passing the current <see cref="T:PlaywrightSharp.IElementHandle"/> as the first argument.
            </summary>
            <param name="expression">Script to be evaluated in browser context.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            <see cref="T:PlaywrightSharp.IJSHandle"/> instances can be passed as arguments.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script is executed, yieling the return value of that script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IJSHandle.EvaluateAsync``1(System.String,System.Object)">
            <summary>
            Executes a function in browser context, passing the current <see cref="T:PlaywrightSharp.IElementHandle"/> as the first argument.
            </summary>
            <param name="expression">Script to be evaluated in browser context.</param>
            <param name="arg">Arguments to pass to script.</param>
            <typeparam name="T">Type to parse the result to.</typeparam>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            <see cref="T:PlaywrightSharp.IJSHandle"/> instances can be passed as arguments.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script is executed, yieling the return value of that script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IJSHandle.EvaluateAsync(System.String,System.Object)">
            <summary>
            Executes a function in browser context, passing the current <see cref="T:PlaywrightSharp.IElementHandle"/> as the first argument.
            </summary>
            <param name="expression">Script to be evaluated in browser context.</param>
            <param name="arg">Arguments to pass to script.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            <see cref="T:PlaywrightSharp.IJSHandle"/> instances can be passed as arguments.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script is executed, yieling the return value of that script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IJSHandle.GetJsonValueAsync``1">
            <summary>
            Returns a JSON representation of the object.
            </summary>
            <typeparam name="T">Return type.</typeparam>
            <remarks>
            The method will return an empty JSON if the referenced object is not stringifiable. It will throw an error if the object has circular references.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the evaluation is completed, yielding an <see cref="T:System.Object"/> with the json value of the handle.</returns>
        </member>
        <member name="M:PlaywrightSharp.IJSHandle.GetPropertyAsync(System.String)">
            <summary>
            Fetches a single property from the referenced object.
            </summary>
            <param name="propertyName">property to get.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the evaluation is completed, yielding a <see cref="T:PlaywrightSharp.IJSHandle"/> from the referenced object.</returns>
        </member>
        <member name="M:PlaywrightSharp.IJSHandle.GetPropertiesAsync">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.IDictionary`2"/> with property names as keys and <see cref="T:PlaywrightSharp.IJSHandle"/> instances for the property values.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the evaluation is completed, yielding a <see cref="T:System.Collections.Generic.IDictionary`2"/>.</returns>
            <example>
            <code>
            var handle = await page.EvaluateExpressionHandle("({window, document})");
            var properties = await handle.GetPropertiesAsync();
            var windowHandle = properties["window"];
            var documentHandle = properties["document"];
            await handle.DisposeAsync();
            </code>
            </example>
        </member>
        <member name="M:PlaywrightSharp.IJSHandle.DisposeAsync">
            <summary>
            Disposes the Handle. It will mark the JSHandle as disposed and release the <see cref="T:PlaywrightSharp.IJSHandle"/>.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the handle is disposed.</returns>
        </member>
        <member name="T:PlaywrightSharp.IKeyboard">
            <summary>
            Keyboard provides an api for managing a virtual keyboard.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.IKeyboard.DownAsync(System.String)">
            <summary>
            <![CDATA[
            Dispatches a <c>keydown</c> event
            ]]>
            </summary>
            <param name="key">Name of key to press, such as <c>ArrowLeft</c>.</param>
            <remarks>
            If <c>key</c> is a single character and no modifier keys besides <c>Shift</c> are being held down, a <c>keypress</c>/<c>input</c> event will also generated. The <c>text</c> option can be specified to force an input event to be generated.
            If <c>key</c> is a modifier key, <c>Shift</c>, <c>Meta</c>, <c>Control</c>, or <c>Alt</c>, subsequent key presses will be sent with that modifier active. To release the modifier key, use <see cref="M:PlaywrightSharp.IKeyboard.UpAsync(System.String)"/>
            After the key is pressed once, subsequent calls to <see cref="M:PlaywrightSharp.IKeyboard.DownAsync(System.String)"/> will have <see href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat">repeat</see> set to <c>true</c>. To release the key, use <see cref="M:PlaywrightSharp.IKeyboard.UpAsync(System.String)"/>.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is confirmed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IKeyboard.UpAsync(System.String)">
            <summary>
            Dispatches a <c>keyup</c> event.
            </summary>
            <param name="key">Name of key to release, such as `ArrowLeft`.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is confirmed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IKeyboard.TypeAsync(System.String,System.Int32)">
            <summary>
            Sends a <c>keydown</c>, <c>keypress</c>/<c>input</c>, and <c>keyup</c> event for each character in the text.
            </summary>
            <param name="text">A text to type into a focused element.</param>
            <param name="delay">Delay between key press.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is confirmed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IKeyboard.PressAsync(System.String,System.Int32)">
            <summary>
            Shortcut for <see cref="M:PlaywrightSharp.IKeyboard.DownAsync(System.String)"/> and <see cref="M:PlaywrightSharp.IKeyboard.UpAsync(System.String)"/>.
            </summary>
            <param name="key">Name of key to press, such as <c>ArrowLeft</c>. <see cref="T:PlaywrightSharp.KeyDefinitions"/> for a list of all key names.</param>
            <param name="delay">Time to wait between <c>keydown</c> and <c>keyup</c> in milliseconds. Defaults to 0.</param>
            <remarks>
            If <paramref name="key"/> is a single character and no modifier keys besides <c>Shift</c> are being held down, a <c>keypress</c>/<c>input</c> event will also generated.
            Modifier keys DO effect <see cref="M:PlaywrightSharp.IElementHandle.PressAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Boolean})"/>. Holding down <c>Shift</c> will type the text in upper case.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is confirmed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IKeyboard.InsertTextAsync(System.String)">
            <summary>
            Dispatches only input event, does not emit the keydown, keyup or keypress events.
            </summary>
            <param name="text">Sets input to the specified text value.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is confirmed by the browser.</returns>
        </member>
        <member name="T:PlaywrightSharp.IMouse">
            <summary>
            Provides methods to interact with the mouse.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.IMouse.MoveAsync(System.Decimal,System.Decimal,System.Nullable{System.Int32})">
            <summary>
            Dispatches a <c>mousemove</c> event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="steps">Sends intermediate mousemove events.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is confirmed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IMouse.ClickAsync(System.Decimal,System.Decimal,System.Int32,PlaywrightSharp.Input.MouseButton,System.Int32)">
            <summary>
            Shortcut for <see cref="M:PlaywrightSharp.IMouse.MoveAsync(System.Decimal,System.Decimal,System.Nullable{System.Int32})"/>, <see cref="M:PlaywrightSharp.IMouse.DownAsync(PlaywrightSharp.Input.MouseButton,System.Int32)"/> and <see cref="M:PlaywrightSharp.IMouse.UpAsync(PlaywrightSharp.Input.MouseButton,System.Int32)"/>.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="delay">Time to wait between <c>mousedown</c> and <c>mouseup</c> in milliseconds. Defaults to 0.</param>
            <param name="button">Button to click. Details to <see cref="F:PlaywrightSharp.Input.MouseButton.Left"/>.</param>
            <param name="clickCount">Click count. Defaults to 1.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is confirmed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IMouse.DblClickAsync(System.Decimal,System.Decimal,System.Int32,PlaywrightSharp.Input.MouseButton)">
            <summary>
            Shortcut for <see cref="M:PlaywrightSharp.IMouse.MoveAsync(System.Decimal,System.Decimal,System.Nullable{System.Int32})"/>, <see cref="M:PlaywrightSharp.IMouse.DownAsync(PlaywrightSharp.Input.MouseButton,System.Int32)"/>, <see cref="M:PlaywrightSharp.IMouse.UpAsync(PlaywrightSharp.Input.MouseButton,System.Int32)"/>, <see cref="M:PlaywrightSharp.IMouse.DownAsync(PlaywrightSharp.Input.MouseButton,System.Int32)"/> and <see cref="M:PlaywrightSharp.IMouse.UpAsync(PlaywrightSharp.Input.MouseButton,System.Int32)"/>.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="delay">Time to wait between <c>mousedown</c> and <c>mouseup</c> in milliseconds. Defaults to 0.</param>
            <param name="button">Button to click. Details to <see cref="F:PlaywrightSharp.Input.MouseButton.Left"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is confirmed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IMouse.DownAsync(PlaywrightSharp.Input.MouseButton,System.Int32)">
            <summary>
            Dispatches a <c>mousedown</c> event.
            </summary>
            <param name="button">The button to use for the click. Defaults to <see cref="F:PlaywrightSharp.Input.MouseButton.Left"/>.</param>
            <param name="clickCount">Click count. Defaults to 1.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is confirmed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IMouse.UpAsync(PlaywrightSharp.Input.MouseButton,System.Int32)">
            <summary>
            Dispatches a <c>mouseup</c> event.
            </summary>
            <param name="button">The button to use for the click. Defaults to <see cref="F:PlaywrightSharp.Input.MouseButton.Left"/>.</param>
            <param name="clickCount">Click count. Defaults to 1.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is confirmed by the browser.</returns>
        </member>
        <member name="T:PlaywrightSharp.Input.Modifier">
            <summary>
            Modifiers for click actions.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.Input.Modifier.Alt">
            <summary>
            Alt key.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.Input.Modifier.Control">
            <summary>
            Control key.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.Input.Modifier.Meta">
            <summary>
            Meta key.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.Input.Modifier.Shift">
            <summary>
            Shift Key.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Input.MouseButton">
            <summary>
            The type of button click to use with <see cref="M:PlaywrightSharp.IPage.ClickAsync(System.String,System.Int32,PlaywrightSharp.Input.MouseButton,System.Int32,PlaywrightSharp.Input.Modifier[],System.Nullable{System.Drawing.Point},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})"/> or <see cref="M:PlaywrightSharp.IFrame.ClickAsync(System.String,System.Int32,PlaywrightSharp.Input.MouseButton,System.Int32,PlaywrightSharp.Input.Modifier[],System.Nullable{System.Drawing.Point},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})"/>.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.Input.MouseButton.None">
            <summary>
            Non specified.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.Input.MouseButton.Left">
            <summary>
            The left mouse button.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.Input.MouseButton.Right">
            <summary>
            The right mouse button.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.Input.MouseButton.Middle">
            <summary>
            The middle mouse button.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.IPage">
            <summary>
            Page provides methods to interact with a single tab or extension background page in Chromium. One Browser instance might have multiple Page instances.
            </summary>
            <example>
            This example creates a page and navigates it to a URL:
            <code>
            <![CDATA[
            var context = await browser.NewContextAsync();
            const page = await context.NewPageAsync("https://example.com");
            await browser.CloseAsync();
            ]]>
            </code>
            </example>
        </member>
        <member name="E:PlaywrightSharp.IPage.Console">
            <summary>
            Raised when JavaScript within the page calls one of console API methods, e.g. <c>console.log</c> or <c>console.dir</c>. Also emitted if the page throws an error or a warning.
            The arguments passed into <c>console.log</c> appear as arguments on the event handler.
            </summary>
            <example>
            An example of handling <see cref="E:PlaywrightSharp.IPage.Console"/> event:
            <code>
            <![CDATA[
            page.Console += (sender, e) =>
            {
                for (var i = 0; i < e.Message.Args.Count; ++i)
                {
                    System.Console.WriteLine($"{i}: {e.Message.Args[i]}");
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="E:PlaywrightSharp.IPage.Popup">
            <summary>
            Emitted when the page opens a new tab or window.
            </summary>
            <example>
            <code>
            <![CDATA[
            var popupTargetCompletion = new TaskCompletionSource<IPage>();
            page.Popup += (sender, e) => popupTargetCompletion.SetResult(e.Page);
            await Task.WhenAll(
                popupTargetCompletion.Task,
                page.ClickAsync('a[target=_blank]')
            );
            ]]>
            </code>
            </example>
        </member>
        <member name="E:PlaywrightSharp.IPage.Request">
            <summary>
            Raised when a page issues a request. The <see cref="T:PlaywrightSharp.IRequest"/> object is read-only.
            </summary>
        </member>
        <member name="E:PlaywrightSharp.IPage.Response">
             <summary>
             Raised when a <see cref="T:PlaywrightSharp.IResponse"/> is received.
             </summary>
             <example>
             An example of handling <see cref="T:PlaywrightSharp.IResponse"/> event:
             <code>
             <![CDATA[
             var tcs = new TaskCompletionSource<string>();
             page.Response += async(sender, e) =>
             {
                 if (e.Response.Url.Contains("script.js"))
                 {
                     tcs.TrySetResult(await e.Response.TextAsync());
                 }
             };
            
             await Task.WhenAll(
                 page.GoToAsync(TestConstants.ServerUrl + "/grid.html"),
                 tcs.Task);
             Console.WriteLine(await tcs.Task);
             ]]>
             </code>
             </example>
        </member>
        <member name="E:PlaywrightSharp.IPage.WebSocket">
            <summary>
            Raised when a <see cref="T:PlaywrightSharp.IWebSocket"/> is sent.
            </summary>
        </member>
        <member name="E:PlaywrightSharp.IPage.RequestFinished">
            <summary>
            Raised when a request finishes successfully.
            </summary>
        </member>
        <member name="E:PlaywrightSharp.IPage.RequestFailed">
            <summary>
            Raised when a request fails, for example by timing out.
            </summary>
        </member>
        <member name="E:PlaywrightSharp.IPage.Dialog">
            <summary>
            Raised when a JavaScript dialog appears, such as <c>alert</c>, <c>prompt</c>, <c>confirm</c> or <c>beforeunload</c>.
            PlaywrightSharp can respond to the dialog via <see cref="E:PlaywrightSharp.IPage.Dialog"/>'s <see cref="M:PlaywrightSharp.IDialog.AcceptAsync(System.String)"/> or <see cref="M:PlaywrightSharp.IDialog.DismissAsync"/> methods.
            </summary>
        </member>
        <member name="E:PlaywrightSharp.IPage.FrameAttached">
            <summary>
            Raised when a frame is attached.
            </summary>
        </member>
        <member name="E:PlaywrightSharp.IPage.FrameDetached">
            <summary>
            Raised when a frame is detached.
            </summary>
        </member>
        <member name="E:PlaywrightSharp.IPage.FrameNavigated">
            <summary>
            Raised when a frame is navigated to a new url.
            </summary>
        </member>
        <member name="E:PlaywrightSharp.IPage.FileChooser">
            <summary>
            Raised when a file chooser is supposed to appear, such as after clicking the <c>&lt;input type=file&gt;</c>`. Playwright can respond to it via setting the input files using <see cref="M:PlaywrightSharp.IElementHandle.SetInputFilesAsync(PlaywrightSharp.FilePayload,System.Nullable{System.Int32},System.Nullable{System.Boolean})"/>.
            </summary>
        </member>
        <member name="E:PlaywrightSharp.IPage.Load">
            <summary>
            Raised when the JavaScript <c>load</c> <see href="https://developer.mozilla.org/en-US/docs/Web/Events/load"/> event is dispatched.
            </summary>
        </member>
        <member name="E:PlaywrightSharp.IPage.DOMContentLoaded">
            <summary>
            The JavaScript <c>DOMContentLoaded</c> <see href="https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded"/> event
            </summary>
        </member>
        <member name="E:PlaywrightSharp.IPage.Close">
            <summary>
            Raised when the page closes.
            </summary>
        </member>
        <member name="E:PlaywrightSharp.IPage.Crash">
            <summary>
            Raised when the page crashes.
            </summary>
        </member>
        <member name="E:PlaywrightSharp.IPage.PageError">
            <summary>
            Raised when an uncaught exception happens within the page.
            </summary>
        </member>
        <member name="E:PlaywrightSharp.IPage.Worker">
            <summary>
            Raised when a dedicated WebWorker (<see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API"/>) is spawned by the page.
            </summary>
        </member>
        <member name="E:PlaywrightSharp.IPage.Download">
            <summary>
            Emitted when attachment download started.
            User can access basic file operations on downloaded content via the passed Download instance.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IPage.IsClosed">
            <summary>
            Get an indication that the page has been closed.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IPage.MainFrame">
            <summary>
            Page is guaranteed to have a main frame which persists during navigations.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IPage.Context">
            <summary>
            Get the browser context that the page belongs to.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IPage.ViewportSize">
            <summary>
            Page Viewport.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IPage.Accessibility">
            <summary>
            Gets the accessibility.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IPage.Mouse">
            <summary>
            Gets this page's mouse.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IPage.Url">
            <summary>
            Shortcut for MainFrame.Url.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IPage.Frames">
            <summary>
            Gets all frames attached to the page.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IPage.Keyboard">
            <summary>
            Gets this page's keyboard.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IPage.Touchscreen">
            <summary>
            Gets this page's touchscreen.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IPage.DefaultTimeout">
            <summary>
            This setting will change the default maximum time for all the methods accepting timeout option.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IPage.DefaultNavigationTimeout">
            <summary>
            Maximum navigation time in milliseconds.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IPage.Workers">
            <summary>
            Gets all workers in the page.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IPage.Coverage">
            <summary>
            Browser-specific Coverage implementation, only available for Chromium atm.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IPage.Video">
            <summary>
            Video object associated with this page.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.IPage.GetTitleAsync">
            <summary>
            Returns page's title.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> the completes when the title is resolved, yielding the page's title.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.GetOpenerAsync">
            <summary>
            Returns the opener for popup pages and <c>null</c> for others.
            </summary>
            <remarks>
            If the opener has been closed already the task may resolve to <c>null</c>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            IPage popup;
            page.Popup += (sender, e) => popup = e.Page;
            await page.EvaluateAsync("() => window.open('about:blank')");
            ]]>
            </code>
            </example>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the opener is resolved, yielding the opener <see cref="T:PlaywrightSharp.IPage"/>.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.WaitForLoadStateAsync(PlaywrightSharp.LifecycleEvent,System.Nullable{System.Int32})">
            <summary>
            Completes when the page reaches a required load state, load by default.
            The navigation can be in progress when it is called.
            If navigation is already at a required state, completes immediately.
            </summary>
            <param name="state">Load state to wait for. Defaults to <see cref="F:PlaywrightSharp.LifecycleEvent.Load"/>. If the state has been already reached while loading current document, the method resolves immediately.</param>
            <param name="timeout">Maximum waiting time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultNavigationTimeout"/>, <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/>, <see cref="P:PlaywrightSharp.IPage.DefaultNavigationTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> properties.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the load is completed.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.EmulateMediaAsync">
            <summary>
            Setup media emulation.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is confirmed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.EmulateMediaAsync(System.Nullable{PlaywrightSharp.MediaType})">
            <summary>
            Setup media emulation.
            </summary>
            <param name="media">Changes the CSS media type of the page. Passing null disables CSS media emulation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is confirmed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.EmulateMediaAsync(System.Nullable{PlaywrightSharp.ColorScheme})">
            <summary>
            Setup media emulation.
            </summary>
            <param name="colorScheme">Emulates 'prefers-colors-scheme' media feature.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is confirmed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.EmulateMediaAsync(System.Nullable{PlaywrightSharp.MediaType},System.Nullable{PlaywrightSharp.ColorScheme})">
            <summary>
            Setup media emulation.
            </summary>
            <param name="media">Changes the CSS media type of the page. Passing null disables CSS media emulation.</param>
            <param name="colorScheme">Emulates 'prefers-colors-scheme' media feature.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is confirmed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.WaitForNavigationAsync(System.Nullable{PlaywrightSharp.LifecycleEvent},System.Nullable{System.Int32})">
            <summary>
            This resolves when the page navigates to a new URL or reloads.
            It is useful for when you run code which will indirectly cause the page to navigate.
            </summary>
            <param name="waitUntil">When to consider navigation succeeded, defaults to <see cref="F:PlaywrightSharp.LifecycleEvent.Load"/>.</param>
            <param name="timeout">Maximum navigation time in milliseconds, defaults to 30 seconds, pass <c>0</c> to disable timeout.</param>
            <returns>Task which resolves to the main resource response.
            In case of multiple redirects, the navigation will resolve with the response of the last redirect.
            In case of navigation to a different anchor or navigation due to History API usage, the navigation will resolve with `null`.
            </returns>
            <remarks>
            Usage of the <c>History API</c> <see href="https://developer.mozilla.org/en-US/docs/Web/API/History_API"/> to change the URL is considered a navigation.
            </remarks>
            <example>
            <code>
            <![CDATA[
            var navigationTask = page.WaitForNavigationAsync();
            await page.ClickAsync("a.my-link");
            await navigationTask;
            ]]>
            </code>
            </example>
        </member>
        <member name="M:PlaywrightSharp.IPage.WaitForNavigationAsync(System.String,System.Nullable{PlaywrightSharp.LifecycleEvent},System.Nullable{System.Int32})">
            <summary>
            This resolves when the page navigates to a new URL or reloads.
            It is useful for when you run code which will indirectly cause the page to navigate.
            </summary>
            <param name="url">Wait for this specific URL.</param>
            <param name="waitUntil">When to consider navigation succeeded, defaults to <see cref="F:PlaywrightSharp.LifecycleEvent.Load"/>.</param>
            <param name="timeout">Maximum navigation time in milliseconds, defaults to 30 seconds, pass <c>0</c> to disable timeout.</param>
            <returns>Task which resolves to the main resource response.
            In case of multiple redirects, the navigation will resolve with the response of the last redirect.
            In case of navigation to a different anchor or navigation due to History API usage, the navigation will resolve with `null`.
            </returns>
            <remarks>
            Usage of the <c>History API</c> <see href="https://developer.mozilla.org/en-US/docs/Web/API/History_API"/> to change the URL is considered a navigation.
            </remarks>
            <example>
            <code>
            <![CDATA[
            var navigationTask = page.WaitForNavigationAsync();
            await page.ClickAsync("a.my-link");
            await navigationTask;
            ]]>
            </code>
            </example>
        </member>
        <member name="M:PlaywrightSharp.IPage.WaitForNavigationAsync(System.Text.RegularExpressions.Regex,System.Nullable{PlaywrightSharp.LifecycleEvent},System.Nullable{System.Int32})">
            <summary>
            This resolves when the page navigates to a new URL or reloads.
            It is useful for when you run code which will indirectly cause the page to navigate.
            </summary>
            <param name="url">Wait for this specific URL Regex.</param>
            <param name="waitUntil">When to consider navigation succeeded, defaults to <see cref="F:PlaywrightSharp.LifecycleEvent.Load"/>.</param>
            <param name="timeout">Maximum navigation time in milliseconds, defaults to 30 seconds, pass <c>0</c> to disable timeout.</param>
            <returns>Task which resolves to the main resource response.
            In case of multiple redirects, the navigation will resolve with the response of the last redirect.
            In case of navigation to a different anchor or navigation due to History API usage, the navigation will resolve with `null`.
            </returns>
            <remarks>
            Usage of the <c>History API</c> <see href="https://developer.mozilla.org/en-US/docs/Web/API/History_API"/> to change the URL is considered a navigation.
            </remarks>
            <example>
            <code>
            <![CDATA[
            var navigationTask = page.WaitForNavigationAsync();
            await page.ClickAsync("a.my-link");
            await navigationTask;
            ]]>
            </code>
            </example>
        </member>
        <member name="M:PlaywrightSharp.IPage.WaitForNavigationAsync(System.Func{System.String,System.Boolean},System.Nullable{PlaywrightSharp.LifecycleEvent},System.Nullable{System.Int32})">
            <summary>
            This resolves when the page navigates to a new URL or reloads.
            It is useful for when you run code which will indirectly cause the page to navigate.
            </summary>
            <param name="url">Wait for this specific URL that matches the function condition.</param>
            <param name="waitUntil">When to consider navigation succeeded, defaults to <see cref="F:PlaywrightSharp.LifecycleEvent.Load"/>.</param>
            <param name="timeout">Maximum navigation time in milliseconds, defaults to 30 seconds, pass <c>0</c> to disable timeout.</param>
            <returns>Task which resolves to the main resource response.
            In case of multiple redirects, the navigation will resolve with the response of the last redirect.
            In case of navigation to a different anchor or navigation due to History API usage, the navigation will resolve with `null`.
            </returns>
            <remarks>
            Usage of the <c>History API</c> <see href="https://developer.mozilla.org/en-US/docs/Web/API/History_API"/> to change the URL is considered a navigation.
            </remarks>
            <example>
            <code>
            <![CDATA[
            var navigationTask = page.WaitForNavigationAsync();
            await page.ClickAsync("a.my-link");
            await navigationTask;
            ]]>
            </code>
            </example>
        </member>
        <member name="M:PlaywrightSharp.IPage.GetFrame(System.String,System.String)">
            <summary>
            Returns frame matching the specified criteria.
            </summary>
            <param name="name">Frame name specified in the iframe's name attribute.</param>
            <param name="url"> A glob pattern.</param>
            <returns>The <see cref="T:PlaywrightSharp.IFrame"/> matching the condition if found.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.GetFrame(System.Text.RegularExpressions.Regex)">
            <summary>
            Returns frame matching the specified criteria.
            </summary>
            <param name="url">Regex pattern.</param>
            <returns>The <see cref="T:PlaywrightSharp.IFrame"/> matching the condition if found.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.GetFrame(System.Func{System.String,System.Boolean})">
            <summary>
            Returns frame matching the specified criteria.
            </summary>
            <param name="url">A function receiving the framn's URL.</param>
            <returns>The <see cref="T:PlaywrightSharp.IFrame"/> matching the condition if found.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.WaitForRequestAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            Waits for a request.
            </summary>
            <example>
            <code>
            <![CDATA[
            var firstRequest = await page.WaitForRequestAsync("http://example.com/resource");
            return firstRequest.Url;
            ]]>
            </code>
            </example>
            <param name="url">URL to wait for.</param>
            <param name="timeout">/// Maximum time to wait for in milliseconds. Pass 0 to disable timeout.
            The default value can be changed by setting the <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> property.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the request was made (or timeout), yielding the matching <see cref="T:PlaywrightSharp.IRequest"/>.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.WaitForRequestAsync(System.Text.RegularExpressions.Regex,System.Nullable{System.Int32})">
            <summary>
            Waits for a request.
            </summary>
            <example>
            <code>
            <![CDATA[
            var firstRequest = await page.WaitForRequestAsync(new Regex("digits\\d\\.png");
            return firstRequest.Url;
            ]]>
            </code>
            </example>
            <param name="url">Regex to wait for.</param>
            <param name="timeout">/// Maximum time to wait for in milliseconds. Pass 0 to disable timeout.
            The default value can be changed by setting the <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> property.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the request was made (or timeout), yielding the matching <see cref="T:PlaywrightSharp.IRequest"/>.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.WaitForRequestAsync(System.Func{PlaywrightSharp.IRequest,System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Waits for a request.
            </summary>
            <param name="predicate">Function used to evaluate requets.</param>
            <param name="timeout">/// Maximum time to wait for in milliseconds. Pass 0 to disable timeout.
            The default value can be changed by setting the <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> property.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the request was made (or timeout), yielding the matching <see cref="T:PlaywrightSharp.IRequest"/>.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.WaitForFunctionAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            Waits for a function to be evaluated to a truthy value.
            </summary>
            <param name="expression">Function to be evaluated in browser context.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that resolves when the <c>script</c> returns a truthy value, yielding a <see cref="T:PlaywrightSharp.IJSHandle"/>.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.WaitForFunctionAsync(System.String,PlaywrightSharp.Polling,System.Nullable{System.Int32})">
            <summary>
            Waits for a function to be evaluated to a truthy value.
            </summary>
            <param name="expression">Function to be evaluated in browser context.</param>
            <param name="polling">An interval at which the <c>pageFunction</c> is executed. defaults to <see cref="F:PlaywrightSharp.Polling.Raf"/>.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that resolves when the <c>script</c> returns a truthy value, yielding a <see cref="T:PlaywrightSharp.IJSHandle"/>.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.WaitForFunctionAsync(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Waits for a function to be evaluated to a truthy value.
            </summary>
            <param name="expression">Function to be evaluated in browser context.</param>
            <param name="polling">An interval at which the function is executed. If no value is specified will use <paramref name="polling"/>.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that resolves when the <c>script</c> returns a truthy value, yielding a <see cref="T:PlaywrightSharp.IJSHandle"/>.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.WaitForFunctionAsync(System.String,System.Object,System.Nullable{System.Int32})">
            <summary>
            Waits for a function to be evaluated to a truthy value.
            </summary>
            <param name="expression">Function to be evaluated in browser context.</param>
            <param name="arg">Arguments to pass to <c>script</c>.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that resolves when the <c>script</c> returns a truthy value, yielding a <see cref="T:PlaywrightSharp.IJSHandle"/>.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.WaitForFunctionAsync(System.String,System.Object,PlaywrightSharp.Polling,System.Nullable{System.Int32})">
            <summary>
            Waits for a function to be evaluated to a truthy value.
            </summary>
            <param name="expression">Function to be evaluated in browser context.</param>
            <param name="arg">Arguments to pass to <c>script</c>.</param>
            <param name="polling">An interval at which the <c>pageFunction</c> is executed. defaults to <see cref="F:PlaywrightSharp.Polling.Raf"/>.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that resolves when the <c>script</c> returns a truthy value, yielding a <see cref="T:PlaywrightSharp.IJSHandle"/>.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.WaitForFunctionAsync(System.String,System.Object,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Waits for a function to be evaluated to a truthy value.
            </summary>
            <param name="expression">Function to be evaluated in browser context.</param>
            <param name="arg">Arguments to pass to <c>script</c>.</param>
            <param name="polling">An interval at which the function is executed. If no value is specified will use <paramref name="polling"/>.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that resolves when the <c>script</c> returns a truthy value, yielding a <see cref="T:PlaywrightSharp.IJSHandle"/>.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.WaitForEventAsync``1(PlaywrightSharp.PlaywrightEvent{``0},System.Func{``0,System.Boolean},System.Nullable{System.Int32})">
             <summary>
             Waits for event to fire and passes its value into the predicate function.
             </summary>
             <param name="pageEvent">Event to wait for.</param>
             <param name="predicate">Receives the event data and resolves when the waiting should resolve.</param>
             <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
             The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
             <typeparam name="T">Resulting event args.</typeparam>
             <example>
             <code>
             <![CDATA[
             // wait for console event:
             var console = await page.WaitForEvent(PageEvent.Console);
            
             // wait for popup event:
             var popup = await page.WaitForEvent(PageEvent.Popup);
            
             // wait for dialog event:
             var dialog = await page.WaitForEvent(PageEvent.Dialog);
            
             // wait for request event:
             var request = await page.WaitForEvent(PageEvent.Request);
             ]]>
             </code>
             </example>
             <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the predicate returns truthy value. Yielding the information of the event.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.GoToAsync(System.String,System.Nullable{PlaywrightSharp.LifecycleEvent},System.String,System.Nullable{System.Int32})">
            <summary>
            Navigates to an URL.
            </summary>
            <param name="url">URL to navigate page to. The url should include scheme, e.g. https://.</param>
            <param name="waitUntil">When to consider navigation succeeded, defaults to <see cref="F:PlaywrightSharp.LifecycleEvent.Load"/>.</param>
            <param name="referer">Referer header value. If provided it will take prefrence over the referer header value set by <see cref="M:PlaywrightSharp.IPage.SetExtraHTTPHeadersAsync(System.Collections.Generic.Dictionary{System.String,System.String})"/>.</param>
            <param name="timeout">Maximum navigation time in milliseconds, defaults to 30 seconds, pass <c>0</c> to disable timeout.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that completes with resolves to the main resource response.
            In case of multiple redirects, the navigation will resolve with the response of the last redirect.
            </returns>
            <remarks>
            <see cref="M:PlaywrightSharp.IPage.GoToAsync(System.String,System.Nullable{PlaywrightSharp.LifecycleEvent},System.String,System.Nullable{System.Int32})"/> will throw an error if:
            * There's an SSL error (e.g. in case of self-signed certificates).
            * Target URL is invalid.
            * The timeout is exceeded during navigation.
            * The remote server does not respond or is unreachable.
            * The main resource failed to load.
            <para/>
            <see cref="M:PlaywrightSharp.IPage.GoToAsync(System.String,System.Nullable{PlaywrightSharp.LifecycleEvent},System.String,System.Nullable{System.Int32})"/> will not throw an error when any valid HTTP status code is returned by the remote server, including 404 "Not Found" and 500 "Internal Server Error".
            The status code for such responses can be retrieved by calling response.status().
            <para/>
            NOTE <see cref="M:PlaywrightSharp.IPage.GoToAsync(System.String,System.Nullable{PlaywrightSharp.LifecycleEvent},System.String,System.Nullable{System.Int32})"/> either throws an error or returns a main resource response.
            The only exceptions are navigation to about:blank or navigation to the same URL with a different hash, which would succeed and return null.
            <para/>
            NOTE Headless mode doesn't support navigation to a PDF document. See the upstream issue.
            <para/>
            Shortcut for <see cref="M:PlaywrightSharp.IFrame.GoToAsync(System.String,System.Nullable{PlaywrightSharp.LifecycleEvent},System.String,System.Nullable{System.Int32})"/>.
            </remarks>
        </member>
        <member name="M:PlaywrightSharp.IPage.CloseAsync(System.Boolean)">
            <summary>
            Closes the page.
            </summary>
            <param name="runBeforeUnload">Defaults to <c>false</c>. Whether to run the beforeunload page handlers.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the close process finishes.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.EvaluateAsync``1(System.String)">
            <summary>
            Executes a script in browser context.
            </summary>
            <param name="expression">Script to be evaluated in browser context.</param>
            <typeparam name="T">Return type.</typeparam>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <seealso cref="M:PlaywrightSharp.IFrame.EvaluateAsync``1(System.String)"/>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/>  that completes when the script finishes or the promise is resolved, yielding the result of the script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.EvaluateAsync``1(System.String,System.Object)">
            <summary>
            Executes a script in browser context.
            </summary>
            <param name="expression">Script to be evaluated in browser context.</param>
            <param name="arg">Arguments to pass to script.</param>
            <typeparam name="T">Return type.</typeparam>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <seealso cref="M:PlaywrightSharp.IFrame.EvaluateAsync``1(System.String,System.Object)"/>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/>  that completes when the script finishes or the promise is resolved, yielding the result of the script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.EvalOnSelectorAsync(System.String,System.String,System.Object)">
            <summary>
            This method runs <c>document.querySelector</c> within the page and passes it as the first argument to expression.
            If there's no element matching selector, the method throws an error.
            </summary>
            <param name="selector">A selector to query page for.</param>
            <param name="expression">Script to be evaluated in browser context.</param>
            <param name="arg">Arguments to pass to script.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script finishes or the promise is resolved, yielding the result of the script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.EvalOnSelectorAsync``1(System.String,System.String,System.Object)">
            <summary>
            This method runs <c>document.querySelector</c> within the page and passes it as the first argument to expression.
            If there's no element matching selector, the method throws an error.
            </summary>
            <typeparam name="T">Result type.</typeparam>
            <param name="selector">A selector to query page for.</param>
            <param name="expression">Script to be evaluated in browser context.</param>
            <param name="arg">Arguments to pass to script.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script finishes or the promise is resolved, yielding the result of the script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.EvalOnSelectorAsync(System.String,System.String)">
            <summary>
            This method runs <c>document.querySelector</c> within the page and passes it as the first argument to expression.
            If there's no element matching selector, the method throws an error.
            </summary>
            <param name="selector">A selector to query page for.</param>
            <param name="expression">Script to be evaluated in browser context.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script finishes or the promise is resolved, yielding the result of the script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.EvalOnSelectorAsync``1(System.String,System.String)">
            <summary>
            This method runs <c>document.querySelector</c> within the page and passes it as the first argument to expression.
            If there's no element matching selector, the method throws an error.
            </summary>
            <typeparam name="T">Result type.</typeparam>
            <param name="selector">A selector to query page for.</param>
            <param name="expression">Script to be evaluated in browser context.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script finishes or the promise is resolved, yielding the result of the script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.EvalOnSelectorAllAsync(System.String,System.String,System.Object)">
            <summary>
            This method runs <c>Array.from(document.querySelectorAll(selector))</c> within the page and passes it as the first argument to expression.
            </summary>
            <param name="selector">A selector to query page for.</param>
            <param name="expression">Script to be evaluated in browser context.</param>
            <param name="arg">Arguments to pass to script.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script finishes or the promise is resolved, yielding the result of the script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.EvalOnSelectorAllAsync``1(System.String,System.String,System.Object)">
            <summary>
            This method runs <c>Array.from(document.querySelectorAll(selector))</c> within the page and passes it as the first argument to expression.
            </summary>
            <typeparam name="T">Result type.</typeparam>
            <param name="selector">A selector to query page for.</param>
            <param name="expression">Script to be evaluated in browser context.</param>
            <param name="arg">Arguments to pass to script.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script finishes or the promise is resolved, yielding the result of the script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.EvalOnSelectorAllAsync(System.String,System.String)">
            <summary>
            This method runs <c>Array.from(document.querySelectorAll(selector))</c> within the page and passes it as the first argument to expression.
            </summary>
            <param name="selector">A selector to query page for.</param>
            <param name="expression">Script to be evaluated in browser context.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script finishes or the promise is resolved, yielding the result of the script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.EvalOnSelectorAllAsync``1(System.String,System.String)">
            <summary>
            This method runs <c>Array.from(document.querySelectorAll(selector))</c> within the page and passes it as the first argument to expression.
            </summary>
            <typeparam name="T">Result type.</typeparam>
            <param name="selector">A selector to query page for.</param>
            <param name="expression">Script to be evaluated in browser context.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script finishes or the promise is resolved, yielding the result of the script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.FillAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            <![CDATA[
            This method focuses the element and triggers an input event after filling. If there's no text <input>, <textarea> or [contenteditable] element matching selector, the method throws an error.
            ]]>
            Shortcut for MainFrame.FillAsync.
            </summary>
            <param name="selector">A selector to query page for.</param>
            <param name="value"><![CDATA[Value to fill for the <input>, <textarea> or [contenteditable] element]]></param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the fill action is done.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.TypeAsync(System.String,System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Sends a <c>keydown</c>, <c>keypress</c>/<c>input</c>, and <c>keyup</c> event for each character in the text.
            </summary>
            <param name="selector">A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used.</param>
            <param name="text">A text to type into a focused element.</param>
            <param name="delay">Time to wait between <c>keydown</c> and <c>keyup</c> in milliseconds. Defaults to 0.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <remarks>
            To press a special key, like <c>Control</c> or <c>ArrowDown</c> use <see cref="M:PlaywrightSharp.IKeyboard.PressAsync(System.String,System.Int32)"/>.
            </remarks>
            <example>
            <code>
            await page.TypeAsync("#mytextarea", "Hello"); // Types instantly
            await page.TypeAsync("#mytextarea", "World", new TypeOptions { Delay = 100 }); // Types slower, like a user
            </code>
            </example>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the type message is confirmed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.PressAsync(System.String,System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Focuses the element, and then sends a <c>keydown</c>, <c>keypress</c>/<c>input</c>, and <c>keyup</c> event for each character in the text.
            </summary>
            <param name="selector">A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used.</param>
            <param name="key">Name of the key to press or a character to generate, such as `ArrowLeft` or `a`.</param>
            <param name="delay">Time to wait between <c>keydown</c> and <c>keyup</c> in milliseconds. Defaults to 0.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the type message is confirmed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.SetInputFilesAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Sets the value of the file input to these file paths or files. If some of the  <paramref name="files"/> are relative paths, then they are resolved relative to the <see cref="M:System.IO.Directory.GetCurrentDirectory"/>.
            </summary>
            <param name="selector">A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used.</param>
            <param name="files">The file path.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <remarks>
            This method expects <see cref="T:PlaywrightSharp.IElementHandle"/> to point to an <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input"/>.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the files are successfully set.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.SetInputFilesAsync(System.String,System.String[],System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Sets the value of the file input to these file paths or files. If some of the  <paramref name="files"/> are relative paths, then they are resolved relative to the <see cref="M:System.IO.Directory.GetCurrentDirectory"/>.
            </summary>
            <param name="selector">A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used.</param>
            <param name="files">File paths.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <remarks>
            This method expects <see cref="T:PlaywrightSharp.IElementHandle"/> to point to an <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input"/>.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the files are successfully set.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.SetInputFilesAsync(System.String,PlaywrightSharp.FilePayload,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Sets the value of the file input to these file paths or files. If some of the  <paramref name="files"/> are relative paths, then they are resolved relative to the <see cref="M:System.IO.Directory.GetCurrentDirectory"/>.
            </summary>
            <param name="selector">A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used.</param>
            <param name="files">The file payload.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <remarks>
            This method expects <see cref="T:PlaywrightSharp.IElementHandle"/> to point to an <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input"/>.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the files are successfully set.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.SetInputFilesAsync(System.String,PlaywrightSharp.FilePayload[],System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Sets the value of the file input to these file paths or files. If some of the  <paramref name="files"/> are relative paths, then they are resolved relative to the <see cref="M:System.IO.Directory.GetCurrentDirectory"/>.
            </summary>
            <param name="selector">A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used.</param>
            <param name="files">File payloads.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <remarks>
            This method expects <see cref="T:PlaywrightSharp.IElementHandle"/> to point to an <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input"/>.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the files are successfully set.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.FocusAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            Fetches an element with <paramref name="selector"/> and focuses it.
            </summary>
            <param name="selector">A selector to search for element to focus. If there are multiple elements satisfying the selector, the first will be focused.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the the element matching <paramref name="selector"/> is successfully focused.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.HoverAsync(System.String,System.Nullable{System.Drawing.Point},PlaywrightSharp.Input.Modifier[],System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Fetches an element with <paramref name="selector"/>, scrolls it into view if needed, and then uses <see cref="P:PlaywrightSharp.IPage.Mouse"/> to hover over the center of the element.
            </summary>
            <param name="selector">A selector to search for element to hover. If there are multiple elements satisfying the selector, the first will be hovered.</param>
            <param name="position">A point to hover relative to the top-left corner of element padding box. If not specified, hovers over some visible point of the element.</param>
            <param name="modifiers">Modifier keys to press. Ensures that only these modifiers are pressed during the hover, and then restores current modifiers back. If not specified, currently pressed modifiers are used.</param>
            <param name="force">Whether to bypass the actionability checks. Defaults to false.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the element matching <paramref name="selector"/> is successfully hovered.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.SelectOptionAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Triggers a change and input event once all, unselecting all the selected elements.
            </summary>
            <param name="selector">A selector to query page for.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> the completes when the value have been selected, yielding an array of option values that have been successfully selected.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.SelectOptionAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Triggers a change and input event once all the provided options have been selected.
            If there's no <![CDATA[<select>]]> element matching selector, the method throws an error.
            </summary>
            <param name="selector">A selector to query page for.</param>
            <param name="values">Value to select. If the <![CDATA[<select>]]> has the multiple attribute.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> the completes when the value have been selected, yielding an array of option values that have been successfully selected.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.SelectOptionAsync(System.String,PlaywrightSharp.SelectOption,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Triggers a change and input event once all the provided options have been selected.
            If there's no <![CDATA[<select>]]> element matching selector, the method throws an error.
            </summary>
            <param name="selector">A selector to query page for.</param>
            <param name="values">Value to select. If the <![CDATA[<select>]]> has the multiple attribute.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> the completes when the value have been selected, yielding an array of option values that have been successfully selected.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.SelectOptionAsync(System.String,PlaywrightSharp.IElementHandle,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Triggers a change and input event once all the provided options have been selected.
            If there's no <![CDATA[<select>]]> element matching selector, the method throws an error.
            </summary>
            <param name="selector">A selector to query page for.</param>
            <param name="values">Value to select. If the <![CDATA[<select>]]> has the multiple attribute.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> the completes when the value have been selected, yielding an array of option values that have been successfully selected.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.SelectOptionAsync(System.String,System.String[],System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Triggers a change and input event once all the provided options have been selected.
            If there's no <![CDATA[<select>]]> element matching selector, the method throws an error.
            </summary>
            <param name="selector">A selector to query page for.</param>
            <param name="values">Values of options to select. If the <![CDATA[<select>]]> has the multiple attribute,
            all values are considered, otherwise only the first one is taken into account.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> the completes when the value have been selected, yielding an array of option values that have been successfully selected.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.SelectOptionAsync(System.String,PlaywrightSharp.SelectOption[],System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Triggers a change and input event once all the provided options have been selected.
            If there's no <![CDATA[<select>]]> element matching selector, the method throws an error.
            </summary>
            <param name="selector">A selector to query page for.</param>
            <param name="values">Values of options to select. If the <![CDATA[<select>]]> has the multiple attribute,
            all values are considered, otherwise only the first one is taken into account.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> the completes when the value have been selected, yielding an array of option values that have been successfully selected.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.SelectOptionAsync(System.String,PlaywrightSharp.IElementHandle[],System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Triggers a change and input event once all the provided options have been selected.
            If there's no <![CDATA[<select>]]> element matching selector, the method throws an error.
            </summary>
            <param name="selector">A selector to query page for.</param>
            <param name="values">Values of options to select. If the <![CDATA[<select>]]> has the multiple attribute,
            all values are considered, otherwise only the first one is taken into account.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> the completes when the value have been selected, yielding an array of option values that have been successfully selected.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.SelectOptionAsync(System.String,System.String[])">
            <summary>
            Triggers a change and input event once all the provided options have been selected.
            If there's no <![CDATA[<select>]]> element matching selector, the method throws an error.
            </summary>
            <param name="selector">A selector to query page for.</param>
            <param name="values">Values of options to select. If the <![CDATA[<select>]]> has the multiple attribute,
            all values are considered, otherwise only the first one is taken into account.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> the completes when the value have been selected, yielding an array of option values that have been successfully selected.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.SelectOptionAsync(System.String,PlaywrightSharp.SelectOption[])">
            <summary>
            Triggers a change and input event once all the provided options have been selected.
            If there's no <![CDATA[<select>]]> element matching selector, the method throws an error.
            </summary>
            <param name="selector">A selector to query page for.</param>
            <param name="values">Values of options to select. If the <![CDATA[<select>]]> has the multiple attribute,
            all values are considered, otherwise only the first one is taken into account.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> the completes when the value have been selected, yielding an array of option values that have been successfully selected.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.SelectOptionAsync(System.String,PlaywrightSharp.IElementHandle[])">
            <summary>
            Triggers a change and input event once all the provided options have been selected.
            If there's no <![CDATA[<select>]]> element matching selector, the method throws an error.
            </summary>
            <param name="selector">A selector to query page for.</param>
            <param name="values">Values of options to select. If the <![CDATA[<select>]]> has the multiple attribute,
            all values are considered, otherwise only the first one is taken into account.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> the completes when the value have been selected, yielding an array of option values that have been successfully selected.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.WaitForTimeoutAsync(System.Int32)">
            <summary>
            Waits for a timeout.
            </summary>
            <param name="timeout">Timeout in milliseconds.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the timeout is reached.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.WaitForSelectorAsync(System.String,System.Nullable{PlaywrightSharp.WaitForState},System.Nullable{System.Int32})">
            <summary>
            Waits for a selector to be added to the DOM.
            </summary>
            <param name="selector">A selector of an element to wait for.</param>
            <param name="state">Wait for element to become in the specified state.</param>
            <param name="timeout">
            Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.
            </param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when element specified by selector string is added to DOM, yielding the <see cref="T:PlaywrightSharp.IElementHandle"/> to wait for.
            Resolves to `null` if waiting for `hidden: true` and selector is not found in DOM.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.EvaluateAsync(System.String)">
            <summary>
            Executes a script in browser context.
            </summary>
            <param name="expression">Script to be evaluated in browser context.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <seealso cref="M:PlaywrightSharp.IFrame.EvaluateAsync(System.String)"/>
            <returns>Task that completes when the script finishes or the promise is resolved, yielding the result of the script as an row Json element.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.EvaluateAsync(System.String,System.Object)">
            <summary>
            Executes a script in browser context.
            </summary>
            <param name="expression">Script to be evaluated in browser context.</param>
            <param name="arg">Arguments to pass to script.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <seealso cref="M:PlaywrightSharp.IFrame.EvaluateAsync(System.String,System.Object)"/>
            <returns>Task that completes when the script finishes or the promise is resolved, yielding the result of the script as an row Json element.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.ScreenshotAsync(System.Boolean)">
            <summary>
            Takes a screenshot of the page.
            </summary>
            <param name="fullPage">When <c>true</c>, takes a screenshot of the full scrollable page. Defaults to <c>false</c>.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that completes when the screenshot is done, yielding the screenshot as a <see cref="t:byte[]"/>.
            </returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.ScreenshotAsync(PlaywrightSharp.Rect)">
            <summary>
            Takes a screenshot of the page.
            </summary>
            <param name="clip">Specifies clipping region of the page.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that completes when the screenshot is done, yielding the screenshot as a <see cref="t:byte[]"/>.
            </returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.ScreenshotAsync(System.String,System.Boolean,PlaywrightSharp.Rect,System.Boolean,System.Nullable{PlaywrightSharp.ScreenshotFormat},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Takes a screenshot of the page.
            </summary>
            <param name="path">The file path to save the image to.
             The screenshot type will be inferred from file extension.
            If path is a relative path, then it is resolved relative to current working directory.
            If no path is provided, the image won't be saved to the disk.</param>
            <param name="fullPage">When <c>true</c>, takes a screenshot of the full scrollable page. Defaults to <c>false</c>.</param>
            <param name="clip">Specifies clipping region of the page.</param>
            <param name="omitBackground">Hides default white background and allows capturing screenshots with transparency. Defaults to <c>false</c>.</param>
            <param name="type">Specify screenshot type, can be either jpeg or png. Defaults to 'png'.</param>
            <param name="quality">The quality of the image, between 0-100. Not applicable to png images.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that completes when the screenshot is done, yielding the screenshot as a <see cref="t:byte[]"/>.
            </returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.SetContentAsync(System.String,System.Nullable{PlaywrightSharp.LifecycleEvent},System.Nullable{System.Int32})">
            <summary>
            Sets the HTML markup to the main frame.
            </summary>
            <param name="html">HTML markup to assign to the page.</param>
            <param name="waitUntil">When to consider navigation succeeded, defaults to <see cref="F:PlaywrightSharp.LifecycleEvent.Load"/>.</param>
            <param name="timeout">Maximum navigation time in milliseconds, defaults to 30 seconds, pass <c>0</c> to disable timeout.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the javascript code executing injected the HTML finishes.</returns>
            <seealso cref="M:PlaywrightSharp.IFrame.SetContentAsync(System.String,System.Nullable{PlaywrightSharp.LifecycleEvent},System.Nullable{System.Int32})"/>
        </member>
        <member name="M:PlaywrightSharp.IPage.GetContentAsync">
            <summary>
            Gets the full HTML contents of the page, including the doctype.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the evaluation is completed, yielding the HTML content.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.SetExtraHTTPHeadersAsync(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sets extra HTTP headers that will be sent with every request the page initiates.
            </summary>
            <param name="headers">Additional http headers to be sent with every request.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the headers are set.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.SetViewportSizeAsync(System.Int32,System.Int32)">
            <summary>
            In the case of multiple pages in a single browser, each page can have its own viewport size.
            However, <see cref="M:PlaywrightSharp.IBrowser.NewContextAsync(PlaywrightSharp.BrowserContextOptions)"/> allows to set viewport size (and more) for all pages in the context at once.
            <see cref="M:PlaywrightSharp.IPage.SetViewportSizeAsync(PlaywrightSharp.ViewportSize)"/> will resize the page.A lot of websites don't expect phones to change size, so you should set the viewport size before navigating to the page.
            </summary>
            <param name="width">Viewport width.</param>
            <param name="height">Viewport height.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the viewport is set.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.SetViewportSizeAsync(PlaywrightSharp.ViewportSize)">
            <summary>
            In the case of multiple pages in a single browser, each page can have its own viewport size.
            However, <see cref="M:PlaywrightSharp.IBrowser.NewContextAsync(PlaywrightSharp.BrowserContextOptions)"/> allows to set viewport size (and more) for all pages in the context at once.
            <see cref="M:PlaywrightSharp.IPage.SetViewportSizeAsync(PlaywrightSharp.ViewportSize)"/> will resize the page.A lot of websites don't expect phones to change size, so you should set the viewport size before navigating to the page.
            </summary>
            <param name="viewportSize">Viewport to set.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the viewport is set.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.QuerySelectorAsync(System.String)">
            <summary>
            The method runs <c>document.querySelector</c> within the page. If no element matches the selector, the return value resolve to <c>null</c>.
            </summary>
            <param name="selector">A selector to query page for.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that completes when the javascript function finishes, yielding an <see cref="T:PlaywrightSharp.IElementHandle"/>.
            </returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.QuerySelectorAllAsync(System.String)">
            <summary>
            The method runs <c>Array.from(document.querySelectorAll(selector))</c> within the page.
            </summary>
            <param name="selector">A selector to query page for.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that completes when the javascript function finishes, yielding an array of <see cref="T:PlaywrightSharp.IElementHandle"/>.
            </returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.EvaluateHandleAsync(System.String)">
            <summary>
            Executes a script in browser context.
            </summary>
            <param name="expression">Script to be evaluated in browser context.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            <see cref="T:PlaywrightSharp.IJSHandle"/> instances can be passed as arguments.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when function is executed, yielding the return value.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.EvaluateHandleAsync(System.String,System.Object)">
            <summary>
            Executes a script in browser context.
            </summary>
            <param name="expression">Script to be evaluated in browser context.</param>
            <param name="arg">Function arguments.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            <see cref="T:PlaywrightSharp.IJSHandle"/> instances can be passed as arguments.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when function is executed, yielding the return value.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.AddScriptTagAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Adds a <c><![CDATA[<script>]]></c> tag into the page with the desired url or content.
            </summary>
            <param name="url">URL of a script to be added.</param>
            <param name="path">Path to the JavaScript file to be injected into frame. If path is a relative path, then it is resolved relative to current working directory.</param>
            <param name="content">Raw JavaScript content to be injected into frame.</param>
            <param name="type">Script type. Use 'module' in order to load a Javascript ES6 module.</param>
            <remarks>
            Shortcut for <c>page.MainFrame.AddScriptTagAsync(options)</c>.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the tag is added, yielding the added tag as an <see cref="T:PlaywrightSharp.IElementHandle"/> when the script's onload fires or when the script content was injected into frame.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.AddStyleTagAsync(System.String,System.String,System.String)">
            <summary>
            Adds a <c><![CDATA[<link rel="stylesheet">]]></c> tag into the page with the desired url or a <c><![CDATA[<link rel="stylesheet">]]></c> tag with the content.
            </summary>
            <param name="url">URL of the link tag.</param>
            <param name="path">Path to the CSS file to be injected into frame. If path is a relative path, then it is resolved relative to current working directory.</param>
            <param name="content">Raw CSS content to be injected into frame.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the stylesheet's onload fires or when the CSS content was injected into frame, yieling the added <see cref="T:PlaywrightSharp.IElementHandle"/>.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.CheckAsync(System.String,System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            This method fetches an element with selector, if element is not already checked, it scrolls it into view if needed, and then uses <see cref="M:PlaywrightSharp.IPage.ClickAsync(System.String,System.Int32,PlaywrightSharp.Input.MouseButton,System.Int32,PlaywrightSharp.Input.Modifier[],System.Nullable{System.Drawing.Point},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})"/> to click in the center of the element.
            If there's no element matching selector, the method waits until a matching element appears in the DOM.
            If the element is detached during the actionability checks, the action is retried.
            </summary>
            <param name="selector">A selector to search for element to check. If there are multiple elements satisfying the selector, the first will be clicked.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="force">Whether to pass the actionability checks.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the element is successfully clicked.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.UncheckAsync(System.String,System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            This method fetches an element with selector, if element is not already unchecked, it scrolls it into view if needed, and then uses <see cref="M:PlaywrightSharp.IPage.ClickAsync(System.String,System.Int32,PlaywrightSharp.Input.MouseButton,System.Int32,PlaywrightSharp.Input.Modifier[],System.Nullable{System.Drawing.Point},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})"/> to click in the center of the element.
            If there's no element matching selector, the method waits until a matching element appears in the DOM.
            If the element is detached during the actionability checks, the action is retried.
            </summary>
            <param name="selector">A selector to search for element to unchecked. If there are multiple elements satisfying the selector, the first will be clicked.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="force">Whether to pass the actionability checks.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the element is successfully clicked.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.ClickAsync(System.String,System.Int32,PlaywrightSharp.Input.MouseButton,System.Int32,PlaywrightSharp.Input.Modifier[],System.Nullable{System.Drawing.Point},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Fetches an element with <paramref name="selector"/>, scrolls it into view if needed, and then uses <see cref="P:PlaywrightSharp.IPage.Mouse"/> to click in the center of the element.
            </summary>
            <param name="selector">A selector to search for element to click. If there are multiple elements satisfying the selector, the first will be clicked.</param>
            <param name="delay">Time to wait between <c>mousedown</c> and <c>mouseup</c> in milliseconds. Defaults to 0.</param>
            <param name="button">Button to click. Details to <see cref="F:PlaywrightSharp.Input.MouseButton.Left"/>.</param>
            <param name="clickCount">Click count. Defaults to 1.</param>
            <param name="modifiers">Modifier keys to press. Ensures that only these modifiers are pressed during the click, and then restores current modifiers back. If not specified, currently pressed modifiers are used.</param>
            <param name="position">A point to click relative to the top-left corner of element padding box. If not specified, clicks to some visible point of the element.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="force">Whether to pass the actionability checks.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the element matching <paramref name="selector"/> is successfully clicked.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.DblClickAsync(System.String,System.Int32,PlaywrightSharp.Input.MouseButton,PlaywrightSharp.Input.Modifier[],System.Nullable{System.Drawing.Point},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Fetches an element with <paramref name="selector"/>, scrolls it into view if needed, and then uses <see cref="P:PlaywrightSharp.IPage.Mouse"/> to double click in the center of the element.
            </summary>
            <param name="selector">A selector to search for element to click. If there are multiple elements satisfying the selector, the first will be clicked.</param>
            <param name="delay">Time to wait between <c>mousedown</c> and <c>mouseup</c> in milliseconds. Defaults to 0.</param>
            <param name="button">Button to click. Details to <see cref="F:PlaywrightSharp.Input.MouseButton.Left"/>.</param>
            <param name="modifiers">Modifier keys to press. Ensures that only these modifiers are pressed during the click, and then restores current modifiers back. If not specified, currently pressed modifiers are used.</param>
            <param name="position">A point to click relative to the top-left corner of element padding box. If not specified, clicks to some visible point of the element.</param>
            <param name="timeout">Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> method.</param>
            <param name="force">Whether to pass the actionability checks.</param>
            <param name="noWaitAfter">Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading.
            You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to false.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the element matching <paramref name="selector"/> is successfully double clicked.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.GoBackAsync(System.Nullable{System.Int32},System.Nullable{PlaywrightSharp.LifecycleEvent})">
            <summary>
            Navigate to the previous page in history.
            </summary>
            <param name="timeout">Maximum navigation time in milliseconds, defaults to 30 seconds, pass <c>0</c> to disable timeout.</param>
            <param name="waitUntil">When to consider navigation succeeded, defaults to <see cref="F:PlaywrightSharp.LifecycleEvent.Load"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes to the main resource response. In case of multiple redirects,
            the navigation will resolve with the response of the last redirect. If can not go back, resolves to null.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.GoForwardAsync(System.Nullable{System.Int32},System.Nullable{PlaywrightSharp.LifecycleEvent})">
            <summary>
            Navigate to the next page in history.
            </summary>
            <param name="timeout">Maximum navigation time in milliseconds, defaults to 30 seconds, pass <c>0</c> to disable timeout.</param>
            <param name="waitUntil">When to consider navigation succeeded, defaults to <see cref="F:PlaywrightSharp.LifecycleEvent.Load"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes to the main resource response. In case of multiple redirects,
            the navigation will resolve with the response of the last redirect. If can not go forward, resolves to null.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.ReloadAsync(System.Nullable{System.Int32},System.Nullable{PlaywrightSharp.LifecycleEvent})">
            <summary>
            Reloads the page.
            </summary>
            <param name="timeout">Maximum navigation time in milliseconds, defaults to 30 seconds, pass <c>0</c> to disable timeout.</param>
            <param name="waitUntil">When to consider navigation succeeded, defaults to <see cref="F:PlaywrightSharp.LifecycleEvent.Load"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes to the main resource response. In case of multiple redirects, the navigation will resolve with the response of the last redirect.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.AddInitScriptAsync(System.String,System.Object[],System.String,System.String)">
            <summary>
            Adds a script which would be evaluated in one of the following scenarios:
            * Whenever a page is created in the browser context or is navigated.
            * Whenever a child frame is attached or navigated in any page in the browser context.In this case, the script is evaluated in the context of the newly attached frame.
            </summary>
            <param name="script">Script to be evaluated in all pages in the browser context or script path.</param>
            <param name="arg">Optional argument to pass to script .</param>
            <param name="path">Gets or sets the path to the JavaScript file to be injected into frame. If its a relative path, then it is resolved relative to <see cref="M:System.IO.Directory.GetCurrentDirectory"/>.</param>
            <param name="content">Gets or sets the raw JavaScript content to be injected into frame.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the registration was completed.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.ExposeBindingAsync(System.String,System.Action{PlaywrightSharp.BindingSource})">
            <summary>
            The method adds a function called name on the window object of every frame in every page in the context.
            When called, the function executes <paramref name="callback"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves when <paramref name="callback"/> completes.
            </summary>
            <param name="name">Name of the function on the window object.</param>
            <param name="callback">Callback function which will be called in Playwright's context.</param>
            <remarks>
            If the <paramref name="callback"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:PlaywrightSharp.IPage.ExposeBindingAsync(System.String,System.Action{PlaywrightSharp.BindingSource})"/> survive navigations.
            </remarks>
            <returns>Task.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.ExposeBindingAsync``1(System.String,System.Action{PlaywrightSharp.BindingSource,``0})">
            <summary>
            The method adds a function called name on the window object of every frame in every page in the context.
            When called, the function executes <paramref name="callback"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves when <paramref name="callback"/> completes.
            </summary>
            <typeparam name="T">The parameter of <paramref name="callback"/>.</typeparam>
            <param name="name">Name of the function on the window object.</param>
            <param name="callback">Callback function which will be called in Playwright's context.</param>
            <remarks>
            If the <paramref name="callback"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:PlaywrightSharp.IPage.ExposeBindingAsync(System.String,System.Action{PlaywrightSharp.BindingSource})"/> survive navigations.
            </remarks>
            <returns>Task.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.ExposeBindingAsync``1(System.String,System.Func{PlaywrightSharp.BindingSource,``0})">
            <summary>
            The method adds a function called name on the window object of every frame in every page in the context.
            When called, the function executes <paramref name="callback"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves to the return value of <paramref name="callback"/>.
            </summary>
            <typeparam name="TResult">The result of <paramref name="callback"/>.</typeparam>
            <param name="name">Name of the function on the window object.</param>
            <param name="callback">Callback function which will be called in Playwright's context.</param>
            <remarks>
            If the <paramref name="callback"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:PlaywrightSharp.IPage.ExposeBindingAsync``1(System.String,System.Func{PlaywrightSharp.BindingSource,``0})"/> survive navigations.
            </remarks>
            <returns>Task.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.ExposeBindingAsync``2(System.String,System.Func{PlaywrightSharp.BindingSource,``0,``1})">
            <summary>
            The method adds a function called name on the window object of every frame in every page in the context.
            When called, the function executes <paramref name="callback"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves to the return value of <paramref name="callback"/>.
            </summary>
            <typeparam name="T">The parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="TResult">The result of <paramref name="callback"/>.</typeparam>
            <param name="name">Name of the function on the window object.</param>
            <param name="callback">Callback function which will be called in Playwright's context.</param>
            <remarks>
            If the <paramref name="callback"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:PlaywrightSharp.IPage.ExposeBindingAsync``2(System.String,System.Func{PlaywrightSharp.BindingSource,``0,``1})"/> survive navigations.
            </remarks>
            <returns>Task.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.ExposeBindingAsync``1(System.String,System.Func{PlaywrightSharp.BindingSource,PlaywrightSharp.IJSHandle,``0})">
            <summary>
            The method adds a function called name on the window object of every frame in every page in the context.
            When called, the function executes <paramref name="callback"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves to the return value of <paramref name="callback"/>.
            </summary>
            <typeparam name="TResult">The result of <paramref name="callback"/>.</typeparam>
            <param name="name">Name of the function on the window object.</param>
            <param name="callback">Callback function which will be called in Playwright's context.</param>
            <remarks>
            If the <paramref name="callback"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:PlaywrightSharp.IPage.ExposeBindingAsync``2(System.String,System.Func{PlaywrightSharp.BindingSource,``0,``1})"/> survive navigations.
            </remarks>
            <returns>Task.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.ExposeBindingAsync``3(System.String,System.Func{PlaywrightSharp.BindingSource,``0,``1,``2})">
            <summary>
            The method adds a function called name on the window object of every frame in every page in the context.
            When called, the function executes <paramref name="callback"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves to the return value of <paramref name="callback"/>.
            </summary>
            <typeparam name="T1">The first parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="T2">The second parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="TResult">The result of <paramref name="callback"/>.</typeparam>
            <param name="name">Name of the function on the window object.</param>
            <param name="callback">Callback function which will be called in Playwright's context.</param>
            <remarks>
            If the <paramref name="callback"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:PlaywrightSharp.IPage.ExposeBindingAsync``3(System.String,System.Func{PlaywrightSharp.BindingSource,``0,``1,``2})"/> survive navigations.
            </remarks>
            <returns>Task.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.ExposeBindingAsync``4(System.String,System.Func{PlaywrightSharp.BindingSource,``0,``1,``2,``3})">
            <summary>
            The method adds a function called name on the window object of every frame in every page in the context.
            When called, the function executes <paramref name="callback"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves to the return value of <paramref name="callback"/>.
            </summary>
            <typeparam name="T1">The first parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="T2">The second parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="T3">The third parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="TResult">The result of <paramref name="callback"/>.</typeparam>
            <param name="name">Name of the function on the window object.</param>
            <param name="callback">Callback function which will be called in Playwright's context.</param>
            <remarks>
            If the <paramref name="callback"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:PlaywrightSharp.IPage.ExposeBindingAsync``4(System.String,System.Func{PlaywrightSharp.BindingSource,``0,``1,``2,``3})"/> survive navigations.
            </remarks>
            <returns>Task.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.ExposeBindingAsync``5(System.String,System.Func{PlaywrightSharp.BindingSource,``0,``1,``2,``3,``4})">
            <summary>
            The method adds a function called name on the window object of every frame in every page in the context.
            When called, the function executes <paramref name="callback"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves to the return value of <paramref name="callback"/>.
            </summary>
            <typeparam name="T1">The first parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="T2">The second parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="T3">The third parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="T4">The fourth parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="TResult">The result of <paramref name="callback"/>.</typeparam>
            <param name="name">Name of the function on the window object.</param>
            <param name="callback">Callback function which will be called in Playwright's context.</param>
            <remarks>
            If the <paramref name="callback"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:PlaywrightSharp.IPage.ExposeBindingAsync``5(System.String,System.Func{PlaywrightSharp.BindingSource,``0,``1,``2,``3,``4})"/> survive navigations.
            </remarks>
            <returns>Task.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.ExposeFunctionAsync(System.String,System.Action)">
            <summary>
            The method adds a function called name on the window object of every frame in every page in the context.
            When called, the function executes <paramref name="callback"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves when <paramref name="callback"/> completes.
            </summary>
            <param name="name">Name of the function on the window object.</param>
            <param name="callback">Callback function which will be called in Playwright's context.</param>
            <remarks>
            If the <paramref name="callback"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:PlaywrightSharp.IPage.ExposeFunctionAsync(System.String,System.Action)"/> survive navigations.
            </remarks>
            <returns>Task.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.ExposeFunctionAsync``1(System.String,System.Action{``0})">
            <summary>
            The method adds a function called name on the window object of every frame in every page in the context.
            When called, the function executes <paramref name="callback"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves when <paramref name="callback"/> completes.
            </summary>
            <param name="name">Name of the function on the window object.</param>
            <param name="callback">Callback function which will be called in Playwright's context.</param>
            <typeparam name="T">The parameter of <paramref name="callback"/>.</typeparam>
            <remarks>
            If the <paramref name="callback"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:PlaywrightSharp.IPage.ExposeFunctionAsync(System.String,System.Action)"/> survive navigations.
            </remarks>
            <returns>Task.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.ExposeFunctionAsync``1(System.String,System.Func{``0})">
            <summary>
            The method adds a function called name on the window object of every frame in every page in the context.
            When called, the function executes <paramref name="callback"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves to the return value of <paramref name="callback"/>.
            </summary>
            <typeparam name="TResult">The result of <paramref name="callback"/>.</typeparam>
            <param name="name">Name of the function on the window object.</param>
            <param name="callback">Callback function which will be called in Playwright's context.</param>
            <remarks>
            If the <paramref name="callback"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:PlaywrightSharp.IPage.ExposeFunctionAsync``1(System.String,System.Func{``0})"/> survive navigations.
            </remarks>
            <returns>Task.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.ExposeFunctionAsync``2(System.String,System.Func{``0,``1})">
            <summary>
            The method adds a function called name on the window object of every frame in every page in the context.
            When called, the function executes <paramref name="callback"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves to the return value of <paramref name="callback"/>.
            </summary>
            <typeparam name="T">The parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="TResult">The result of <paramref name="callback"/>.</typeparam>
            <param name="name">Name of the function on the window object.</param>
            <param name="callback">Callback function which will be called in Playwright's context.</param>
            <remarks>
            If the <paramref name="callback"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:PlaywrightSharp.IPage.ExposeFunctionAsync``2(System.String,System.Func{``0,``1})"/> survive navigations.
            </remarks>
            <returns>Task.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.ExposeFunctionAsync``3(System.String,System.Func{``0,``1,``2})">
            <summary>
            The method adds a function called name on the window object of every frame in every page in the context.
            When called, the function executes <paramref name="callback"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves to the return value of <paramref name="callback"/>.
            </summary>
            <typeparam name="T1">The first parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="T2">The second parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="TResult">The result of <paramref name="callback"/>.</typeparam>
            <param name="name">Name of the function on the window object.</param>
            <param name="callback">Callback function which will be called in Playwright's context.</param>
            <remarks>
            If the <paramref name="callback"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:PlaywrightSharp.IPage.ExposeFunctionAsync``3(System.String,System.Func{``0,``1,``2})"/> survive navigations.
            </remarks>
            <returns>Task.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.ExposeFunctionAsync``4(System.String,System.Func{``0,``1,``2,``3})">
            <summary>
            The method adds a function called name on the window object of every frame in every page in the context.
            When called, the function executes <paramref name="callback"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves to the return value of <paramref name="callback"/>.
            </summary>
            <typeparam name="T1">The first parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="T2">The second parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="T3">The third parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="TResult">The result of <paramref name="callback"/>.</typeparam>
            <param name="name">Name of the function on the window object.</param>
            <param name="callback">Callback function which will be called in Playwright's context.</param>
            <remarks>
            If the <paramref name="callback"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:PlaywrightSharp.IPage.ExposeFunctionAsync``4(System.String,System.Func{``0,``1,``2,``3})"/> survive navigations.
            </remarks>
            <returns>Task.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.ExposeFunctionAsync``5(System.String,System.Func{``0,``1,``2,``3,``4})">
            <summary>
            The method adds a function called name on the window object of every frame in every page in the context.
            When called, the function executes <paramref name="callback"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves to the return value of <paramref name="callback"/>.
            </summary>
            <typeparam name="T1">The first parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="T2">The second parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="T3">The third parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="T4">The fourth parameter of <paramref name="callback"/>.</typeparam>
            <typeparam name="TResult">The result of <paramref name="callback"/>.</typeparam>
            <param name="name">Name of the function on the window object.</param>
            <param name="callback">Callback function which will be called in Playwright's context.</param>
            <remarks>
            If the <paramref name="callback"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:PlaywrightSharp.IPage.ExposeFunctionAsync``5(System.String,System.Func{``0,``1,``2,``3,``4})"/> survive navigations.
            </remarks>
            <returns>Task.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.WaitForResponseAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            Waits for a response.
            </summary>
            <example>
            <code>
            <![CDATA[
            var firstResponse = await page.WaitForResponseAsync("http://example.com/resource");
            return firstResponse.Url;
            ]]>
            </code>
            </example>
            <param name="url">URL to wait for.</param>
            <param name="timeout">/// Maximum time to wait for in milliseconds. Pass 0 to disable timeout.
            The default value can be changed by setting the <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> property.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when a matching response is received, yielding the response being waited for.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.WaitForResponseAsync(System.Text.RegularExpressions.Regex,System.Nullable{System.Int32})">
            <summary>
            Waits for a response.
            </summary>
            <param name="url">Regex to wait for.</param>
            <param name="timeout">/// Maximum time to wait for in milliseconds. Pass 0 to disable timeout.
            The default value can be changed by setting the <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> property.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when a matching response is received, yielding the response being waited for.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.WaitForResponseAsync(System.Func{PlaywrightSharp.IResponse,System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Waits for a response.
            </summary>
            <param name="predicate">Function used to evaluate requets.</param>
            <param name="timeout">/// Maximum time to wait for in milliseconds. Pass 0 to disable timeout.
            The default value can be changed by setting the <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/> property.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when a matching response is received, yielding the response being waited for.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.GetPdfAsync(System.String,System.Decimal,System.Boolean,System.String,System.String,System.Boolean,System.Boolean,System.String,System.Nullable{PlaywrightSharp.PaperFormat},System.String,System.String,PlaywrightSharp.Margin,System.Boolean)">
            <summary>
             generates a pdf of the page with <see cref="F:PlaywrightSharp.MediaType.Print"/> css media. To generate a pdf with <see cref="F:PlaywrightSharp.MediaType.Screen"/> media call <see cref="M:PlaywrightSharp.IPage.EmulateMediaAsync(System.Nullable{PlaywrightSharp.MediaType},System.Nullable{PlaywrightSharp.ColorScheme})"/> with <see cref="F:PlaywrightSharp.MediaType.Screen"/>.
            </summary>
            <param name="path">The file path to save the PDF to. paths are resolved using <see cref="M:System.IO.Path.GetFullPath(System.String)"/>.</param>
            <param name="scale">Scale of the webpage rendering. Defaults to <c>1</c>. Scale amount must be between 0.1 and 2.</param>
            <param name="displayHeaderFooter">Display header and footer. Defaults to <c>false</c>.</param>
            <param name="headerTemplate">HTML template for the print header. Should be valid HTML markup with following classes used to inject printing values into them:
              <c>date</c> - formatted print date
              <c>title</c> - document title
              <c>url</c> - document location
              <c>pageNumber</c> - current page number
              <c>totalPages</c> - total pages in the document.</param>
            <param name="footerTemplate">HTML template for the print footer. Should be valid HTML markup with following classes used to inject printing values into them:
              <c>date</c> - formatted print date
              <c>title</c> - document title
              <c>url</c> - document location
              <c>pageNumber</c> - current page number
              <c>totalPages</c> - total pages in the document.</param>
            <param name="printBackground">Print background graphics. Defaults to <c>false</c>.</param>
            <param name="landscape">Paper orientation.. Defaults to <c>false</c>.</param>
            <param name="pageRanges">Paper ranges to print, e.g., <c>1-5, 8, 11-13</c>. Defaults to the empty string, which means print all pages.</param>
            <param name="format">Paper format. If set, takes priority over <paramref name="width"/> and <paramref name="height"/>.</param>
            <param name="width">Paper width, accepts values labeled with units.</param>
            <param name="height">Paper height, accepts values labeled with units.</param>
            <param name="margin">Paper margins, defaults to none.</param>
            <param name="preferCSSPageSize">Give any CSS <c>@page</c> size declared in the page priority over what is declared in <c>width</c> and <c>height</c> or <c>format</c> options.
            Defaults to <c>false</c>, which will scale the content to fit the paper size.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the PDF was generated.</returns>
            <remarks>
            Generating a pdf is currently only supported in Chrome headless.
            </remarks>
        </member>
        <member name="M:PlaywrightSharp.IPage.RouteAsync(System.String,System.Action{PlaywrightSharp.Route,PlaywrightSharp.IRequest})">
            <summary>
            Routing provides the capability to modify network requests that are made by a page.
            Once route is enabled, every request matching the url pattern will stall unless it's continued, fulfilled or aborted.
            </summary>
            <param name="url">A glob pattern to match while routing.</param>
            <param name="handler">Handler function to route the request.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the registration was completed.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.RouteAsync(System.Text.RegularExpressions.Regex,System.Action{PlaywrightSharp.Route,PlaywrightSharp.IRequest})">
            <summary>
            Routing provides the capability to modify network requests that are made by a page.
            Once route is enabled, every request matching the url pattern will stall unless it's continued, fulfilled or aborted.
            </summary>
            <param name="url">A regex to match while routing.</param>
            <param name="handler">Handler function to route the request.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the registration was completed.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.RouteAsync(System.Func{System.String,System.Boolean},System.Action{PlaywrightSharp.Route,PlaywrightSharp.IRequest})">
            <summary>
            Routing provides the capability to modify network requests that are made by a page.
            Once route is enabled, every request matching the url pattern will stall unless it's continued, fulfilled or aborted.
            </summary>
            <param name="url">A fucntion that evaluate the URL match.</param>
            <param name="handler">Handler function to route the request.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the registration was completed.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.UnrouteAsync(System.String,System.Action{PlaywrightSharp.Route,PlaywrightSharp.IRequest})">
            <summary>
            Removes a route created with <see cref="M:PlaywrightSharp.IPage.RouteAsync(System.String,System.Action{PlaywrightSharp.Route,PlaywrightSharp.IRequest})"/>. When handler is not specified, removes all routes for the url.
            </summary>
            <param name="url">A glob pattern used to match while routing.</param>
            <param name="handler">Handler function used to route a request.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the registration was completed.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.UnrouteAsync(System.Text.RegularExpressions.Regex,System.Action{PlaywrightSharp.Route,PlaywrightSharp.IRequest})">
            <summary>
            Removes a route created with <see cref="M:PlaywrightSharp.IPage.RouteAsync(System.Text.RegularExpressions.Regex,System.Action{PlaywrightSharp.Route,PlaywrightSharp.IRequest})"/>. When handler is not specified, removes all routes for the url.
            </summary>
            <param name="url">A regex used to match while routing.</param>
            <param name="handler">Handler function used to route a request.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the registration was completed.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.UnrouteAsync(System.Func{System.String,System.Boolean},System.Action{PlaywrightSharp.Route,PlaywrightSharp.IRequest})">
            <summary>
            Removes a route created with <see cref="M:PlaywrightSharp.IPage.RouteAsync(System.Text.RegularExpressions.Regex,System.Action{PlaywrightSharp.Route,PlaywrightSharp.IRequest})"/>. When handler is not specified, removes all routes for the url.
            </summary>
            <param name="url">A function used to match while routing.</param>
            <param name="handler">Handler function used to route a request.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the registration was completed.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.DispatchEventAsync(System.String,System.String,System.Object,System.Nullable{System.Int32})">
            <summary>
            Under the hood, it creates an instance of an event based on the given type, initializes it with eventInit properties and dispatches it on the element.
            Events are composed, cancelable and bubble by default.
            </summary>
            <param name="selector">A selector to search for element to use. If there are multiple elements satisfying the selector, the first will be used.</param>
            <param name="type">DOM event type: "click", "dragstart", etc.</param>
            <param name="eventInit">Event-specific initialization properties.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the event was dispatched.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.GetAttributeAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Returns element attribute value.
            </summary>
            <param name="selector">A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked.</param>
            <param name="name">Attribute name to get the value for.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the attribute was evaluated (or timeout), yielding the value or the attribute.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.GetInnerHtmlAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            Resolves to the element.innerHTML.
            </summary>
            <param name="selector">A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the attribute was evaluated (or timeout), yielding the innerHTML of the element.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.GetInnerTextAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            Resolves to the element.innerText.
            </summary>
            <param name="selector">A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the attribute was evaluated (or timeout), yielding the innerText of the element.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.GetTextContentAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            Resolves to the element.textContent.
            </summary>
            <param name="selector">A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the attribute was evaluated (or timeout), yielding the textContent of the element.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.BringToFrontAsync">
            <summary>
            Brings page to front (activates tab).
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message was confirmed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.TapAsync(System.String,PlaywrightSharp.Input.Modifier[],System.Nullable{System.Drawing.Point},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})">
            <inheritdoc cref="M:PlaywrightSharp.IFrame.TapAsync(System.String,PlaywrightSharp.Input.Modifier[],System.Nullable{System.Drawing.Point},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})"/>
        </member>
        <member name="M:PlaywrightSharp.IPage.IsCheckedAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            Returns whether the element is checked. Throws if the element is not a checkbox or radio input.
            </summary>
            <param name="selector">A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is processed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.IsDisabledAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            Returns whether the element is disabled, the opposite of <see cref="M:PlaywrightSharp.IPage.IsEnabledAsync(System.String,System.Nullable{System.Int32})"/>.
            </summary>
            <param name="selector">A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is processed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.IsEditableAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            Returns whether the element is editable.
            </summary>
            <param name="selector">A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is processed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.IsEnabledAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            Returns whether the element is enabled.
            </summary>
            <param name="selector">A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is processed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.IsHiddenAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            Returns whether the element is hidden, the opposite of <see cref="M:PlaywrightSharp.IPage.IsVisibleAsync(System.String,System.Nullable{System.Int32})"/>.
            </summary>
            <param name="selector">A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is processed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.IsVisibleAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            Returns whether the element is visible.
            </summary>
            <param name="selector">A selector to search for an element. If there are multiple elements satisfying the selector, the first will be picked.</param>
            <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
            The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is processed by the browser.</returns>
        </member>
        <member name="M:PlaywrightSharp.IPage.PauseAsync">
             <summary>
             Pauses script execution. Playwright will stop executing the script and wait for the user to either press 'Resume' button
             in the page overlay or to call `playwright.resume()` in the DevTools console.
            
             User can inspect selectors or perform manual steps while paused. Resume will continue running the original script from
             the place it was paused.
            
             > NOTE: This method requires Playwright to be started in a headed mode, with a falsy `headless` value in the <seealso cref="M:PlaywrightSharp.IBrowserType.LaunchAsync(System.Nullable{System.Boolean},System.String[],System.String,System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String[],System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.Object},PlaywrightSharp.ProxySettings,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})"/>.
             </summary>
             <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is processed by the browser.</returns>
        </member>
        <member name="T:PlaywrightSharp.IPlaywright">
            <summary>
            IPlaywright provides methods to interact with the playwright server.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IPlaywright.Chromium">
            <summary>
            Gets the Chromium browser type from the playwright server.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IPlaywright.Firefox">
            <summary>
            Gets the Firefox browser type from the playwright server.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IPlaywright.Webkit">
            <summary>
            Gets the Webkit browser type from the playwright server.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IPlaywright.Devices">
            <summary>
            Returns a list of devices to be used with <see cref="M:PlaywrightSharp.IBrowser.NewContextAsync(PlaywrightSharp.BrowserContextOptions)"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IPlaywright.Selectors">
            <summary>
            Selectors can be used to install custom selector engines.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IPlaywright.Item(System.String)">
            <summary>
            Gets a <see cref="T:PlaywrightSharp.IBrowserType"/>.
            </summary>
            <param name="browserType"><see cref="T:PlaywrightSharp.IBrowserType"/> name. You can get the names from <see cref="T:PlaywrightSharp.BrowserType"/>.
            e.g.: <see cref="F:PlaywrightSharp.BrowserType.Chromium"/>, <see cref="F:PlaywrightSharp.BrowserType.Firefox"/> or <see cref="F:PlaywrightSharp.BrowserType.Webkit"/>.
            </param>
        </member>
        <member name="T:PlaywrightSharp.IRequest">
            <summary>
            Whenever the page sends a request, the following events are emitted by an <see cref="T:PlaywrightSharp.IPage"/>.
            <see cref="E:PlaywrightSharp.IPage.Request"/> emitted when the request is issued by the page.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IRequest.Url">
            <summary>
            URL of the request.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IRequest.Method">
            <summary>
            Gets or sets the HTTP method.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IRequest.Headers">
            <summary>
            Gets or sets the HTTP headers.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IRequest.PostData">
            <summary>
            Post data as string.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IRequest.PostDataBuffer">
            <summary>
            Post data as a byte[].
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IRequest.Frame">
            <summary>
            An <see cref="T:PlaywrightSharp.IFrame"/> that initiated this request, or null if navigating to error pages.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IRequest.IsNavigationRequest">
            <summary>
            Gets whether this request is driving frame's navigation.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IRequest.ResourceType">
            <summary>
            Gets or sets the type of the resource.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IRequest.RedirectedFrom">
            <summary>
            When the server responds with a redirect, Playwright creates a new <see cref="T:PlaywrightSharp.IRequest"/> object.
            The two requests are connected by <see cref="P:PlaywrightSharp.IRequest.RedirectedFrom"/> and <see cref="P:PlaywrightSharp.IRequest.RedirectedTo"/> methods.
            When multiple server redirects has happened, it is possible to construct the whole redirect chain by repeatedly calling <see cref="P:PlaywrightSharp.IRequest.RedirectedFrom"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IRequest.RedirectedTo">
            <summary>
            When the server responds with a redirect, Playwright creates a new <see cref="T:PlaywrightSharp.IRequest"/> object.
            The two requests are connected by <see cref="P:PlaywrightSharp.IRequest.RedirectedFrom"/> and <see cref="P:PlaywrightSharp.IRequest.RedirectedTo"/> methods.
            When multiple server redirects has happened, it is possible to construct the whole redirect chain by repeatedly calling <see cref="P:PlaywrightSharp.IRequest.RedirectedFrom"/>..
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IRequest.Failure">
            <summary>
            Gets or sets the failure.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IRequest.Timing">
            <summary>
            Returns resource timing information for given request.
            Most of the timing values become available upon the response, responseEnd becomes available when request finishes.
            Find more information at <see href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming">Resource Timing API</see>.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.IRequest.GetResponseAsync">
            <summary>
            Responsed attached to the request.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the response is resolved.</returns>
        </member>
        <member name="M:PlaywrightSharp.IRequest.GetPostDataJson(System.Text.Json.JsonDocumentOptions)">
            <summary>
            Returns the parsed request's body for form-urlencoded and JSON as a fallback if any.
            </summary>
            <param name="options">Parser options.</param>
            <returns>A <see cref="T:System.Text.Json.JsonDocument"/> representing the request body.</returns>
        </member>
        <member name="T:PlaywrightSharp.IResponse">
            <summary>
            Represents responses which are received by page.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IResponse.Status">
            <summary>
            Status code of the response.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IResponse.StatusText">
            <summary>
            Contains the status text of the response (e.g. usually an "OK" for a success).
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IResponse.Frame">
            <summary>
            An <see cref="T:PlaywrightSharp.IFrame"/> that initiated this response, or null if navigating to error pages.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IResponse.Url">
            <summary>
            The URL of the response.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IResponse.Headers">
            <summary>
            An object with HTTP headers associated with the response. All header names are lower-case.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IResponse.Ok">
            <summary>
            Whether the response was successful (status in the range 200-299) or not.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IResponse.Request">
            <summary>
            A matching <see cref="T:PlaywrightSharp.IRequest"/> object.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.IResponse.GetTextAsync">
            <summary>
            A text representation of response body.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the text was processed, yielding to a text representation of response body.</returns>
        </member>
        <member name="M:PlaywrightSharp.IResponse.GetJsonAsync(System.Text.Json.JsonDocumentOptions)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves to a <see cref="T:System.Text.Json.JsonDocument"/> representation of response body.
            </summary>
            <param name="options">Parser options.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the json body is parsed, yielding a <see cref="T:System.Text.Json.JsonDocument"/> representation of response body.</returns>
        </member>
        <member name="M:PlaywrightSharp.IResponse.GetJsonAsync``1(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves to a <typeparamref name="T"/> representation of response body.
            </summary>
            <typeparam name="T">Return type.</typeparam>
            <param name="options">Parser options.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the json body is parsed, yielding a <typeparamref name="T"/> representation of response body.</returns>
        </member>
        <member name="M:PlaywrightSharp.IResponse.GetBodyAsync">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves to a buffer with response body.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the response is returned by the server, yielding a <see cref="T:System.Byte"/> array.</returns>
        </member>
        <member name="M:PlaywrightSharp.IResponse.FinishedAsync">
            <summary>
            Waits for this response to finish, returns failure error if request failed.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the response finished.</returns>
        </member>
        <member name="T:PlaywrightSharp.ITouchscreen">
            <summary>
            The Touchscreen class operates in main-frame CSS pixels relative to the top-left corner of the viewport.
            Methods on the touchscreen can only be used in browser contexts that have been intialized with hasTouch set to true.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.ITouchscreen.TapAsync(System.Drawing.Point)">
            <summary>
            Dispatches a touchstart and touchend event with a single touch at the position (x,y).
            </summary>
            <param name="point">The point at which to dispatch the touch.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message is confirmed by the browser.</returns>
        </member>
        <member name="T:PlaywrightSharp.IVideo">
            <summary>
            When browser context is created with the videosPath option, each page has a video object associated with it.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.IVideo.GetPathAsync">
            <summary>
            Returns the file system path this video will be recorded to.
            The video is guaranteed to be written to the filesystem upon closing the browser context.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the path has been resolved.</returns>
        </member>
        <member name="T:PlaywrightSharp.IWebSocket">
            <summary>
            Represents websocket connections in the page.
            </summary>
        </member>
        <member name="E:PlaywrightSharp.IWebSocket.Close">
            <summary>
            Raised when the <see cref="T:PlaywrightSharp.IWebSocket"/> closes.
            </summary>
        </member>
        <member name="E:PlaywrightSharp.IWebSocket.FrameReceived">
            <summary>
            Raised when the <see cref="T:PlaywrightSharp.IWebSocket"/> recieves a frame.
            </summary>
        </member>
        <member name="E:PlaywrightSharp.IWebSocket.FrameSent">
            <summary>
            Raised when the <see cref="T:PlaywrightSharp.IWebSocket"/> sends a frame.
            </summary>
        </member>
        <member name="E:PlaywrightSharp.IWebSocket.SocketError">
            <summary>
            Raised when the <see cref="T:PlaywrightSharp.IWebSocket"/> has an error.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IWebSocket.Url">
            <summary>
            Contains the URL of the WebSocket.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IWebSocket.IsClosed">
            <summary>
            Indicates that the web socket has been closed.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.IWebSocket.WaitForEventAsync``1(PlaywrightSharp.PlaywrightEvent{``0},System.Func{``0,System.Boolean},System.Nullable{System.Int32})">
             <summary>
             Waits for event to fire and passes its value into the predicate function. Resolves when the predicate returns truthy value.
             Will throw an Exception if the <see cref="T:PlaywrightSharp.IWebSocket"/> is closed before the event is fired.
             </summary>
             <param name="webSocketEvent">Event to wait for.</param>
             <param name="predicate">Receives the event data and resolves when the waiting should resolve.</param>
             <param name="timeout">Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout.
             The default value can be changed by using the <see cref="P:PlaywrightSharp.IBrowserContext.DefaultTimeout"/> or <see cref="P:PlaywrightSharp.IPage.DefaultTimeout"/>.</param>
             <typeparam name="T">Resulting event args.</typeparam>
             <example>
             <code>
             <![CDATA[
             // wait for console event:
             var console = await page.WaitForEvent(PageEvent.Console);
            
             // wait for popup event:
             var popup = await page.WaitForEvent(PageEvent.Popup);
            
             // wait for dialog event:
             var dialog = await page.WaitForEvent(PageEvent.Dialog);
            
             // wait for request event:
             var request = await page.WaitForEvent(PageEvent.Request);
             ]]>
             </code>
             </example>
             <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the predicate returns truthy value. Yielding the information of the event.</returns>
        </member>
        <member name="T:PlaywrightSharp.IWorker">
            <summary>
            The Worker class represents a <see href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API">WebWorker</see>.
            </summary>
        </member>
        <member name="E:PlaywrightSharp.IWorker.Close">
            <summary>
            Raised when worker gets closed.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.IWorker.Url">
            <summary>
            Gets the Worker URL.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.IWorker.EvaluateHandleAsync(System.String)">
            <summary>
            Executes a function in browser context, passing the current <see cref="T:PlaywrightSharp.IElementHandle"/> as the first argument.
            </summary>
            <param name="expression">Script to be evaluated in browser context.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            <see cref="T:PlaywrightSharp.IJSHandle"/> instances can be passed as arguments.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script is executed, yielding the return value of that script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IWorker.EvaluateHandleAsync(System.String,System.Object)">
            <summary>
            Executes a function in browser context, passing the current <see cref="T:PlaywrightSharp.IElementHandle"/> as the first argument.
            </summary>
            <param name="expression">Script to be evaluated in browser context.</param>
            <param name="arg">Arguments to pass to script.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            <see cref="T:PlaywrightSharp.IJSHandle"/> instances can be passed as arguments.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script is executed, yielding the return value of that script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IWorker.EvaluateAsync``1(System.String)">
            <summary>
            Executes a script in the frame context.
            </summary>
            <typeparam name="T">Return type.</typeparam>
            <param name="expression">Script to be evaluated in browser context.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <returns>Task that completes when the script finishes or the promise is resolved, yielding the result of the script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IWorker.EvaluateAsync(System.String)">
            <summary>
            Executes a script in the frame context.
            </summary>
            <param name="expression">Script to be evaluated in browser context.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script finishes or the promise is resolved, yielding the result of the script as an row Json element.</returns>
        </member>
        <member name="M:PlaywrightSharp.IWorker.EvaluateAsync``1(System.String,System.Object)">
            <summary>
            Executes a script in the frame context.
            </summary>
            <typeparam name="T">Return type.</typeparam>
            <param name="expression">Script to be evaluated in browser context.</param>
            <param name="arg">Arguments to pass to script.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <seealso cref="M:PlaywrightSharp.IPage.EvaluateAsync``1(System.String,System.Object)"/>
            <returns>Task that completes when the script finishes or the promise is resolved, yielding the result of the script.</returns>
        </member>
        <member name="M:PlaywrightSharp.IWorker.EvaluateAsync(System.String,System.Object)">
            <summary>
            Executes a script in the frame context.
            </summary>
            <param name="expression">Script to be evaluated in browser context.</param>
            <param name="arg">Arguments to pass to script.</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <seealso cref="M:PlaywrightSharp.IPage.EvaluateAsync(System.String,System.Object)"/>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the script finishes or the promise is resolved, yielding the result of the script as an row Json element.</returns>
        </member>
        <member name="T:PlaywrightSharp.JSCoverageEntry">
            <summary>
            JS Coverage report. See <seealso cref="M:PlaywrightSharp.ICoverage.StopJSCoverageAsync"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.JSCoverageEntry.Url">
            <summary>
            Script URL.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.JSCoverageEntry.Source">
            <summary>
            Script Source.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.JSCoverageEntry.Functions">
            <summary>
            V8-specific coverage format.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.JSCoverageEntryRange">
            <summary>
            Script range. See <see cref="T:PlaywrightSharp.JSCoverageFunction"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.JSCoverageEntryRange.StartOffset">
            <summary>
            A start offset in text, inclusive.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.JSCoverageEntryRange.EndOffset">
            <summary>
            An end offset in text, exclusive.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.JSCoverageEntryRange.Count">
            <summary>
            Count.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.JSCoverageEntryRange.Equals(System.Object)">
            <inheritdoc cref="T:System.Object"/>
        </member>
        <member name="M:PlaywrightSharp.JSCoverageEntryRange.GetHashCode">
            <inheritdoc cref="T:System.Object"/>
        </member>
        <member name="T:PlaywrightSharp.JSCoverageFunction">
            <summary>
            JS Coverage function info. See <see cref="P:PlaywrightSharp.JSCoverageEntry.Functions"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.JSCoverageFunction.FunctionName">
            <summary>
            Function Name.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.JSCoverageFunction.Ranges">
            <summary>
            Ranges.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.JSHandle">
            <inheritdoc cref="T:PlaywrightSharp.IJSHandle" />
        </member>
        <member name="P:PlaywrightSharp.JSHandle.PlaywrightSharp#Transport#Channels#IChannelOwner#Channel">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.JSHandle.PlaywrightSharp#Transport#Channels#IChannelOwner{PlaywrightSharp#JSHandle}#Channel">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.JSHandle.EvaluateHandleAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.JSHandle.EvaluateHandleAsync(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.JSHandle.EvaluateAsync``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.JSHandle.EvaluateAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.JSHandle.EvaluateAsync(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.JSHandle.EvaluateAsync``1(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.JSHandle.GetJsonValueAsync``1">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.JSHandle.GetPropertyAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.JSHandle.GetPropertiesAsync">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.JSHandle.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.JSHandle.ToString">
            <inheritdoc />
        </member>
        <member name="T:PlaywrightSharp.KeyDefinition">
            <summary>
            Represents a definition of a keyboard key.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.KeyDefinition.KeyCode">
            <summary>
            Gets or sets the key code.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.KeyDefinition.KeyCodeWithoutLocation">
            <summary>
            Gets or sets the key code without location.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.KeyDefinition.ShiftKeyCode">
            <summary>
            Gets or sets the shift key code.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.KeyDefinition.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.KeyDefinition.ShiftKey">
            <summary>
            Gets or sets the shift key.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.KeyDefinition.Code">
            <summary>
            Gets or sets the code.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.KeyDefinition.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.KeyDefinition.ShiftText">
            <summary>
            Gets or sets the shift text.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.KeyDefinition.Location">
            <summary>
            Gets or sets the location.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.KeyDefinition.WindowsVirtualKeyCode">
            <summary>
            Gets or sets the windows virtual key code.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.KeyDefinitions">
            <summary>
            Utility class for getting <see cref="T:PlaywrightSharp.KeyDefinition"/>.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.KeyDefinitions.Get(System.String)">
            <summary>
            Gets the <see cref="T:PlaywrightSharp.KeyDefinition"/> for the givin key.
            </summary>
            <param name="key">The key.</param>
            <returns>The <see cref="T:PlaywrightSharp.KeyDefinition"/> of the specified key.</returns>
        </member>
        <member name="M:PlaywrightSharp.KeyDefinitions.ContainsKey(System.String)">
            <summary>
            Checks whether a <see cref="T:PlaywrightSharp.KeyDefinition"/> exists for the givin key.
            </summary>
            <param name="key">The key.</param>
            <returns>A value indicating if the key exists or not.</returns>
        </member>
        <member name="T:PlaywrightSharp.LaunchOptions">
            <summary>
            Options for <see cref="M:PlaywrightSharp.IBrowserType.LaunchAsync(PlaywrightSharp.LaunchOptions)"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchOptions.FirefoxUserPrefs">
            <summary>
            Firefox user preferences. Learn more about the Firefox user preferences at about:config.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.LaunchOptions.ToPersistentOptions">
            <summary>
            Converts the <see cref="T:PlaywrightSharp.LaunchOptions"/> to <see cref="T:PlaywrightSharp.LaunchPersistentOptions"/>.
            </summary>
            <returns>The object converted to <see cref="T:PlaywrightSharp.LaunchPersistentOptions"/>.</returns>
        </member>
        <member name="T:PlaywrightSharp.LaunchOptionsBase">
            <summary>
            Base class for <see cref="T:PlaywrightSharp.LaunchOptions"/> and <see cref="T:PlaywrightSharp.LaunchOptionsBase"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchOptionsBase.Headless">
            <summary>
            Whether to run browser in headless mode. Defaults to true unless the devtools option is true.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchOptionsBase.Args">
            <summary>
            Additional arguments to pass to the browser instance.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchOptionsBase.UserDataDir">
            <summary>
            Path to a User Data Directory.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchOptionsBase.Devtools">
            <summary>
            Whether to auto-open DevTools panel for each tab. If this option is true, the headless option will be set false.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchOptionsBase.ExecutablePath">
            <summary>
            Path to a browser executable to run instead of the bundled one.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchOptionsBase.DownloadsPath">
            <summary>
            If specified, accepted downloads are downloaded into this folder. Otherwise, temporary folder is created and is deleted when browser is closed.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchOptionsBase.IgnoreHTTPSErrors">
            <summary>
            Whether to ignore HTTPS errors during navigation. Defaults to false.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchOptionsBase.Timeout">
            <summary>
            Maximum time in milliseconds to wait for the browser instance to start.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchOptionsBase.DumpIO">
            <summary>
             Whether to pipe browser process stdout and stderr into process.stdout and process.stderr. Defaults to false.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchOptionsBase.SlowMo">
            <summary>
            Slows down PlaywrightSharp operations by the specified amount of milliseconds. Useful so that you can see what is going on.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchOptionsBase.IgnoreAllDefaultArgs">
            <summary>
            If true, Playwright does not pass its own configurations args and only uses the ones from args.
            Dangerous option; use with care. Defaults to false.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchOptionsBase.HandleSIGINT">
            <summary>
            Close the browser process on Ctrl-C. Defaults to true.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchOptionsBase.HandleSIGTERM">
            <summary>
            Close the browser process on SIGTERM. Defaults to true.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchOptionsBase.HandleSIGHUP">
            <summary>
            Close the browser process on SIGHUP. Defaults to true.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchOptionsBase.ChromiumSandbox">
            <summary>
            Enable Chromium sandboxing. Defaults to true.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchOptionsBase.IgnoreDefaultArgs">
            <summary>ß
            if <see cref="P:PlaywrightSharp.LaunchOptionsBase.IgnoreAllDefaultArgs"/> is set to <c>false</c> this list will be used to filter default arguments.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchOptionsBase.Env">
            <summary>
            Specify environment variables that will be visible to browser. Defaults to Environment variables.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchOptionsBase.Proxy">
            <summary>
            Network proxy settings.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.LaunchPersistentOptions">
            <summary>
            Options for <seealso cref="M:PlaywrightSharp.IBrowserType.LaunchPersistentContextAsync(System.String,PlaywrightSharp.LaunchPersistentOptions)"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchPersistentOptions.Viewport">
            <summary>
            Sets a consistent viewport for each page. Defaults to an 800x600 viewport. null disables the default viewport.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchPersistentOptions.UserAgent">
            <summary>
            Specific user agent to use in this context.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchPersistentOptions.BypassCSP">
            <summary>
            Toggles bypassing page's Content-Security-Policy.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchPersistentOptions.JavaScriptEnabled">
            <summary>
            Whether or not to enable or disable JavaScript in the context. Defaults to true.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchPersistentOptions.TimezoneId">
            <summary>
            Changes the timezone of the context. See <see href="https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1">ICU’s metaZones.txt</see> for a list of supported timezone IDs.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchPersistentOptions.Geolocation">
            <summary>
            Changes the Geolocation of the context.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchPersistentOptions.Permissions">
            <summary>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> from origin keys to permissions values. See <see cref="M:PlaywrightSharp.IBrowserContext.GrantPermissionsAsync(PlaywrightSharp.ContextPermission[],System.String)"/> for more details.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchPersistentOptions.IsMobile">
            <summary>
            Gets or sets whether the meta viewport tag is taken into account.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchPersistentOptions.Offline">
            <summary>
            Whether to emulate network being offline. Defaults to `false`.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchPersistentOptions.DeviceScaleFactor">
            <summary>
            Gets or sets the device scale factor.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchPersistentOptions.HttpCredentials">
            <summary>
            Credentials for HTTP authentication.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchPersistentOptions.HasTouch">
            <summary>
            Specifies if viewport supports touch events. Defaults to false.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchPersistentOptions.AcceptDownloads">
            <summary>
            Whether to automatically download all the attachments. Defaults to false where all the downloads are canceled.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchPersistentOptions.ColorScheme">
            <summary>
            Emulates 'prefers-colors-scheme' media feature.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchPersistentOptions.Locale">
            <summary>
            Specify user locale, for example en-GB, de-DE, etc. Locale will affect navigator.language value, Accept-Language request header value as well as number and date formatting rules.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchPersistentOptions.ExtraHTTPHeaders">
            <summary>
            An object containing additional HTTP headers to be sent with every request.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchPersistentOptions.RecordHar">
            <summary>
            Enables HAR recording for all pages into recordHar.path file. If not specified, the HAR is not recorded.
            Make sure to await <see cref="M:PlaywrightSharp.IPage.CloseAsync(System.Boolean)"/> for the HAR to be saved.
            You can use <see cref="T:PlaywrightSharp.Har.HarResult"/> to deserialize the generated JSON file.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LaunchPersistentOptions.RecordVideo">
            <summary>
            Enables video recording for all pages into recordVideo.dir directory. If not specified videos are not recorded.
            Make sure to await <seealso cref="M:PlaywrightSharp.BrowserContext.CloseAsync"/> for videos to be saved.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.LaunchPersistentOptions.op_Addition(PlaywrightSharp.LaunchPersistentOptions,PlaywrightSharp.BrowserContextOptions)">
            <summary>
            Adds all the values set int <paramref name="right"/> into <paramref name="left"/>.
            </summary>
            <param name="left"><see cref="T:PlaywrightSharp.LaunchPersistentOptions"/> to hidratate.</param>
            <param name="right"><see cref="T:PlaywrightSharp.BrowserContextOptions"/> to get the values from.</param>
            <returns><paramref name="left"/> with the values of <paramref name="right"/>.</returns>
        </member>
        <member name="M:PlaywrightSharp.LaunchPersistentOptions.Add(PlaywrightSharp.LaunchPersistentOptions,PlaywrightSharp.BrowserContextOptions)">
            <summary>
            Adds all the values set int <paramref name="right"/> into <paramref name="left"/>.
            </summary>
            <param name="left"><see cref="T:PlaywrightSharp.LaunchPersistentOptions"/> to hidratate.</param>
            <param name="right"><see cref="T:PlaywrightSharp.BrowserContextOptions"/> to get the values from.</param>
            <returns><paramref name="left"/> with the values of <paramref name="right"/>.</returns>
        </member>
        <member name="M:PlaywrightSharp.LaunchPersistentOptions.Clone">
            <summary>
            Clones the <see cref="T:PlaywrightSharp.BrowserContextOptions"/>.
            </summary>
            <returns>A copy of the current <see cref="T:PlaywrightSharp.BrowserContextOptions"/>.</returns>
        </member>
        <member name="T:PlaywrightSharp.LifecycleEvent">
            <summary>
            Lyfe cycle event.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.LifecycleEvent.Load">
            <summary>
            Consider navigation to be finished when the <c>load</c> event is fired.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.LifecycleEvent.DOMContentLoaded">
            <summary>
            Consider navigation to be finished when the <c>DOMContentLoaded</c> event is fired.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.LifecycleEvent.Networkidle">
            <summary>
            Consider navigation to be finished when there are no more than 0 network connections for at least <c>500</c> ms.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.LoadStateEventArgs">
            <summary>
            See <see cref="E:PlaywrightSharp.Frame.LoadState"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.LoadStateEventArgs.LifecycleEvent">
            <summary>
            Load state being added.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Margin">
            <summary>
            Margin options used in <see cref="M:PlaywrightSharp.IPage.GetPdfAsync(System.String,System.Decimal,System.Boolean,System.String,System.String,System.Boolean,System.Boolean,System.String,System.Nullable{PlaywrightSharp.PaperFormat},System.String,System.String,PlaywrightSharp.Margin,System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Margin.Top">
            <summary>
            Top margin, accepts values labeled with units.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Margin.Left">
            <summary>
            Left margin, accepts values labeled with units.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Margin.Bottom">
            <summary>
            Bottom margin, accepts values labeled with units.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Margin.Right">
            <summary>
            Right margin, accepts values labeled with units.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.Margin.op_Equality(PlaywrightSharp.Margin,PlaywrightSharp.Margin)">
            <inheritdoc cref="T:System.IEquatable`1"/>
        </member>
        <member name="M:PlaywrightSharp.Margin.op_Inequality(PlaywrightSharp.Margin,PlaywrightSharp.Margin)">
            <inheritdoc cref="T:System.IEquatable`1"/>
        </member>
        <member name="M:PlaywrightSharp.Margin.Equals(System.Object)">
            <summary>
            Checks for object equality.
            </summary>
            <param name="obj">Options to check.</param>
            <returns>Whether the objects are equal or not.</returns>
        </member>
        <member name="M:PlaywrightSharp.Margin.Equals(PlaywrightSharp.Margin)">
            <summary>
            Checks for object equality.
            </summary>
            <param name="other">Options to check.</param>
            <returns>Whether the objects are equal or not.</returns>
        </member>
        <member name="M:PlaywrightSharp.Margin.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:PlaywrightSharp.MediaType">
            <summary>
            Options for <see cref="M:PlaywrightSharp.IPage.EmulateMediaAsync(System.Nullable{PlaywrightSharp.MediaType},System.Nullable{PlaywrightSharp.ColorScheme})"/>.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.MediaType.Print">
            <summary>
            Media Print.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.MediaType.Screen">
            <summary>
            Media Screen.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.MediaType.Null">
            <summary>
            None.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.NameValueEntry">
            <summary>
            Name value entry.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.NameValueEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PlaywrightSharp.NameValueEntry"/> class.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.NameValueEntry.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PlaywrightSharp.NameValueEntry"/> class.
            </summary>
            <param name="name">Entry name.</param>
            <param name="value">Entry value.</param>
        </member>
        <member name="P:PlaywrightSharp.NameValueEntry.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.NameValueEntry.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.NameValueEntry.Equals(PlaywrightSharp.NameValueEntry)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.NameValueEntry.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.NameValueEntry.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:PlaywrightSharp.NavigationException">
            <summary>
            Exception thrown when a <see cref="T:PlaywrightSharp.IPage"/> fails to navigate an URL.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.NavigationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PlaywrightSharp.NavigationException"/> class.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.NavigationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PlaywrightSharp.NavigationException"/> class.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:PlaywrightSharp.NavigationException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:PlaywrightSharp.NavigationException"/> class.
            </summary>
            <param name="message">Message.</param>
            <param name="url">Url.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:PlaywrightSharp.NavigationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:PlaywrightSharp.NavigationException"/> class.
            </summary>
            <param name="message">Message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:PlaywrightSharp.NavigationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:PlaywrightSharp.NavigationException"/> class.
            </summary>
            <param name="info">Info.</param>
            <param name="context">Context.</param>
        </member>
        <member name="P:PlaywrightSharp.NavigationException.Url">
            <summary>
            Url that caused the exception.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="T:PlaywrightSharp.NetworkCookie">
            <summary>
            Cookie data.
            </summary>
            <seealso cref="M:PlaywrightSharp.IBrowserContext.GetCookiesAsync(System.String[])"/>
        </member>
        <member name="P:PlaywrightSharp.NetworkCookie.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:PlaywrightSharp.NetworkCookie.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:PlaywrightSharp.NetworkCookie.Domain">
            <summary>
            Gets or sets the domain.
            </summary>
            <value>The domain.</value>
        </member>
        <member name="P:PlaywrightSharp.NetworkCookie.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:PlaywrightSharp.NetworkCookie.Expires">
            <summary>
            Gets or sets the expiration. Unix time in seconds.
            </summary>
            <value>Expiration.</value>
        </member>
        <member name="P:PlaywrightSharp.NetworkCookie.HttpOnly">
            <summary>
            Gets or sets if it's HTTP only.
            </summary>
            <value>Whether it's http only or not.</value>
        </member>
        <member name="P:PlaywrightSharp.NetworkCookie.Secure">
            <summary>
            Gets or sets if it's secure.
            </summary>
            <value>Whether it's secure or not.</value>
        </member>
        <member name="P:PlaywrightSharp.NetworkCookie.Session">
            <summary>
            Gets or sets if it's session only.
            </summary>
            <value>Whether it's session only or not.</value>
        </member>
        <member name="P:PlaywrightSharp.NetworkCookie.SameSite">
            <summary>
            Gets or sets the cookies SameSite value.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.NetworkCookie.op_Implicit(PlaywrightSharp.NetworkCookie)~PlaywrightSharp.SetNetworkCookieParam">
            <summary>
            Converts a <see cref="T:PlaywrightSharp.NetworkCookie"/> to a <see cref="T:PlaywrightSharp.SetNetworkCookieParam"/>.
            </summary>
            <param name="cookie">Cookie to convert.</param>
        </member>
        <member name="M:PlaywrightSharp.NetworkCookie.ToSetNetworkCookieParam">
            <summary>
            Converts a <see cref="T:PlaywrightSharp.NetworkCookie"/> to a <see cref="T:PlaywrightSharp.SetNetworkCookieParam"/>.
            </summary>
            <returns>A <see cref="T:PlaywrightSharp.SetNetworkCookieParam"/> with the matching properties set.</returns>
        </member>
        <member name="M:PlaywrightSharp.NetworkCookie.Equals(PlaywrightSharp.NetworkCookie)">
            <inheritdoc cref="T:System.IEquatable`1"/>
        </member>
        <member name="M:PlaywrightSharp.NetworkCookie.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.NetworkCookie.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:PlaywrightSharp.Page">
            <inheritdoc cref="T:PlaywrightSharp.IPage" />
        </member>
        <member name="E:PlaywrightSharp.Page.Console">
            <inheritdoc />
        </member>
        <member name="E:PlaywrightSharp.Page.Popup">
            <inheritdoc />
        </member>
        <member name="E:PlaywrightSharp.Page.Request">
            <inheritdoc />
        </member>
        <member name="E:PlaywrightSharp.Page.WebSocket">
            <inheritdoc />
        </member>
        <member name="E:PlaywrightSharp.Page.Response">
            <inheritdoc />
        </member>
        <member name="E:PlaywrightSharp.Page.RequestFinished">
            <inheritdoc />
        </member>
        <member name="E:PlaywrightSharp.Page.RequestFailed">
            <inheritdoc />
        </member>
        <member name="E:PlaywrightSharp.Page.Dialog">
            <inheritdoc />
        </member>
        <member name="E:PlaywrightSharp.Page.FrameAttached">
            <inheritdoc />
        </member>
        <member name="E:PlaywrightSharp.Page.FrameDetached">
            <inheritdoc />
        </member>
        <member name="E:PlaywrightSharp.Page.FrameNavigated">
            <inheritdoc />
        </member>
        <member name="E:PlaywrightSharp.Page.FileChooser">
            <inheritdoc />
        </member>
        <member name="E:PlaywrightSharp.Page.Load">
            <inheritdoc />
        </member>
        <member name="E:PlaywrightSharp.Page.DOMContentLoaded">
            <inheritdoc />
        </member>
        <member name="E:PlaywrightSharp.Page.Close">
            <inheritdoc />
        </member>
        <member name="E:PlaywrightSharp.Page.Crash">
            <inheritdoc />
        </member>
        <member name="E:PlaywrightSharp.Page.PageError">
            <inheritdoc />
        </member>
        <member name="E:PlaywrightSharp.Page.Worker">
            <inheritdoc />
        </member>
        <member name="E:PlaywrightSharp.Page.Download">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Page.PlaywrightSharp#Transport#Channels#IChannelOwner#Channel">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Page.PlaywrightSharp#Transport#Channels#IChannelOwner{PlaywrightSharp#Page}#Channel">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Page.IsClosed">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Page.PlaywrightSharp#IPage#MainFrame">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Page.MainFrame">
            <inheritdoc cref="P:PlaywrightSharp.IPage.MainFrame" />
        </member>
        <member name="P:PlaywrightSharp.Page.PlaywrightSharp#IPage#Context">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Page.Context">
            <inheritdoc cref="P:PlaywrightSharp.IPage.Context" />
        </member>
        <member name="P:PlaywrightSharp.Page.ViewportSize">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Page.Accessibility">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Page.Mouse">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Page.Url">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Page.Frames">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Page.Keyboard">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Page.Touchscreen">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Page.DefaultTimeout">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Page.DefaultNavigationTimeout">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Page.Workers">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Page.Coverage">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Page.Video">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.GetFrame(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.GetFrame(System.Text.RegularExpressions.Regex)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.GetFrame(System.Func{System.String,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.GetTitleAsync">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.BringToFrontAsync">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.GetOpenerAsync">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.EmulateMediaAsync">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.EmulateMediaAsync(System.Nullable{PlaywrightSharp.MediaType})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.EmulateMediaAsync(System.Nullable{PlaywrightSharp.ColorScheme})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.EmulateMediaAsync(System.Nullable{PlaywrightSharp.MediaType},System.Nullable{PlaywrightSharp.ColorScheme})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.GoToAsync(System.String,System.Nullable{PlaywrightSharp.LifecycleEvent},System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.WaitForNavigationAsync(System.Nullable{PlaywrightSharp.LifecycleEvent},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.WaitForNavigationAsync(System.String,System.Nullable{PlaywrightSharp.LifecycleEvent},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.WaitForNavigationAsync(System.Text.RegularExpressions.Regex,System.Nullable{PlaywrightSharp.LifecycleEvent},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.WaitForNavigationAsync(System.Func{System.String,System.Boolean},System.Nullable{PlaywrightSharp.LifecycleEvent},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.WaitForRequestAsync(System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.WaitForRequestAsync(System.Text.RegularExpressions.Regex,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.WaitForRequestAsync(System.Func{PlaywrightSharp.IRequest,System.Boolean},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.WaitForFunctionAsync(System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.WaitForFunctionAsync(System.String,PlaywrightSharp.Polling,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.WaitForFunctionAsync(System.String,System.Int32,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.WaitForFunctionAsync(System.String,System.Object,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.WaitForFunctionAsync(System.String,System.Object,PlaywrightSharp.Polling,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.WaitForFunctionAsync(System.String,System.Object,System.Int32,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.WaitForEventAsync``1(PlaywrightSharp.PlaywrightEvent{``0},System.Func{``0,System.Boolean},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.CloseAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.EvaluateAsync``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.EvaluateAsync``1(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.EvalOnSelectorAsync(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.EvalOnSelectorAsync(System.String,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.EvalOnSelectorAsync``1(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.EvalOnSelectorAsync``1(System.String,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.EvalOnSelectorAllAsync(System.String,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.EvalOnSelectorAllAsync``1(System.String,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.EvalOnSelectorAllAsync(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.EvalOnSelectorAllAsync``1(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.FillAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.SetInputFilesAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.SetInputFilesAsync(System.String,System.String[],System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.SetInputFilesAsync(System.String,PlaywrightSharp.FilePayload,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.SetInputFilesAsync(System.String,PlaywrightSharp.FilePayload[],System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.TypeAsync(System.String,System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.FocusAsync(System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.HoverAsync(System.String,System.Nullable{System.Drawing.Point},PlaywrightSharp.Input.Modifier[],System.Boolean,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.PressAsync(System.String,System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.SelectOptionAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.SelectOptionAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.SelectOptionAsync(System.String,PlaywrightSharp.SelectOption,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.SelectOptionAsync(System.String,PlaywrightSharp.IElementHandle,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.SelectOptionAsync(System.String,System.String[],System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.SelectOptionAsync(System.String,PlaywrightSharp.SelectOption[],System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.SelectOptionAsync(System.String,PlaywrightSharp.IElementHandle[],System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.SelectOptionAsync(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.SelectOptionAsync(System.String,PlaywrightSharp.SelectOption[])">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.SelectOptionAsync(System.String,PlaywrightSharp.IElementHandle[])">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.WaitForTimeoutAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.WaitForSelectorAsync(System.String,System.Nullable{PlaywrightSharp.WaitForState},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.EvaluateAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.EvaluateAsync(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.ScreenshotAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.ScreenshotAsync(PlaywrightSharp.Rect)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.ScreenshotAsync(System.String,System.Boolean,PlaywrightSharp.Rect,System.Boolean,System.Nullable{PlaywrightSharp.ScreenshotFormat},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.SetContentAsync(System.String,System.Nullable{PlaywrightSharp.LifecycleEvent},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.GetContentAsync">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.SetExtraHTTPHeadersAsync(System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.QuerySelectorAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.QuerySelectorAllAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.EvaluateHandleAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.EvaluateHandleAsync(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.AddScriptTagAsync(System.String,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.AddStyleTagAsync(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.ClickAsync(System.String,System.Int32,PlaywrightSharp.Input.MouseButton,System.Int32,PlaywrightSharp.Input.Modifier[],System.Nullable{System.Drawing.Point},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.DblClickAsync(System.String,System.Int32,PlaywrightSharp.Input.MouseButton,PlaywrightSharp.Input.Modifier[],System.Nullable{System.Drawing.Point},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.GoBackAsync(System.Nullable{System.Int32},System.Nullable{PlaywrightSharp.LifecycleEvent})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.GoForwardAsync(System.Nullable{System.Int32},System.Nullable{PlaywrightSharp.LifecycleEvent})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.ReloadAsync(System.Nullable{System.Int32},System.Nullable{PlaywrightSharp.LifecycleEvent})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.ExposeBindingAsync(System.String,System.Action{PlaywrightSharp.BindingSource})">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Page.ExposeBindingAsync``1(System.String,System.Action{PlaywrightSharp.BindingSource,``0})">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Page.ExposeBindingAsync``1(System.String,System.Func{PlaywrightSharp.BindingSource,``0})">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Page.ExposeBindingAsync``1(System.String,System.Func{PlaywrightSharp.BindingSource,PlaywrightSharp.IJSHandle,``0})">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Page.ExposeBindingAsync``2(System.String,System.Func{PlaywrightSharp.BindingSource,``0,``1})">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Page.ExposeBindingAsync``3(System.String,System.Func{PlaywrightSharp.BindingSource,``0,``1,``2})">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Page.ExposeBindingAsync``4(System.String,System.Func{PlaywrightSharp.BindingSource,``0,``1,``2,``3})">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Page.ExposeBindingAsync``5(System.String,System.Func{PlaywrightSharp.BindingSource,``0,``1,``2,``3,``4})">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Page.ExposeFunctionAsync(System.String,System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Page.ExposeFunctionAsync``1(System.String,System.Action{``0})">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Page.ExposeFunctionAsync``1(System.String,System.Func{``0})">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Page.ExposeFunctionAsync``2(System.String,System.Func{``0,``1})">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Page.ExposeFunctionAsync``3(System.String,System.Func{``0,``1,``2})">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Page.ExposeFunctionAsync``4(System.String,System.Func{``0,``1,``2,``3})">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Page.ExposeFunctionAsync``5(System.String,System.Func{``0,``1,``2,``3,``4})">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Page.WaitForResponseAsync(System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.WaitForResponseAsync(System.Text.RegularExpressions.Regex,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.WaitForResponseAsync(System.Func{PlaywrightSharp.IResponse,System.Boolean},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.GetPdfAsync(System.String,System.Decimal,System.Boolean,System.String,System.String,System.Boolean,System.Boolean,System.String,System.Nullable{PlaywrightSharp.PaperFormat},System.String,System.String,PlaywrightSharp.Margin,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.AddInitScriptAsync(System.String,System.Object[],System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.RouteAsync(System.String,System.Action{PlaywrightSharp.Route,PlaywrightSharp.IRequest})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.RouteAsync(System.Text.RegularExpressions.Regex,System.Action{PlaywrightSharp.Route,PlaywrightSharp.IRequest})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.RouteAsync(System.Func{System.String,System.Boolean},System.Action{PlaywrightSharp.Route,PlaywrightSharp.IRequest})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.UnrouteAsync(System.String,System.Action{PlaywrightSharp.Route,PlaywrightSharp.IRequest})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.UnrouteAsync(System.Text.RegularExpressions.Regex,System.Action{PlaywrightSharp.Route,PlaywrightSharp.IRequest})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.UnrouteAsync(System.Func{System.String,System.Boolean},System.Action{PlaywrightSharp.Route,PlaywrightSharp.IRequest})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.WaitForLoadStateAsync(PlaywrightSharp.LifecycleEvent,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.SetViewportSizeAsync(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.SetViewportSizeAsync(PlaywrightSharp.ViewportSize)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.CheckAsync(System.String,System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.UncheckAsync(System.String,System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.DispatchEventAsync(System.String,System.String,System.Object,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.GetAttributeAsync(System.String,System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.GetInnerHtmlAsync(System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.GetInnerTextAsync(System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.GetTextContentAsync(System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.TapAsync(System.String,PlaywrightSharp.Input.Modifier[],System.Nullable{System.Drawing.Point},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.IsCheckedAsync(System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.IsDisabledAsync(System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.IsEditableAsync(System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.IsEnabledAsync(System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.IsHiddenAsync(System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.IsVisibleAsync(System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Page.PauseAsync">
            <inheritdoc />
        </member>
        <member name="T:PlaywrightSharp.PageErrorEventArgs">
            <summary>
            Page error event arguments.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.PageErrorEventArgs.Name">
            <summary>
            Error name.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.PageErrorEventArgs.Message">
            <summary>
            Error Message.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.PageErrorEventArgs.Value">
            <summary>
            Error Value.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.PageErrorEventArgs.Stack">
            <summary>
            Error stack.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.PageEvent">
            <summary>
            Page events for <see cref="M:PlaywrightSharp.IPage.WaitForEventAsync``1(PlaywrightSharp.PlaywrightEvent{``0},System.Func{``0,System.Boolean},System.Nullable{System.Int32})"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.PageEvent.Request">
            <summary>
            <see cref="T:PlaywrightSharp.PlaywrightEvent`1"/> representing a <see cref="E:PlaywrightSharp.IPage.Request"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.PageEvent.RequestFinished">
            <summary>
            <see cref="T:PlaywrightSharp.PlaywrightEvent`1"/> representing a <see cref="E:PlaywrightSharp.IPage.RequestFinished"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.PageEvent.Crash">
            <summary>
            <see cref="T:PlaywrightSharp.PlaywrightEvent`1"/> representing a <see cref="E:PlaywrightSharp.IPage.Crash"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.PageEvent.Close">
            <summary>
            <see cref="T:PlaywrightSharp.PlaywrightEvent`1"/> representing a <see cref="E:PlaywrightSharp.IPage.Close"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.PageEvent.Response">
            <summary>
            <see cref="T:PlaywrightSharp.PlaywrightEvent`1"/> representing a <see cref="E:PlaywrightSharp.IPage.Response"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.PageEvent.Download">
            <summary>
            <see cref="T:PlaywrightSharp.PlaywrightEvent`1"/> representing a <see cref="E:PlaywrightSharp.IPage.Download"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.PageEvent.Console">
            <summary>
            <see cref="T:PlaywrightSharp.PlaywrightEvent`1"/> representing a <see cref="E:PlaywrightSharp.IPage.Console"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.PageEvent.Popup">
            <summary>
            <see cref="T:PlaywrightSharp.PlaywrightEvent`1"/> representing a <see cref="E:PlaywrightSharp.IPage.Popup"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.PageEvent.FrameNavigated">
            <summary>
            <see cref="T:PlaywrightSharp.PlaywrightEvent`1"/> representing a <see cref="E:PlaywrightSharp.IPage.FrameNavigated"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.PageEvent.FrameDetached">
            <summary>
            <see cref="T:PlaywrightSharp.PlaywrightEvent`1"/> representing a <see cref="E:PlaywrightSharp.IPage.FrameDetached"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.PageEvent.Worker">
            <summary>
            <see cref="T:PlaywrightSharp.PlaywrightEvent`1"/> representing a <see cref="E:PlaywrightSharp.IPage.Worker"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.PageEvent.Dialog">
            <summary>
            <see cref="T:PlaywrightSharp.PlaywrightEvent`1"/> representing a <see cref="E:PlaywrightSharp.IPage.Dialog"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.PageEvent.FileChooser">
            <summary>
            <see cref="T:PlaywrightSharp.PlaywrightEvent`1"/> representing a <see cref="E:PlaywrightSharp.IPage.FileChooser"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.PageEvent.PageError">
            <summary>
            <see cref="T:PlaywrightSharp.PlaywrightEvent`1"/> representing a <see cref="E:PlaywrightSharp.IPage.PageError"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.PageEvent.Load">
            <summary>
            <see cref="T:PlaywrightSharp.PlaywrightEvent`1"/> representing a <see cref="E:PlaywrightSharp.IPage.Load"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.PageEvent.DOMContentLoaded">
            <summary>
            <see cref="T:PlaywrightSharp.PlaywrightEvent`1"/> representing a <see cref="E:PlaywrightSharp.IPage.DOMContentLoaded"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.PageEvent.WebSocket">
            <summary>
            <see cref="T:PlaywrightSharp.PlaywrightEvent`1"/> representing a <see cref="E:PlaywrightSharp.IPage.WebSocket"/>.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.PageEventArgs">
            <summary>
            See <see cref="E:PlaywrightSharp.IBrowserContext.Page"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.PageEventArgs.Page">
            <summary>
            Page created.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.PaperFormat">
            <summary>
            Paper format.
            </summary>
            <seealso cref="M:PlaywrightSharp.IPage.GetPdfAsync(System.String,System.Decimal,System.Boolean,System.String,System.String,System.Boolean,System.Boolean,System.String,System.Nullable{PlaywrightSharp.PaperFormat},System.String,System.String,PlaywrightSharp.Margin,System.Boolean)"/>
        </member>
        <member name="F:PlaywrightSharp.PaperFormat.Letter">
            <summary>
            Letter: 8.5 inches x 11 inches.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.PaperFormat.Legal">
            <summary>
            Legal: 8.5 inches by 14 inches.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.PaperFormat.Tabloid">
            <summary>
            Tabloid: 11 inches by 17 inches.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.PaperFormat.Ledger">
            <summary>
            Ledger: 17 inches by 11 inches.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.PaperFormat.A0">
            <summary>
            A0: 33.1 inches by 46.8 inches.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.PaperFormat.A1">
            <summary>
            A1: 23.4 inches by 33.1 inches.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.PaperFormat.A2">
            <summary>
            A2: 16.5 inches by 23.4 inches.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.PaperFormat.A3">
            <summary>
            A3: 11.7 inches by 16.5 inches.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.PaperFormat.A4">
            <summary>
            A4: 8.27 inches by 11.7 inches.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.PaperFormat.A5">
            <summary>
            A5: 5.83 inches by 8.27 inches.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.PaperFormat.A6">
            <summary>
            A6: 4.13 inches by 5.83 inches.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Payload">
            <summary>
            Payload information.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Payload.Method">
            <summary>
            Gets or sets the HTTP method.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Payload.PostData">
            <summary>
            Gets or sets the post data.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Payload.Headers">
            <summary>
            Gets or sets the HTTP headers.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Payload.Url">
            <summary>
            Gets or sets the URL.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Playwright">
            <inheritdoc cref="T:PlaywrightSharp.IPlaywright" />
        </member>
        <member name="F:PlaywrightSharp.Playwright.DefaultTimeout">
            <summary>
            Default timeout.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.Playwright.Finalize">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="P:PlaywrightSharp.Playwright.PlaywrightSharp#Transport#Channels#IChannelOwner#Connection">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Playwright.PlaywrightSharp#Transport#Channels#IChannelOwner#Channel">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Playwright.PlaywrightSharp#Transport#Channels#IChannelOwner{PlaywrightSharp#Playwright}#Channel">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Playwright.Devices">
            <summary>
            Returns a list of devices to be used with <see cref="M:PlaywrightSharp.IBrowser.NewContextAsync(PlaywrightSharp.BrowserContextOptions)"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Playwright.Chromium">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Playwright.Firefox">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Playwright.Webkit">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Playwright.Selectors">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Playwright.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Playwright.CreateAsync(Microsoft.Extensions.Logging.ILoggerFactory,PlaywrightSharp.Transport.TransportTaskScheduler,System.String,System.String,System.String)">
            <summary>
            Launches a Playwright server.
            </summary>
            <param name="loggerFactory">Logger.</param>
            <param name="scheduler">Task scheduler for long running tasks.</param>
            <param name="driverExecutablePath">Playwright driver path.</param>
            <param name="browsersPath">Specify a shared folder that playwright will use to download browsers and to look for browsers when launching browser instances.
            It is a shortcut to the PLAYWRIGHT_BROWSERS_PATH environment variable.
            </param>
            <param name="debug">Enables the playwright driver log. Pass `pw:api` to get the Playwright API log.
            It is a shortcut to the DEBUG=pw:api environment variable.
            </param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the playwright driver is ready to be used.</returns>
        </member>
        <member name="M:PlaywrightSharp.Playwright.InstallAsync(System.String,System.String)">
            <summary>
            Runs the playwright driver install command.
            </summary>
            <param name="browsersPath">Specify a shared folder that playwright will use to download browsers and to look for browsers when launching browser instances.</param>
            <param name="driverExecutablePath">Drivers location. Defaults to the PlaywrightSharp assembly path.</param>
            It is a shortcut to the PLAYWRIGHT_BROWSERS_PATH environment variable.
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the playwright driver ran the install command.</returns>
        </member>
        <member name="M:PlaywrightSharp.Playwright.Dispose">
            <inheritdoc />
        </member>
        <member name="T:PlaywrightSharp.PlaywrightEvent`1">
            <summary>
            Events for <see cref="M:PlaywrightSharp.IPage.WaitForEventAsync``1(PlaywrightSharp.PlaywrightEvent{``0},System.Func{``0,System.Boolean},System.Nullable{System.Int32})"/> and <see cref="M:PlaywrightSharp.IBrowserContext.WaitForEventAsync``1(PlaywrightSharp.PlaywrightEvent{``0},System.Func{``0,System.Boolean},System.Nullable{System.Int32})"/>.
            </summary>
            <typeparam name="T"><see cref="T:System.EventArgs"/> returned by the event.</typeparam>
        </member>
        <member name="P:PlaywrightSharp.PlaywrightEvent`1.Name">
            <inheritdoc/>
        </member>
        <member name="T:PlaywrightSharp.PlaywrightSharpException">
            <summary>
            Base exception used to identify any exception thrown by PlaywrightSharp.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.PlaywrightSharpException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PlaywrightSharp.PlaywrightSharpException"/> class.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.PlaywrightSharpException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PlaywrightSharp.PlaywrightSharpException"/> class.
            </summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="M:PlaywrightSharp.PlaywrightSharpException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:PlaywrightSharp.PlaywrightSharpException"/> class.
            </summary>
            <param name="message">Exception message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:PlaywrightSharp.PlaywrightSharpException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:PlaywrightSharp.PlaywrightSharpException"/> class.
            </summary>
            <param name="info">Info.</param>
            <param name="context">Context.</param>
        </member>
        <member name="T:PlaywrightSharp.Polling">
            <summary>
            An interval at which the <c>pageFunction</c> is executed.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.Polling.Raf">
            <summary>
            To constantly execute <c>pageFunction</c> in <c>requestAnimationFrame</c> callback.
            This is the tightest polling mode which is suitable to observe styling changes.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.PopupEventArgs">
            <summary>
            Arguments used by <see cref="E:PlaywrightSharp.IPage.Popup"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.PopupEventArgs.Page">
            <summary>
            Popup <see cref="T:PlaywrightSharp.IPage"/>.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.PressedState">
            <summary>
            Three-state boolean. See <seealso cref="P:PlaywrightSharp.SerializedAXNode.Pressed"/>.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.PressedState.Pressed">
            <summary>
            Pressed.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.PressedState.Released">
            <summary>
            Released.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.PressedState.Mixed">
            <summary>
            Mixed.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.ProxySettings">
            <summary>
            Proxy Settings. See <see cref="M:PlaywrightSharp.IBrowserType.LaunchAsync(PlaywrightSharp.LaunchOptions)"/> and <see cref="M:PlaywrightSharp.IBrowserType.LaunchPersistentContextAsync(System.String,PlaywrightSharp.LaunchPersistentOptions)"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.ProxySettings.Server">
            <summary>
            Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example http://myproxy.com:3128 or socks5://myproxy.com:3128.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.ProxySettings.Bypass">
            <summary>
            Optional coma-separated domains to bypass proxy, for example ".com, chromium.org, .domain.com".
            </summary>
        </member>
        <member name="P:PlaywrightSharp.ProxySettings.Username">
            <summary>
             Optional username to use if HTTP proxy requires authentication.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.ProxySettings.Password">
            <summary>
            Optional password to use if HTTP proxy requires authentication.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.RecordHarOptions">
            <summary>
            See <seealso cref="P:PlaywrightSharp.BrowserContextOptions.RecordHar"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.RecordHarOptions.Path">
            <summary>
            Path on the filesystem to write the HAR file to.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.RecordHarOptions.OmitContent">
            <summary>
            Optional setting to control whether to omit request content from the HAR. Defaults to false.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.RecordVideoOptions">
            <summary>
            See <seealso cref="P:PlaywrightSharp.BrowserContextOptions.RecordVideo"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.RecordVideoOptions.Dir">
            <summary>
            Path to the directory to put videos into.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.RecordVideoOptions.Size">
            <summary>
            Optional dimensions of the recorded videos. If not specified the size will be equal to viewport.
            If viewport is not configured explicitly the video size defaults to 1280x720.
            Actual picture of each page will be scaled down if necessary to fit the specified size.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Rect">
            <summary>
            Bounding box data returned by <see cref="M:PlaywrightSharp.IElementHandle.GetBoundingBoxAsync"/>.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.Rect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PlaywrightSharp.Rect"/> class.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.Rect.#ctor(System.Decimal,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:PlaywrightSharp.Rect"/> class.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="P:PlaywrightSharp.Rect.X">
            <summary>
            The x coordinate of the element in pixels.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Rect.Y">
            <summary>
            The y coordinate of the element in pixels.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Rect.Width">
            <summary>
            The width of the element in pixels.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Rect.Height">
            <summary>
            The height of the element in pixels.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.Rect.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Rect.Equals(PlaywrightSharp.Rect)">
            <summary>
            Determines whether the specified <see cref="T:PlaywrightSharp.Rect"/> is equal to the current <see cref="T:PlaywrightSharp.Rect"/>.
            </summary>
            <param name="other">The <see cref="T:PlaywrightSharp.Rect"/> to compare with the current <see cref="T:PlaywrightSharp.Rect"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:PlaywrightSharp.Rect"/> is equal to the current
            <see cref="T:PlaywrightSharp.Rect"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:PlaywrightSharp.Rect.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:PlaywrightSharp.Request">
            <inheritdoc cref="T:PlaywrightSharp.IRequest" />
        </member>
        <member name="P:PlaywrightSharp.Request.PlaywrightSharp#Transport#Channels#IChannelOwner#Channel">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Request.PlaywrightSharp#Transport#Channels#IChannelOwner{PlaywrightSharp#Request}#Channel">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Request.Timing">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Request.Url">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Request.Method">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Request.Headers">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Request.PostData">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Request.PostDataBuffer">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Request.Frame">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Request.IsNavigationRequest">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Request.ResourceType">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Request.Failure">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Request.RedirectedFrom">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Request.RedirectedTo">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Request.GetResponseAsync">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Request.GetPostDataJson(System.Text.Json.JsonDocumentOptions)">
            <inheritdoc />
        </member>
        <member name="T:PlaywrightSharp.RequestAbortErrorCode">
            <summary>
            Abort error codes.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.RequestAbortErrorCode.Aborted">
            <summary>
            An operation was aborted (due to user action).
            </summary>
        </member>
        <member name="F:PlaywrightSharp.RequestAbortErrorCode.AccessDenied">
            <summary>
            Permission to access a resource, other than the network, was denied.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.RequestAbortErrorCode.AddressUnreachable">
            <summary>
            The IP address is unreachable. This usually means that there is no route to the specified host or network.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.RequestAbortErrorCode.BlockedByClient">
            <summary>
            The client chose to block the request.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.RequestAbortErrorCode.BlockedByResponse">
            <summary>
            The request failed because the response was delivered along with requirements which are not met
            ('X-Frame-Options' and 'Content-Security-Policy' ancestor checks, for instance).
            </summary>
        </member>
        <member name="F:PlaywrightSharp.RequestAbortErrorCode.ConnectionAborted">
            <summary>
            A connection timed out as a result of not receiving an ACK for data sent.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.RequestAbortErrorCode.ConnectionClosed">
            <summary>
            A connection was closed (corresponding to a TCP FIN).
            </summary>
        </member>
        <member name="F:PlaywrightSharp.RequestAbortErrorCode.ConnectionFailed">
            <summary>
            A connection attempt failed.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.RequestAbortErrorCode.ConnectionRefused">
            <summary>
            A connection attempt was refused.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.RequestAbortErrorCode.ConnectionReset">
            <summary>
             A connection was reset (corresponding to a TCP RST).
            </summary>
        </member>
        <member name="F:PlaywrightSharp.RequestAbortErrorCode.InternetDisconnected">
            <summary>
            The Internet connection has been lost.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.RequestAbortErrorCode.NameNotResolved">
            <summary>
            The host name could not be resolved.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.RequestAbortErrorCode.TimedOut">
            <summary>
            An operation timed out.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.RequestAbortErrorCode.Failed">
            <summary>
             A generic failure occurred.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.RequestEventArgs">
            <summary>
            Arguments used by <see cref="T:PlaywrightSharp.IPage"/> events.
            </summary>
            <seealso cref="E:PlaywrightSharp.IPage.Request"/>
            <seealso cref="E:PlaywrightSharp.IPage.RequestFinished"/>
        </member>
        <member name="P:PlaywrightSharp.RequestEventArgs.Request">
            <summary>
            Gets the request.
            </summary>
            <value>The request.</value>
        </member>
        <member name="T:PlaywrightSharp.RequestFailedEventArgs">
            <summary>
            Arguments used by <see cref="T:PlaywrightSharp.IPage"/> events.
            </summary>
            <seealso cref="E:PlaywrightSharp.IPage.RequestFailed"/>
        </member>
        <member name="P:PlaywrightSharp.RequestFailedEventArgs.Request">
            <summary>
            Gets the request.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.RequestFailedEventArgs.FailureText">
            <summary>
            Failure text.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.ResourceTiming">
            <summary>
            See <seealso cref="P:PlaywrightSharp.IRequest.Timing"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.ResourceTiming.StartTime">
            <summary>
            Request start time in milliseconds elapsed since January 1, 1970 00:00:00 UTC.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.ResourceTiming.DomainLookupStart">
            <summary>
            Time immediately before the browser starts the domain name lookup for the resource.
            The value is given in milliseconds relative to startTime, -1 if not available.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.ResourceTiming.DomainLookupEnd">
            <summary>
            Time immediately after the browser starts the domain name lookup for the resource.
            The value is given in milliseconds relative to startTime, -1 if not available.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.ResourceTiming.ConnectStart">
            <summary>
            Time immediately before the user agent starts establishing the connection to the server to retrieve the resource.
            The value is given in milliseconds relative to startTime, -1 if not available.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.ResourceTiming.SecureConnectionStart">
            <summary>
            Time immediately before the browser starts the handshake process to secure the current connection.
            The value is given in milliseconds relative to startTime, -1 if not available.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.ResourceTiming.ConnectEnd">
            <summary>
            Time immediately before the user agent starts establishing the connection to the server to retrieve the resource.
            The value is given in milliseconds relative to startTime, -1 if not available.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.ResourceTiming.RequestStart">
            <summary>
            Time immediately before the browser starts requesting the resource from the server, cache, or local resource.
            The value is given in milliseconds relative to startTime, -1 if not available.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.ResourceTiming.ResponseStart">
            <summary>
            Time immediately after the browser starts requesting the resource from the server, cache, or local resource.
            The value is given in milliseconds relative to startTime, -1 if not available.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.ResourceTiming.ResponseEnd">
            <summary>
            Time immediately after the browser receives the last byte of the resource or immediately before the transport connection is closed, whichever comes first.
            The value is given in milliseconds relative to startTime, -1 if not available.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.ResourceType">
            <summary>
            Resource type.
            </summary>
            <seealso cref="P:PlaywrightSharp.IRequest.ResourceType"/>
        </member>
        <member name="F:PlaywrightSharp.ResourceType.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ResourceType.Document">
            <summary>
            Document.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ResourceType.StyleSheet">
            <summary>
            Stylesheet.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ResourceType.Image">
            <summary>
            Image.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ResourceType.Media">
            <summary>
            Media.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ResourceType.Font">
            <summary>
            Font.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ResourceType.Script">
            <summary>
            Script.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ResourceType.TextTrack">
            <summary>
            Texttrack.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ResourceType.Xhr">
            <summary>
            XHR.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ResourceType.Fetch">
            <summary>
            Fetch.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ResourceType.EventSource">
            <summary>
            Event source.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ResourceType.WebSocket">
            <summary>
            Web Socket.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ResourceType.Manifest">
            <summary>
            Manifest.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ResourceType.Ping">
            <summary>
            Ping.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ResourceType.Other">
            <summary>
            Other.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ResourceType.SignedExchange">
            <summary>
            SignedExchange.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ResourceType.CSPViolationReport">
            <summary>
            CSPViolationReport.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ResourceType.Images">
            <summary>
            Images.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ResourceType.Beacon">
            <summary>
            Beacon.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Response">
            <inheritdoc cref="T:PlaywrightSharp.IResponse" />
        </member>
        <member name="P:PlaywrightSharp.Response.PlaywrightSharp#Transport#Channels#IChannelOwner#Channel">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Response.PlaywrightSharp#Transport#Channels#IChannelOwner{PlaywrightSharp#Response}#Channel">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Response.Status">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Response.StatusText">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Response.Frame">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Response.Url">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Response.Headers">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Response.Ok">
            <inheritdoc />
        </member>
        <member name="P:PlaywrightSharp.Response.Request">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Response.GetTextAsync">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Response.GetJsonAsync(System.Text.Json.JsonDocumentOptions)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Response.GetJsonAsync``1(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Response.GetBodyAsync">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Response.FinishedAsync">
            <inheritdoc />
        </member>
        <member name="T:PlaywrightSharp.ResponseData">
            <summary>
            Response that will fulfill a request.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.ResponseData.Body">
            <summary>
            Response body (text content).
            </summary>
        </member>
        <member name="P:PlaywrightSharp.ResponseData.BodyData">
            <summary>
            Response body (binary content).
            </summary>
        </member>
        <member name="P:PlaywrightSharp.ResponseData.Headers">
            <summary>
            Response headers. Header values will be converted to a string.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.ResponseData.ContentType">
            <summary>
            If set, equals to setting <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type"/> response header.
            </summary>
            <value>The Content-Type.</value>
        </member>
        <member name="P:PlaywrightSharp.ResponseData.Status">
            <summary>
            Response status code.
            </summary>
            <value>Status Code.</value>
        </member>
        <member name="T:PlaywrightSharp.ResponseEventArgs">
            <summary>
            <see cref="E:PlaywrightSharp.IPage.Response"/> arguments.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.ResponseEventArgs.Response">
            <summary>
            Gets the response.
            </summary>
            <value>The response.</value>
        </member>
        <member name="T:PlaywrightSharp.Route">
            <summary>
            Whenever a network route is set up with <see cref="M:PlaywrightSharp.IPage.RouteAsync(System.String,System.Action{PlaywrightSharp.Route,PlaywrightSharp.IRequest})"/> or <see cref="M:PlaywrightSharp.IBrowserContext.RouteAsync(System.String,System.Action{PlaywrightSharp.Route,PlaywrightSharp.IRequest})"/> the Route object allows to handle the route.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Route.Request">
            <summary>
            A request to be routed.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Route.PlaywrightSharp#Transport#Channels#IChannelOwner#Channel">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Route.PlaywrightSharp#Transport#Channels#IChannelOwner{PlaywrightSharp#Route}#Channel">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Route.FulfillAsync(System.Nullable{System.Net.HttpStatusCode},System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Byte[],System.String)">
            <summary>
            Fulfills route's request with given response.
            </summary>
            <param name="status">Status code of the response.</param>
            <param name="body">Optional response body as text.</param>
            <param name="headers">Optional response headers.</param>
            <param name="contentType">If set, equals to setting Content-Type response header.</param>
            <param name="bodyContent">Optional response body as binary.</param>
            <param name="path">Optional file path to respond with. The content type will be inferred from file extension.
            If path is a relative path, then it is resolved relative to current working directory.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message was sent.</returns>
        </member>
        <member name="M:PlaywrightSharp.Route.AbortAsync(PlaywrightSharp.RequestAbortErrorCode)">
            <summary>
            Aborts the route's request.
            </summary>
            <param name="errorCode">Optional error code.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message was sent.</returns>
        </member>
        <member name="M:PlaywrightSharp.Route.ContinueAsync(System.Net.Http.HttpMethod,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Continues route's request with optional overrides.
            </summary>
            <param name="method">HTTP method.</param>
            <param name="postData">Post data.</param>
            <param name="headers">HTTP headers.</param>
            <param name="url">URL.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the message was sent.</returns>
        </member>
        <member name="T:PlaywrightSharp.SameSite">
            <summary>
            SameSite values in cookies.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.SameSite.Strict">
            <summary>
            Strict.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.SameSite.Lax">
            <summary>
            Lax.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.SameSite.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.ScreenshotFormat">
            <summary>
            Screenshot file format.
            </summary>
            <seealso cref="M:PlaywrightSharp.IPage.ScreenshotAsync(System.String,System.Boolean,PlaywrightSharp.Rect,System.Boolean,System.Nullable{PlaywrightSharp.ScreenshotFormat},System.Nullable{System.Int32},System.Nullable{System.Int32})"/> and <seealso cref="M:PlaywrightSharp.IElementHandle.ScreenshotAsync(System.String,System.Boolean,System.Nullable{PlaywrightSharp.ScreenshotFormat},System.Nullable{System.Int32},System.Nullable{System.Int32})"/>.
        </member>
        <member name="F:PlaywrightSharp.ScreenshotFormat.Jpeg">
            <summary>
            JPEG type.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.ScreenshotFormat.Png">
            <summary>
            PNG type.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.SelectOption">
            <summary>
            Options used with <see cref="M:PlaywrightSharp.IPage.SelectOptionAsync(System.String,PlaywrightSharp.SelectOption[])"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.SelectOption.Value">
            <summary>
            Gets or sets the value option.
            </summary>
            <remarks>
            Matches by <c>option.value</c>.
            </remarks>
        </member>
        <member name="P:PlaywrightSharp.SelectOption.Label">
            <summary>
            Gets or sets the label option.
            </summary>
            <remarks>
            Matches by <c>option.label</c>.
            </remarks>
        </member>
        <member name="P:PlaywrightSharp.SelectOption.Index">
            <summary>
            Gets or sets the index option.
            </summary>
            <remarks>
            Matches by the index.
            </remarks>
        </member>
        <member name="T:PlaywrightSharp.Selectors">
            <summary>
            Selectors can be used to install custom selector engines.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.Selectors.RegisterAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Registers a new selector engine.
            </summary>
            <param name="name">Name that is used in selectors as a prefix, e.g. {name: 'foo'} enables foo=myselectorbody selectors. May only contain [a-zA-Z0-9_] characters.</param>
            <param name="script">Script that evaluates to a selector engine instance.</param>
            <param name="path">Path to the JavaScript file. If path is a relative path, then it is resolved relative to current working directory.</param>
            <param name="content">Raw script content.</param>
            <param name="contentScript">Whether to run this selector engine in isolated JavaScript environment. This environment has access to the same DOM, but not any JavaScript objects from the frame's scripts. Defaults to false. Note that running as a content script is not guaranteed when this engine is used together with other registered engines.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the engine is registered.</returns>
        </member>
        <member name="P:PlaywrightSharp.SelectorsOwner.PlaywrightSharp#Transport#Channels#IChannelOwner#Channel">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.SelectorsOwner.PlaywrightSharp#Transport#Channels#IChannelOwner{PlaywrightSharp#SelectorsOwner}#Channel">
            <inheritdoc/>
        </member>
        <member name="T:PlaywrightSharp.SerializedAXNode">
            <summary>
            AXNode.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.SerializedAXNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PlaywrightSharp.SerializedAXNode"/> class.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.SerializedAXNode.Role">
            <summary>
            The <see fref="https://www.w3.org/TR/wai-aria/#usage_intro">role</see>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.SerializedAXNode.Name">
            <summary>
            A human readable name for the node.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.SerializedAXNode.ValueString">
            <summary>
            The current value of the node.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.SerializedAXNode.ValueNumber">
            <summary>
            The current value of the node.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.SerializedAXNode.Description">
            <summary>
            An additional human readable description of the node.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.SerializedAXNode.KeyShortcuts">
            <summary>
            Keyboard shortcuts associated with this node.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.SerializedAXNode.RoleDescription">
            <summary>
            A human readable alternative to the role.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.SerializedAXNode.ValueText">
            <summary>
            A description of the current value.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.SerializedAXNode.Disabled">
            <summary>
            Whether the node is disabled.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.SerializedAXNode.Expanded">
            <summary>
            Whether the node is expanded or collapsed.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.SerializedAXNode.Focused">
            <summary>
            Whether the node is focused.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.SerializedAXNode.Modal">
            <summary>
            Whether the node is <see href="https://en.wikipedia.org/wiki/Modal_window">modal</see>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.SerializedAXNode.Multiline">
            <summary>
            Whether the node text input supports multiline.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.SerializedAXNode.Multiselectable">
            <summary>
            Whether more than one child can be selected.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.SerializedAXNode.Readonly">
            <summary>
            Whether the node is read only.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.SerializedAXNode.Required">
            <summary>
            Whether the node is required.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.SerializedAXNode.Selected">
            <summary>
            Whether the node is selected in its parent node.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.SerializedAXNode.Checked">
            <summary>
            Whether the checkbox is checked, or "mixed".
            </summary>
        </member>
        <member name="P:PlaywrightSharp.SerializedAXNode.Pressed">
            <summary>
            Whether the toggle button is checked, or "mixed".
            </summary>
        </member>
        <member name="P:PlaywrightSharp.SerializedAXNode.Level">
            <summary>
            The level of a heading.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.SerializedAXNode.ValueMin">
            <summary>
            The minimum value in a node.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.SerializedAXNode.ValueMax">
            <summary>
            The maximum value in a node.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.SerializedAXNode.AutoComplete">
            <summary>
            What kind of autocomplete is supported by a control.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.SerializedAXNode.HasPopup">
            <summary>
            What kind of popup is currently being shown for a node.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.SerializedAXNode.Invalid">
            <summary>
            Whether and in what way this node's value is invalid.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.SerializedAXNode.Orientation">
            <summary>
            Whether the node is oriented horizontally or vertically.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.SerializedAXNode.Children">
            <summary>
            Child nodes of this node, if any.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.SerializedAXNode.Equals(PlaywrightSharp.SerializedAXNode)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.SerializedAXNode.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.SerializedAXNode.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:PlaywrightSharp.SetNetworkCookieParam">
            <summary>
            Cookie set data.
            </summary>
            <seealso cref="M:PlaywrightSharp.IBrowserContext.AddCookiesAsync(PlaywrightSharp.SetNetworkCookieParam[])"/>
            <seealso cref="M:PlaywrightSharp.IBrowserContext.GetCookiesAsync(System.String[])"/>
        </member>
        <member name="P:PlaywrightSharp.SetNetworkCookieParam.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:PlaywrightSharp.SetNetworkCookieParam.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:PlaywrightSharp.SetNetworkCookieParam.Domain">
            <summary>
            Gets or sets the domain.
            </summary>
            <value>The domain.</value>
        </member>
        <member name="P:PlaywrightSharp.SetNetworkCookieParam.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:PlaywrightSharp.SetNetworkCookieParam.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:PlaywrightSharp.SetNetworkCookieParam.Expires">
            <summary>
            Gets or sets the expiration. Unix time in seconds.
            </summary>
            <value>Expiration.</value>
        </member>
        <member name="P:PlaywrightSharp.SetNetworkCookieParam.HttpOnly">
            <summary>
            Gets or sets if it's HTTP only.
            </summary>
            <value>Whether it's http only or not.</value>
        </member>
        <member name="P:PlaywrightSharp.SetNetworkCookieParam.Secure">
            <summary>
            Gets or sets if it's secure.
            </summary>
            <value>Whether it's secure or not.</value>
        </member>
        <member name="P:PlaywrightSharp.SetNetworkCookieParam.SameSite">
            <summary>
            Gets or sets the cookies SameSite value.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.SetNetworkCookieParam.Equals(PlaywrightSharp.SetNetworkCookieParam)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.SetNetworkCookieParam.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.SetNetworkCookieParam.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:PlaywrightSharp.StorageState">
            <summary>
            See <see cref="P:PlaywrightSharp.BrowserContextOptions.StorageState"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.StorageState.Cookies">
            <summary>
            Cookie list.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.StorageState.Origins">
            <summary>
            List of local storage per origin.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.StorageState.Equals(PlaywrightSharp.StorageState)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.StorageState.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.StorageState.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:PlaywrightSharp.StorageStateOrigin">
            <summary>
            See <see cref="P:PlaywrightSharp.StorageState.Origins"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.StorageStateOrigin.Origin">
            <summary>
            Origin.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.StorageStateOrigin.LocalStorage">
            <summary>
            Local storage.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.StorageStateOrigin.Equals(PlaywrightSharp.StorageStateOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.StorageStateOrigin.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.StorageStateOrigin.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:PlaywrightSharp.TargetClosedException">
            <summary>
            Exception thrown by a connection when it detects that the target was closed.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.TargetClosedException.#ctor">
            <inheritdoc cref="T:System.Exception"/>
        </member>
        <member name="M:PlaywrightSharp.TargetClosedException.#ctor(System.String)">
            <inheritdoc cref="T:System.Exception"/>
        </member>
        <member name="M:PlaywrightSharp.TargetClosedException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:System.Exception"/>
        </member>
        <member name="M:PlaywrightSharp.TargetClosedException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PlaywrightSharp.TargetClosedException"/> class.
            </summary>
            <param name="message">Message.</param>
            <param name="closeReason">Close reason.</param>
        </member>
        <member name="P:PlaywrightSharp.TargetClosedException.CloseReason">
            <summary>
            Close Reason.
            </summary>
            <value>The close reason.</value>
        </member>
        <member name="T:PlaywrightSharp.Transport.ChannelOwnerBase">
            <summary>
            Base Channel owner class.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Transport.ChannelOwnerBase.PlaywrightSharp#Transport#Channels#IChannelOwner#Connection">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Transport.ChannelOwnerBase.PlaywrightSharp#Transport#Channels#IChannelOwner#Channel">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Transport.ChannelOwnerBase.PlaywrightSharp#Transport#Channels#IChannelOwner#Objects">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Transport.ChannelOwnerBase.PlaywrightSharp#Transport#Channels#IChannelOwner#DisposeOwner">
            <inheritdoc/>
        </member>
        <member name="T:PlaywrightSharp.Transport.Channels.IChannel`1">
            <summary>
            Channel interface.
            </summary>
            <typeparam name="T">Chanel object type.</typeparam>
        </member>
        <member name="P:PlaywrightSharp.Transport.Channels.IChannel`1.Object">
            <summary>
            Channel object.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Transport.Channels.IChannelOwner">
            <summary>
            An IChannelOwner has the ability to build data coming from a Playwright server and convert it into a Playwright class.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Transport.Channels.IChannelOwner.Connection">
            <summary>
            Connection.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Transport.Channels.IChannelOwner.Channel">
            <summary>
            Channel.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Transport.Channels.IChannelOwner.Objects">
            <summary>
            Child objects.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.Transport.Channels.IChannelOwner.DisposeOwner">
            <summary>
            Removes the object from the parent and the connection list.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Transport.Channels.IChannelOwner`1">
            <summary>
            An IChannelOwner has the ability to build data coming from a Playwright server and convert it into a Playwright class.
            </summary>
            <typeparam name="T">Channel Owner implementation.</typeparam>
        </member>
        <member name="P:PlaywrightSharp.Transport.Channels.IChannelOwner`1.Channel">
            <summary>
            Channel.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Transport.Channels.HttpMethodConverter">
            <summary>
            JSON converter for <see cref="T:System.Net.Http.HttpMethod"/>.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.Transport.Channels.HttpMethodConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Transport.Channels.HttpMethodConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Transport.Channels.HttpMethodConverter.Write(System.Text.Json.Utf8JsonWriter,System.Net.Http.HttpMethod,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Transport.Connection.Finalize">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="T:PlaywrightSharp.Transport.Converters.ElementHandleToGuidConverter">
            <summary>
            We shouldn't need this class, having <see cref="T:PlaywrightSharp.Transport.Converters.ChannelOwnerToGuidConverter"/>.
            But we have some issues with .NET 5 https://github.com/dotnet/runtime/issues/45833.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Transport.IConnectionTransport">
            <summary>
            Transport interface.
            </summary>
        </member>
        <member name="E:PlaywrightSharp.Transport.IConnectionTransport.MessageReceived">
            <summary>
            Occurs when a message is received.
            </summary>
        </member>
        <member name="E:PlaywrightSharp.Transport.IConnectionTransport.LogReceived">
            <summary>
            Occurs when a log message is received.
            </summary>
        </member>
        <member name="E:PlaywrightSharp.Transport.IConnectionTransport.TransportClosed">
            <summary>
            Occurs when the transport is closed.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.Transport.IConnectionTransport.SendAsync(System.String)">
            <summary>
            Sends a message using the transport.
            </summary>
            <returns>The task.</returns>
            <param name="message">Message to send.</param>
        </member>
        <member name="M:PlaywrightSharp.Transport.IConnectionTransport.Close(System.String)">
            <summary>
            Closes the connection.
            </summary>
            <param name="closeReason">Close reason.</param>
        </member>
        <member name="T:PlaywrightSharp.Transport.IMessageResponse">
            <summary>
            Message response info.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Transport.LogReceivedEventArgs">
            <summary>
            Log received event arguments.
            <see cref="E:PlaywrightSharp.Transport.IConnectionTransport.LogReceived"/>.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.Transport.LogReceivedEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PlaywrightSharp.Transport.LogReceivedEventArgs"/> class.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="P:PlaywrightSharp.Transport.LogReceivedEventArgs.Message">
            <summary>
            Transport message.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Transport.MessageReceivedEventArgs">
            <summary>
            Message received event arguments.
            <see cref="E:PlaywrightSharp.Transport.IConnectionTransport.MessageReceived"/>.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.Transport.MessageReceivedEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PlaywrightSharp.Transport.MessageReceivedEventArgs"/> class.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="P:PlaywrightSharp.Transport.MessageReceivedEventArgs.Message">
            <summary>
            Transport message.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.Transport.StdIOTransport.Finalize">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:PlaywrightSharp.Transport.StdIOTransport.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Transport.StdIOTransport.Close(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:PlaywrightSharp.Transport.TransportClosedEventArgs">
            <summary>
            See <see cref="E:PlaywrightSharp.Transport.IConnectionTransport.TransportClosed"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.Transport.TransportClosedEventArgs.CloseReason">
            <summary>
            Close reason.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.Transport.TransportTaskScheduler">
            <summary>
            Delegate for scheduling of long-running transport tasks.
            </summary>
            <param name="func">Reader func.</param>
            <param name="cancellationToken">Cancellation token for the task to be scheduled.</param>
        </member>
        <member name="M:PlaywrightSharp.Video.GetPathAsync">
            <inheritdoc/>
        </member>
        <member name="T:PlaywrightSharp.ViewportSize">
            <summary>
            View port data.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.ViewportSize.None">
            <summary>
            ViewportSize used to determine if the a Viewport was set or not.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.ViewportSize.Width">
            <summary>
            Viewport width.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.ViewportSize.Height">
            <summary>
            Viewport height.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.ViewportSize.Clone">
            <summary>
            Clones the <see cref="T:PlaywrightSharp.ViewportSize"/>.
            </summary>
            <returns>A copy of the current <see cref="T:PlaywrightSharp.ViewportSize"/>.</returns>
        </member>
        <member name="M:PlaywrightSharp.ViewportSize.Equals(PlaywrightSharp.ViewportSize)">
            <inheritdoc cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:PlaywrightSharp.ViewportSize.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:PlaywrightSharp.ViewportSize.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="T:PlaywrightSharp.WaitForState">
            <summary>
            Wait for options for <see cref="M:PlaywrightSharp.IPage.WaitForSelectorAsync(System.String,System.Nullable{PlaywrightSharp.WaitForState},System.Nullable{System.Int32})"/> and <see cref="M:PlaywrightSharp.IFrame.WaitForSelectorAsync(System.String,System.Nullable{PlaywrightSharp.WaitForState},System.Nullable{System.Int32})"/>.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.WaitForState.Attached">
            <summary>
            Attached.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.WaitForState.Detached">
            <summary>
            Detached.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.WaitForState.Visible">
            <summary>
            Wait for visible.
            </summary>
        </member>
        <member name="F:PlaywrightSharp.WaitForState.Hidden">
            <summary>
            Wait for hidden.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.WebSocket">
            <inheritdoc cref="T:PlaywrightSharp.IWebSocket"/>
        </member>
        <member name="E:PlaywrightSharp.WebSocket.Close">
            <inheritdoc/>
        </member>
        <member name="E:PlaywrightSharp.WebSocket.FrameSent">
            <inheritdoc/>
        </member>
        <member name="E:PlaywrightSharp.WebSocket.FrameReceived">
            <inheritdoc/>
        </member>
        <member name="E:PlaywrightSharp.WebSocket.SocketError">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.WebSocket.PlaywrightSharp#Transport#Channels#IChannelOwner#Channel">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.WebSocket.PlaywrightSharp#Transport#Channels#IChannelOwner{PlaywrightSharp#WebSocket}#Channel">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.WebSocket.Url">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.WebSocket.IsClosed">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.WebSocket.WaitForEventAsync``1(PlaywrightSharp.PlaywrightEvent{``0},System.Func{``0,System.Boolean},System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="T:PlaywrightSharp.WebSocketErrorEventArgs">
            <summary>
            See <see cref="E:PlaywrightSharp.IWebSocket.SocketError"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.WebSocketErrorEventArgs.ErrorMessage">
            <summary>
            Error Message.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.WebSocketEvent">
            <summary>
            WebSocket events for <see cref="M:PlaywrightSharp.IWebSocket.WaitForEventAsync``1(PlaywrightSharp.PlaywrightEvent{``0},System.Func{``0,System.Boolean},System.Nullable{System.Int32})"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.WebSocketEvent.Close">
            <summary>
            <see cref="T:PlaywrightSharp.PlaywrightEvent`1"/> representing a <see cref="E:PlaywrightSharp.IWebSocket.Close"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.WebSocketEvent.FrameReceived">
            <summary>
            <see cref="T:PlaywrightSharp.PlaywrightEvent`1"/> representing a <see cref="E:PlaywrightSharp.IWebSocket.FrameReceived"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.WebSocketEvent.FrameSent">
            <summary>
            <see cref="T:PlaywrightSharp.PlaywrightEvent`1"/> representing a <see cref="E:PlaywrightSharp.IWebSocket.FrameSent"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.WebSocketEvent.SocketError">
            <summary>
            <see cref="T:PlaywrightSharp.PlaywrightEvent`1"/> representing a <see cref="E:PlaywrightSharp.IWebSocket.SocketError"/>.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.WebSocketEventArgs">
            <summary>
            See <seealso cref="E:PlaywrightSharp.IPage.WebSocket"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.WebSocketEventArgs.WebSocket">
            <summary>
            The <see cref="T:PlaywrightSharp.IWebSocket"/>.
            </summary>
        </member>
        <member name="T:PlaywrightSharp.WebSocketFrameEventArgs">
            <summary>
            See <see cref="E:PlaywrightSharp.IWebSocket.FrameSent"/> and <see cref="E:PlaywrightSharp.IWebSocket.FrameReceived"/>.
            </summary>
        </member>
        <member name="P:PlaywrightSharp.WebSocketFrameEventArgs.Payload">
            <summary>
            Frame payload.
            </summary>
        </member>
        <member name="E:PlaywrightSharp.Worker.Close">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Worker.Url">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Worker.PlaywrightSharp#Transport#Channels#IChannelOwner#Channel">
            <inheritdoc/>
        </member>
        <member name="P:PlaywrightSharp.Worker.PlaywrightSharp#Transport#Channels#IChannelOwner{PlaywrightSharp#Worker}#Channel">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Worker.EvaluateHandleAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Worker.EvaluateHandleAsync(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PlaywrightSharp.Worker.EvaluateAsync``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Worker.EvaluateAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Worker.EvaluateAsync(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PlaywrightSharp.Worker.EvaluateAsync``1(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:PlaywrightSharp.WorkerEventArgs">
            <summary>
            Workder created event arguments.
            </summary>
        </member>
        <member name="M:PlaywrightSharp.WorkerEventArgs.#ctor(PlaywrightSharp.IWorker)">
            <summary>
            Initializes a new instance of the <see cref="T:PlaywrightSharp.WorkerEventArgs"/> class.
            </summary>
            <param name="worker">Worker.</param>
        </member>
        <member name="P:PlaywrightSharp.WorkerEventArgs.Worker">
            <summary>
            Worker.
            </summary>
            <value>The worker.</value>
        </member>
    </members>
</doc>
